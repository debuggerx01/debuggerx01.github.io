<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>每周TODO——个人向待办管理工具</title>
      <link href="/2024/12/08/weekly-todo-app/"/>
      <url>/2024/12/08/weekly-todo-app/</url>
      
        <content type="html"><![CDATA[<blockquote><p>独立开发三件套 - 记账、日记、TodoList。没能免俗，我也做了个TODO工具😂</p></blockquote><h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>简单来说，是因为我真的不喜欢记待办（更不不喜欢记账和写日记<del>正经人谁写日记啊</del>）。以前试过用记事本📒、便签📝记录，也试过滴答清单、Worktile等专业工具，但总是用一段时间觉得不爽就没能坚持下去了。<br>比如：<br><img src="/2024/12/08/weekly-todo-app/worktile1.webp" alt="worktil1"><br>越用越烦，每次打开前都要做好心理准备……<del>我老婆还要更自律一些</del></p><p>以及<br><img src="/2024/12/08/weekly-todo-app/worktile2.webp" alt="worktil2"><br>不知道有没有人懂这种心理——有时候不做计划的时候还能偶尔想起来做点自律的事情，但是一旦下定决心做了计划，反而产生了拖延情绪彻底躺平，还不如没做计划之前的表现🤣</p><p>但是最近工作内容异常繁杂，临时需求频发，靠记忆属实不太现实。这次我先用了一周的飞书文档，又用了一周的飞书任务管理，果然还是不顺手，最终决定为自己做一个“恰到好处”的Todo工具。</p><h1 id="分析一下对我来说的“恰到好处”"><a href="#分析一下对我来说的“恰到好处”" class="headerlink" title="分析一下对我来说的“恰到好处”"></a>分析一下对我来说的“恰到好处”</h1><h2 id="需要的"><a href="#需要的" class="headerlink" title="需要的"></a>需要的</h2><ul><li>因为现在工作一般是以周为单位开展，而且需要写周报，所以我的任务管理工具也应该以周为时间单位</li><li>喜欢类似Jira面板那样拖拽的方式流转任务状态，拖动的时候总有种莫名的爽感（<del>爱撕机膜人</del>）</li><li>新一周开始自动同步上周的未完成任务，即使是已完成的任务如果太多了看上去一样会产生压力感，Jira那种手动创建Sprint的操作也觉得不够爽</li><li>需要支持Markdown语法，码农标配的属于是</li><li>内容部分也可以在卡片上显示，如果是链接的话可以直接点击打开，不喜欢每次想看一个任务关联的网页还需要点开详情去找</li><li>任务可以设置优先级，个人偏好“emergency-high-normal-low”四个等级够用了</li><li>支持标题和全文搜索，这个还是用得到的</li><li>符合个人的审美，最好是和deepin的风格一致，看着顺眼才能勾起使用的兴趣</li></ul><h2 id="不需要的"><a href="#不需要的" class="headerlink" title="不需要的"></a>不需要的</h2><ul><li>复杂的设置和自定义选项，报表、甘特图等高级功能：我只需要一个面板足矣。</li><li>云同步、多人协作：这就是方便我自己工作时候用的，下了班还看什么看……协作更是无稽之谈，是嫌管我自己的人还不够多咋地？</li><li>Backlog：这玩意看着就烦……在好几家公司到团队例行过Jira的时候都是先打开Backlog，负责人一脸拧巴地一条条把那些看过无数次的任务瞟过去，然后深沉一下说“嗯～感觉这次也没什么能做的，我们过新增的需求吧”——对于优先级比“low”还低的任务，我宁愿删了它🔪</li><li>支持贴图、传视频等：その必要はない。</li><li>支持设置DeadLine：その必要はない。</li><li>支持提醒通知：その必要はない。</li><li>支持XXXXXX：その必要はない！！！（<del>剑戟怒涛警告</del>⚠️）</li></ul><iframe id="bili1" width="100%" src="//player.bilibili.com/player.html?isOutside=true&amp;aid=205029303&amp;bvid=BV17h411U7xz&amp;cid=324546136&amp;p=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili1 = document.querySelector('#bili1');    var container = document.querySelector('#article-container');    bili1.height = (container.clientWidth * 5 / 8) + 'px';</script><p>如上所述，简单画了下设计草稿：<br><img src="/2024/12/08/weekly-todo-app/excalidraw.webp" alt="excalidraw"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><blockquote><p>出于解决工作困扰的目的而写的小工具，如果花费太多精力属实是本末倒置，于是原计划一个通宵搞定（最终花了一个半通宵的时间 <del>，挑战失败</del>），所以使用了大量之前项目的代码</p></blockquote><ul><li><p>状态管理使用<a href="https://riverpod.dev/">Riverpod</a>，个人感觉这是目前最符合Flutter思想且开发效率最高的方案了，唯一的缺憾是目前还不支持DevTools的extension：<a href="https://github.com/rrousselGit/riverpod/issues/3541">Add a DevTools extension for riverpod</a></p></li><li><p>使用<a href="https://github.com/leanflutter/window_manager">window_manager</a>限制APP最小窗口尺寸为1280x800</p></li><li><p>使用<a href="https://pub-web.flutter-io.cn/packages/url_launcher">url_launcher</a>用于打开链接</p></li><li><p>使用<a href="https://pub-web.flutter-io.cn/packages/flutter_shake_animated">flutter_shake_animated</a>实现任务卡片抖动动画</p></li><li><p>使用<a href="https://pub-web.flutter-io.cn/packages/scrollable_positioned_list">scrollable_positioned_list</a>实现转跳至指定任务卡片</p></li><li><p>来自<a href="/2023/07/18/remote-system-monitor/">远程监视器</a>和<a href="https://github.com/debuggerx01/dde_gesture_manager">DDE手势管理器</a>的部分代码和组件</p></li></ul><h1 id="项目地址及说明"><a href="#项目地址及说明" class="headerlink" title="项目地址及说明"></a>项目地址及说明</h1><p><a href="https://github.com/debuggerx01/weekly_todo">Github: debuggerx01/weekly_todo</a></p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux通用键位修改</title>
      <link href="/2023/10/07/map-scancodes-to-keycodes/"/>
      <url>/2023/10/07/map-scancodes-to-keycodes/</url>
      
        <content type="html"><![CDATA[<p>下面的修改主要是因为：</p><ol><li>现在习惯使用84配列的机械键盘，该配列下Insert键常被精简为需要和Fn键组合触发，这样使用IDE时某些快捷键不是很方便使用，反倒是PrtSc这个不常用的按键被保留了，所以把PrtSc键映射为Insert可以提高效率</li><li>现在使用Fcitx5，虽然右侧Shift可以设置为输入法切换按键，但是无法将右Alt、Ctrl键设为热键；同时由于开始尝试双拼，v这个默认用于触发快速输入的按键在双拼模式下需要使用，所以把右Alt键映射为F16，这样即可实现用右Alt进入快速输入模式</li></ol><p>主要参考文章：</p><ul><li><a href="https://www.bilibili.com/read/cv5156572/">Linux通用键位修改（中）-实际操作</a></li><li><a href="https://harttle.land/2019/08/08/linux-keymap-on-macbook.html#header-2">ArchLinux 键盘映射：交换 CapsLock 和 Ctrl</a></li></ul><p>修改操作：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将PrtSc键映射为Insert</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将右Alt键映射为F16(XF86Launch7)</span></span><br><span class="line">sudo tee /etc/udev/hwdb.d/90-custom-keyboard.hwdb &amp;&gt;/dev/null &lt;&lt;EOF</span><br><span class="line">evdev:input:b0003*</span><br><span class="line">  KEYBOARD_KEY_70046=insert</span><br><span class="line">  KEYBOARD_KEY_700e6=f16</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新hwdb并触发生效</span></span><br><span class="line">sudo systemd-hwdb update &amp;&amp; sudo udevadm trigger</span><br></pre></td></tr></tbody></table></figure><p>上面的配置是匹配所有USB键盘，如果需要匹配笔记本电脑内置键盘，可以尝试<code>evdev:atkdb:dim*</code></p>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fcitx5_customizer —— 一个让 Fcitx5 更符合简中用户使用习惯的优化脚本</title>
      <link href="/2023/09/20/fcitx5-customizer/"/>
      <url>/2023/09/20/fcitx5-customizer/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://wiki.archlinuxcn.org/wiki/Fcitx">Fcitx</a> (Flexible Input Method Framework) ──即小企鹅输入法，它是一个以 GPL 方式发布的输入法平台,是在 Linux 操作系统中常用的中文输入法。它的优点是，短小精悍、跟程序的兼容性比较好。而 <a href="https://wiki.archlinuxcn.org/wiki/Fcitx5">Fcitx5</a> 则是 Fcitx 的接替版本，其 slogen 是 <a href="https://github.com/fcitx/fcitx5">maybe a new fcitx.</a> 但是初始状态下的 Fcitx5 由于词库的缺失以及默认配置与很多人的习惯不同，所以需要进行一些修改和配置才能获得比较好的体验，于是我创建了一个专门用于优化 Fcitx5 的脚本——<a href="https://github.com/debuggerx01/fcitx5_customizer">fcitx5_customizer</a></p></blockquote><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完全自定义</span></span><br><span class="line">bash fcitx5_customizer.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用推荐配置</span></span><br><span class="line">bash fcitx5_customizer.sh recommend</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在线运行</span></span><br><span class="line">bash -c "$(curl -fsSL https://www.debuggerx.com/fcitx5_customizer/fcitx5_customizer.sh)"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在线运行并使用推荐配置</span></span><br><span class="line">curl -sSL https://www.debuggerx.com/fcitx5_customizer/fcitx5_customizer.sh | bash -s -- recommend</span><br></pre></td></tr></tbody></table></figure><h1 id="优化后使用技巧"><a href="#优化后使用技巧" class="headerlink" title="优化后使用技巧"></a>优化后使用技巧</h1><blockquote><p>当应用<code>配置快速输入</code>优化项后，可以利用快速输入(默认按V键进入该模式)来输入标点、特殊符号、时间日期，以及实现数字转大写金额等功能</p></blockquote><h2 id="输入标点"><a href="#输入标点" class="headerlink" title="输入标点"></a>输入标点</h2><p>默认配置下的 Fcitx5 有一个让很多新手非常困扰的问题，就是当按下键盘上的<code>[</code>和<code>]</code>时，输入法打出的标点却是<code>·</code>和<code>「</code>，而不是习惯中的中文方括号<code>【</code>和<code>】</code>，所以我的优化脚本中提供了一个<code>优化中文标点</code>的选项用于修正这个问题。此时如果就是想输入包括<code>·</code>和<code>「</code>等在内的各种标点，就可以利用快速输入，先按V键，再按标点按键，即可出现各种特殊标点可供选择输入：<br><img src="/2023/09/20/fcitx5-customizer/punctuation.webp" alt="punctuation"></p><h2 id="查看所有的快速输入命令"><a href="#查看所有的快速输入命令" class="headerlink" title="查看所有的快速输入命令"></a>查看所有的快速输入命令</h2><p>快速输入的使用方式是，先按键(默认是V键)触发进入快速输入模式，然后输入指令，例如<code>vfh</code>就是输入符号，<code>vsz</code>就是输入各种样式的数字。<br>当想要查看所有的快速输入命令时，可以输入<code>vtsf</code>(提示符的拼音首字母)，即可看到所有的命令缩写：<br><img src="/2023/09/20/fcitx5-customizer/tsf.webp" alt="tsf"></p><h2 id="输入特殊符号"><a href="#输入特殊符号" class="headerlink" title="输入特殊符号"></a>输入特殊符号</h2><p>由于 Fcitx5 暂时还没有实现类似 Fcitx 以及搜狗等输入法中的特殊符号输入面板，所以折中的办法是利用快速输入来实现。<br>感谢来自deepin论坛的<code>doodo</code>分享的方案及配置文件，大部分数据来自<a href="https://github.com/rime">rime</a>项目，本人在此基础上进行了一些补充和缺失的函数实现。<br>下面进行说明：</p><h3 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h3><p>箭头是非常常用的特殊符号，优化后的快速输入有三种输入箭头的方法：</p><ul><li>直接输入<code>vzuo</code>、<code>vyou</code>、<code>vshang</code>、<code>vxia</code>即可输入←、→、↑、↓这几个常用的箭头</li><li>输入<code>vjt</code>后，选择想要的箭头<br>  <img src="/2023/09/20/fcitx5-customizer/arrow1.webp" alt="arrow1.webp"></li><li>输入<code>v\</code>后，选择想要的粗箭头<br>  <img src="/2023/09/20/fcitx5-customizer/arrow2.webp" alt="arrow2.webp"></li></ul><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p>建议先输入<code>vtsf</code>查看所有的命令，下面列出几种常用的符号输入</p><ul><li><img src="/2023/09/20/fcitx5-customizer/fh1.webp" alt="fh1.webp"></li><li><img src="/2023/09/20/fcitx5-customizer/fh2.webp" alt="fh2.webp"></li><li><img src="/2023/09/20/fcitx5-customizer/fh3.webp" alt="fh3.webp"></li><li><img src="/2023/09/20/fcitx5-customizer/fh4.webp" alt="fh4.webp"></li></ul><h3 id="emoji表情"><a href="#emoji表情" class="headerlink" title="emoji表情"></a>emoji表情</h3><p>对于常见的emoji表情，可以尝试直接输入拼音，比如<code>haha</code>、<code>xiaoku</code>、<code>wuyu</code>、<code>ai</code>、<code>zhadan</code>：<br><img src="/2023/09/20/fcitx5-customizer/emoji1.webp" alt="emoji1.webp"><br>更多emoji表情，可以尝试输入<code>v:[emoji的英文名]</code>输入：<br><img src="/2023/09/20/fcitx5-customizer/emoji2.webp" alt="emoji2.webp"></p><h2 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h2><ul><li>输入当前日期<br><img src="/2023/09/20/fcitx5-customizer/rq.webp" alt="rq.webp"></li><li>输入当前时间<br><img src="/2023/09/20/fcitx5-customizer/sj.webp" alt="sj.webp"></li><li>输入当前时间的时间戳/ISO8601格式<br><img src="/2023/09/20/fcitx5-customizer/sjc.webp" alt="sjc.webp"></li></ul><h2 id="数字转大写金额"><a href="#数字转大写金额" class="headerlink" title="数字转大写金额"></a>数字转大写金额</h2><blockquote><p>实现该功能的lua脚本来自<a href="https://github.com/iDvel/rime-ice/issues/264">https://github.com/iDvel/rime-ice/issues/264</a></p></blockquote><p>使用方法是<code>vdx[数字]</code>，例如整数：<br><img src="/2023/09/20/fcitx5-customizer/dx1.webp" alt="dx1.webp"><br><img src="/2023/09/20/fcitx5-customizer/dx2.webp" alt="dx2.webp"><br>也支持小数：<br><img src="/2023/09/20/fcitx5-customizer/dx3.webp" alt="dx3.webp"></p><h1 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h1><h2 id="关于词库"><a href="#关于词库" class="headerlink" title="关于词库"></a>关于词库</h2><ol><li>脚本中的<code>安装搜狗词库</code>是从系统的仓库中尝试下载安装<code>fcitx5-pinyin-sougou</code>这个包，deepin的仓库中是有这个包的，而 debian、ubuntu 中默认是没有的，所以会显示安装失败。不过在安装了维基中文、精选搜狗细胞词库，并开启云拼音的情况下，少这么一个词库的影响也并不是很大。如果一定想要，可以参考源仓库的说明自行处理：<a href="https://github.com/CHN-beta/sougou-dict">sougou-dict</a>。</li><li>脚本中的<code>中文维基词库</code>来自仓库：<a href="https://github.com/felixonmars/fcitx5-pinyin-zhwiki">fcitx5-pinyin-zhwiki</a></li><li>脚本中的<code>精选搜狗细胞词库</code>来自搜狗<a href="https://pinyin.sogou.com/dict/">细胞词库官网</a>，目前包含如下词库：<ul><li>财经金融词汇大全【官方推荐】</li><li>法律词汇大全【官方推荐】</li><li>古诗词名句【官方推荐】</li><li>机械词汇大全【官方推荐】</li><li>计算机词汇大全【官方推荐】</li><li>建筑词汇大全【官方推荐】</li><li>农业词汇大全【官方推荐】</li><li>搜狗标准词库</li><li>医学词汇大全【官方推荐】</li><li>政府机关团体机构大全【官方推荐】</li><li>中国历史词汇大全【官方推荐】</li></ul></li></ol><h2 id="候选词数量和修改加减号翻页"><a href="#候选词数量和修改加减号翻页" class="headerlink" title="候选词数量和修改加减号翻页"></a>候选词数量和修改加减号翻页</h2><p>Fcitx5 默认配置下，拼音和通用(例如在快速输入模式)的配置是不统一的，所以会出现拼音输入是候选词是7个、可以用加减号翻页，而快速输入时候选词是5个、不能用加减号翻页，造成体验上的不一致。所以当通过脚本修改这两项配置时，会同时修改两边的配置，从而降低输入时的差异感。</p><h2 id="关闭预编辑"><a href="#关闭预编辑" class="headerlink" title="关闭预编辑"></a>关闭预编辑</h2><p>也就是禁用<code>单行模式</code>，因为该模式在某些程序下无效，在一些程序中会出现问题，并造成某些未知BUG，所以建议禁用，参考：<a href="https://github.com/fcitx/fcitx5/issues/60">https://github.com/fcitx/fcitx5/issues/60</a></p><h2 id="禁用不常用快捷键"><a href="#禁用不常用快捷键" class="headerlink" title="禁用不常用快捷键"></a>禁用不常用快捷键</h2><p>禁用一些不常用的快捷键，放置和第三方应用(如IDE)出现热键冲突。当前禁用的快捷键有：</p><ul><li>unicode相关快捷键 —— Ctrl+Alt+Shift+U</li><li>云拼音切换快捷键 —— Ctrl+Shift+C / Ctrl+Alt+Shift+C</li><li>简繁体切换 —— Ctrl+Shift+F</li><li>剪切板 —— Ctrl+;</li></ul><h2 id="配置快速输入"><a href="#配置快速输入" class="headerlink" title="配置快速输入"></a>配置快速输入</h2><p>参考上面的说明<a href="#%E8%BE%93%E5%85%A5%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7">输入特殊符号</a>，快速输入可以输入多种特殊符号，而输入时间日期和数字转大写金额的功能由于依赖lua脚本实现，所以需要勾选下面的<code>大写时关闭拼音输入</code>选项后才能使用。</p><h2 id="大写时关闭拼音输入"><a href="#大写时关闭拼音输入" class="headerlink" title="大写时关闭拼音输入"></a>大写时关闭拼音输入</h2><p>这个选项除了安装<code>大写时关闭拼音输入</code>的逻辑脚本，同时还安装了 Fcitx5 支持 lua 脚本的所有相关支持。如果只想开启脚本支持的功能，而不习惯这个<code>大写时关闭拼音输入</code>的特性，则可以在配置结束后执行如下命令删除脚本，并重启输入法：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~/.local/share/fcitx5/addon/uppercase_dis_ime.conf</span><br></pre></td></tr></tbody></table></figure><h2 id="关于皮肤"><a href="#关于皮肤" class="headerlink" title="关于皮肤"></a>关于皮肤</h2><p>本脚本当前收录的皮肤及效果图如下：</p><ul><li>星空黑(我转换并修正的一个搜狗皮肤，原地址：<a href="https://pinyin.sogou.com/skins/detail/view/info/526130">https://pinyin.sogou.com/skins/detail/view/info/526130</a>)<br>  <img src="/2023/09/20/fcitx5-customizer/sky_black.webp" alt="sky_black.webp"></li><li>breeze(原地址：<a href="https://github.com/scratch-er/fcitx5-breeze">https://github.com/scratch-er/fcitx5-breeze</a>)<br>  <img src="/2023/09/20/fcitx5-customizer/breeze.webp" alt="breeze.webp"></li><li>material-color(原地址：<a href="https://github.com/hosxy/Fcitx5-Material-Color">https://github.com/hosxy/Fcitx5-Material-Color</a>)<br>  <img src="/2023/09/20/fcitx5-customizer/material.webp" alt="material.webp"></li><li>nord(原地址：<a href="https://github.com/tonyfettes/fcitx5-nord">https://github.com/tonyfettes/fcitx5-nord</a>)<br>  <img src="/2023/09/20/fcitx5-customizer/nord.webp" alt="nord.webp"></li><li>solarized(原地址：<a href="https://github.com/mingyech/fcitx5-solarized">https://github.com/mingyech/fcitx5-solarized</a>)<br>  <img src="/2023/09/20/fcitx5-customizer/solarized.webp" alt="solarized.webp"></li><li>简约黑/白(Maicss专为深度制作的主题，原地址：<a href="https://bbs.deepin.org/post/223743">https://bbs.deepin.org/post/223743</a>)<br>  <img src="/2023/09/20/fcitx5-customizer/simple-black.webp" alt="simple-black.webp"></li><li>dracula(drbbr制作的德古拉主题，原地址：<a href="https://github.com/drbbr/fcitx5-dracula-theme">https://github.com/drbbr/fcitx5-dracula-theme</a>)<br>  <img src="/2023/09/20/fcitx5-customizer/dracula.webp" alt="dracula.webp"></li></ul><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><h3 id="curl未找到命令"><a href="#curl未找到命令" class="headerlink" title="curl未找到命令"></a>curl未找到命令</h3><p>如果执行优化命令时提示<code>curl</code>未找到命令，请先手动执行 <code>sudo apt install curl</code> 安装即可。</p><h3 id="当前输入法不是fcitx"><a href="#当前输入法不是fcitx" class="headerlink" title="当前输入法不是fcitx"></a>当前输入法不是fcitx</h3><p>只有当前系统正确安装并启用了 Fcitx5 输入法是，优化脚本才会真正执行。有一种情况是，当使用系统自带的输入法切换器将系统的输入法切换为 Fcitx5 时，虽然看上去已经切换成功并且输入法已经可以正常使用，但是系统的环境变量还没有及时刷新，所以脚本还是会认为系统输入法不是 Fcitx5。此时只要注销或重启一次系统，再次执行优化命令即可正确识别。</p><h1 id="部分参考资料及链接"><a href="#部分参考资料及链接" class="headerlink" title="部分参考资料及链接"></a>部分参考资料及链接</h1><ul><li><a href="https://bbs.deepin.org/post/229204">[经验分享] deepin安装fctix5输入法（无需编译，配图）</a></li><li><a href="https://bbs.deepin.org/post/223743">[经验分享] fcitx5输入法使用技巧&amp;简约皮肤分享</a></li><li><a href="https://www.aloxaf.com/2020/09/fcitx5_plugin/">使用 fcitx5-lua 编写 lua 插件</a></li><li><a href="https://wiki.archlinuxcn.org/wiki/Fcitx5">Fcitx5 -  Arch Linux 中文维基</a></li><li><a href="https://www.csslayer.info/wordpress/">CSS layer | Unlimited Code Works</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
            <tag> fcitx5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程监视器——使用Flutter/Dart开发的Linux系统状态监视APP</title>
      <link href="/2023/07/18/remote-system-monitor/"/>
      <url>/2023/07/18/remote-system-monitor/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是一个利用 Flutter/Dart 编写的，用于显示 Linux 系统状态信息的APP，可以运行在包括Android、iOS、Linux、MacOS、Windows等平台上，兼容从小屏手机到大屏幕电视等各种尺寸的展示，支持局域网自动发现服务，也支持通过网络远程使用。</p><h1 id="开发动机"><a href="#开发动机" class="headerlink" title="开发动机"></a>开发动机</h1><ol><li>组了台洋垃圾E5主机，配的是一颗10核20线程的CPU，所以想做一个可以随时获得数框框快乐的工具</li><li>钟爱的 deepin 系统升级v23版本后系统环境改动很大，原本使用的dock栏网速插件和悬浮窗插件失效了，所以打算做一个替代品</li><li>除了日常使用 Linux 桌面，手里还有一些运行 Linux 系统的云服务器、虚拟机和机顶盒等设备，所以想要做一个无关发行版和桌面环境，通用的系统监视工具</li><li>家里一堆淘汰的旧手机想要利用起来，并且用旧手机做系统状态监控可以在不占用一丁点的电脑屏幕空间情况下显示足够丰富的信息</li></ol><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>支持Android直接下载安装APP，iOS、Linux、MacOS、Windows等可以无修改直接支持</li><li>多CPU架构支持（X64、ARM64）</li><li>适配各种屏幕尺寸的显示、支持横竖屏切换</li><li>适配多核心的自适应布局显示，最多可同时显示105个核心的状态</li><li>安装脚本支持通过网络一键下载安装配置</li><li>支持局域网自动发现服务</li><li>支持通过网络远程使用</li><li>支持设备上线自动连接</li><li>优化网络数据传输量</li><li>低内存占用及CPU资源占用</li><li>进程合并显示优化、wine应用\玲珑应用进程信息优化</li><li>支持桌面应用进程显示窗口标题</li><li>可以显示的信息有：<ul><li>CPU频率、总占用率、以及每个核心的频率、占用率</li><li>内存信息及虚拟内存信息</li><li>当前网络上行、下行速度及总发送、总接收</li><li>CPU占用最高的进程列表及占用率</li><li>内存占用最高的进程列表及内存使用量</li></ul></li></ul><h1 id="客户端使用说明"><a href="#客户端使用说明" class="headerlink" title="客户端使用说明"></a>客户端使用说明</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>客户端打开后界面如下：<br><img src="/2023/07/18/remote-system-monitor/startup.webp" alt="startup"><br>左侧列表显示了在局域网中自动发现的服务器，并显示了其用户名、主机名、地址端口和开机时间信息。<br>点击服务器条目可直接进入监控页面，点击“记住并连接”按钮，则会先记住该服务器，再进入监控页面。</p><h2 id="添加服务器"><a href="#添加服务器" class="headerlink" title="添加服务器"></a>添加服务器</h2><p>如果由于各种原因无法自动发现局域网内的服务器，或者想要通过互联网连接远程服务器，则可以点击右下角的添加按钮。<br><img src="/2023/07/18/remote-system-monitor/add_server.webp" alt="add_server"><br>在弹出的对话框中输入服务器的地址、端口及名称(可选)，如果能够连接成功，则会添加该服务器并关闭对话框；否则将显示错误信息，请确认服务器正确运行、可以通过网络访问且输入的信息无误。</p><h2 id="编辑已保存的服务器"><a href="#编辑已保存的服务器" class="headerlink" title="编辑已保存的服务器"></a>编辑已保存的服务器</h2><p><img src="/2023/07/18/remote-system-monitor/edit_server.webp" alt="edit_server"><br>点击右上角的“编辑”按钮即可修改已保存的服务器。<br>对于局域网内自动发现的服务器，只能对其进行删除操作；<br>对于手动添加的远程服务器，可以点击修改，在弹出的对话框对其配置信息进行修改。</p><h2 id="监控页面-横屏"><a href="#监控页面-横屏" class="headerlink" title="监控页面(横屏)"></a>监控页面(横屏)</h2><p><img src="/2023/07/18/remote-system-monitor/monitor_landscape.webp" alt="monitor_landscape"><br>进入监控页面后，应用自动进入全屏模式，并且屏幕将保持常亮</p><h2 id="监控页面-竖屏"><a href="#监控页面-竖屏" class="headerlink" title="监控页面(竖屏)"></a>监控页面(竖屏)</h2><p><img src="/2023/07/18/remote-system-monitor/monitor_portrait.webp" alt="monitor_portrait"><br>横竖屏切换时，监控页面将自动修改布局以适应屏幕尺寸的变化。<br>点击监控页面任意位置将显示如上右图所示的按钮，点击即可退出监控页面回到首页。</p><blockquote><p>提示：可以在首页的已保存服务器中将常用服务器的“自动连接”选项打开，这样当应用检测到服务器在线时会自动进入监控页面。<br>当服务器关机或离线时，应用会自动退出监控模式，结合上面的自动连接功能，可以放一台旧手机在电脑旁，设置不自动锁屏并一直连接电源适配器(注意电池鼓包风险)，即可实现电脑开机自动监控，电脑关机自动退出，完全无需手动操作～</p></blockquote><h1 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1><p>请在 Linux 系统的桌面系统或服务器上，以 <em>非root</em> 权限执行如下命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c "$(curl -fsSL https://www.debuggerx.com/raw_assets/scripts/rsm_install.sh)"</span><br></pre></td></tr></tbody></table></figure><p>根据提示依次输入：</p><ol><li>sudo密码</li><li>服务监听的端口号（1024-65535）</li><li>服务的安装模式（1.桌面模式 2.服务器模式）</li></ol><p>完整截图如下：<br><img src="/2023/07/18/remote-system-monitor/rsm_install.webp" alt="rsm_install"></p><blockquote><p>注意：</p><ol><li>安装完成后会在当前终端中运行服务端程序，此时就可以直接使用客户端进行连接；手动关闭程序或退出终端后服务端不会自动重启，只会在下次系统启动或进入桌面时自动运行</li><li>UOS系统中安装过程中可能会弹窗询问是否允许添加启动项，请务必选择允许</li></ol></blockquote><h1 id="开发过程分享"><a href="#开发过程分享" class="headerlink" title="开发过程分享"></a>开发过程分享</h1><h2 id="感谢勇哥的技术分享"><a href="#感谢勇哥的技术分享" class="headerlink" title="感谢勇哥的技术分享"></a>感谢勇哥的技术分享</h2><p>在确定了需求和大致设计思路之后，我首先尝试搜索了Flutter/Dart的开发社区中已有的“轮子”。得益于这些年Flutter社区生态的蓬勃发展，其实现在也已经有不少用于在Linux环境获取系统信息的库，例如：</p><ul><li><a href="https://pub-web.flutter-io.cn/packages/system_info2">system_info2</a></li><li><a href="https://pub-web.flutter-io.cn/packages/system_resources">system_resources</a></li><li><a href="https://pub-web.flutter-io.cn/packages/linux_system_info">linux_system_info</a></li></ul><p>但在试验后，发现这些库都还不能完全满足我的需要，又查了一些资料和分享，也没能找到质量特别高且适合我的。<br>这时我忽然回忆起，好像曾看到过deepin的前CTO勇哥分享过几篇有关deepin开发的技术分享，其中似乎有一篇就是讲如何实现deepin里那个酷炫的系统监视器的，于是赶紧找来学习，一看之下大喜过望：</p><p><a href="https://www.jianshu.com/p/deb0ed35c1c2?clicktime=1578312314">深度系统监视器原理剖析</a></p><p>勇哥的这篇文章清晰易懂，娓娓道来，不仅介绍了在Linux系统中获取系统信息的方式，也详细解释了每个文件和数据的含义和解析计算方法，关键地方甚至还贴心地准备了示例代码，同时在实现deepin的系统监视器过程中碰到的问题和总结的技巧也毫无保留的分享了出来。早先也拜读过这篇文章，但当时是没有目的性的泛读，所以还不能完全体会到其价值；如今在有明确的目标和问题的情况下阅读，结合了与其他搜索到的文章资料的对比，才深刻感受到勇哥作为技术人的追求和务实、作为社区负责人的认真与严谨、以及作为开源导师的无私和热情。</p><p>再次勉励自己，向勇哥学习！<br>贴上勇哥的blog地址，希望看到本文的，对技术有追求的朋友可以看看：</p><p><a href="https://manateelazycat.github.io/">ManateeLazyCat - 「生活可以更简单, 欢迎来到我的开源世界」</a></p><h2 id="关于进程信息的合并"><a href="#关于进程信息的合并" class="headerlink" title="关于进程信息的合并"></a>关于进程信息的合并</h2><p>deepin的系统监视器有一个“问题”，用户经常会看到很多重复的应用或进程，尤其是使用浏览器的时候：</p><ul><li><a href="https://bbs.deepin.org/post/254246">浏览器进程怎么这么多？？？</a></li><li><a href="https://bbs.deepin.org/post/248456">为啥打开浏览器程序进程里面这么多浏览器的进程呢？</a></li></ul><p>其实这也算不上真正的问题，只是因为很多程序都是多进程设计，尤其是浏览器，本身就有多个进程，运行插件又要多几个进程，然后每多开标签页又都是新开进程，所以就会看到很多的“重复”。</p><p>但是或许这对于很多人来说并不是预期要想的结果，很多时候我们并不关系程序的每个子进程的信息，而是希望知道整个应用占用了多少的内存或CPU。所以我专门对进程信息做了合并处理，具体思路是：</p><ol><li>我们可以通过 <code>ps -e -o ppid,pid,command</code> 命令，获取所有进程的父进程ID、进程ID、已经完整命令行</li><li>观察输出的信息，我们可以发现大致两种情况<ol><li>一种是真正的主程序进程和子进程关系，例如chrome，所有子进程的占用可以合并到进程7055上：<br><img src="/2023/07/18/remote-system-monitor/chrome.webp" alt="chrome"></li><li>另一种则类似init进程及所有子进程，Linux下所有的进程都会是init进程的直接或间接子进程，这些子进程显然不能合并在一起：<br><img src="/2023/07/18/remote-system-monitor/init.webp" alt="init"></li></ol></li><li>观察上面两种情况，总结规律，我得出的判断依据是：<code>在某个进程的所有直接子进程中，是否存在子进程和父进程的命令相同的情况(排除参数)</code>，如果符合这个条件，就将子进程的内存及CPU占用累加后加到父进程身上，并依此递归处理，直到处理完系统中的所有进程，最终得到的就是一个相对合理的、重复较少的进程信息列表</li><li>实际操作发现，还有一些情况是上面的判断覆盖不到的，比如原生的飞书这个应用，它的子进程中存在 <code>'/proc/self/exe'</code> 这种cmd：<br> <img src="/2023/07/18/remote-system-monitor/feishu.webp" alt="feishu"><br> 参考 <a href="https://unix.stackexchange.com/questions/333225/which-process-is-proc-self-for">Which process is <code>/proc/self/</code> for?</a> ，<code>/proc/self/exe</code> 指的就是当前进程的命令行的意思，所以这种情况也应该算进去。</li><li>最后一种我碰到的特殊情况是，有些wine应用的cmd中包含空格，从而导致判断出错，也需要特殊处理</li></ol><h2 id="关于服务发现"><a href="#关于服务发现" class="headerlink" title="关于服务发现"></a>关于服务发现</h2><p>为了实现手机自动发现和连接上服务程序，我使用了 <a href="https://zh.wikipedia.org/wiki/Avahi_(%E8%BD%AF%E4%BB%B6)">Avahi</a> 这个用于服务注册和发现的工具。一个小知识是，树莓派的系统默认安装并启用了这个服务，所以可以通过访问 <code>[树莓派的主机名].local</code> 这个地址来访问连接局域网内的树莓派，而不用手动输入IP。<br>另外，如果安装了 <code>avahi-utils</code> 工具，可以尝试运行 <code>avahi-browse -a</code> ，这个命令，然后就可以看到局域网里各种注册的服务，你可能会发现Windows的共享网络、可能会发现路由器的信息，甚至是手机和其他家里连接了网络的物联网设备注册的服务，很有意思～</p><p>前段时间有个国外的软件很火，叫做 <a href="https://github.com/localsend/localsend">localsend</a>: <a href="https://zhuanlan.zhihu.com/p/640020786">苹果手机和安卓手机互传文件，LocalSend实测好用！</a>。因为它也是用Flutter写的跨平台工具，而且也实现了局域网内的互相发现，所以好奇看了下它的实现代码，结果找到这里：<a href="https://github.com/localsend/localsend/blob/ea1047451acc58de6edb7942c98a1c743570838a/lib/provider/network/nearby_devices_provider.dart#L78-L90">/lib/provider/network/nearby_devices_provider.dart#L78-L90</a></p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Device&gt; _getStream(<span class="built_in">String</span> networkInterface, <span class="built_in">int</span> port, <span class="built_in">bool</span> https, <span class="built_in">String</span> fingerprint) {</span><br><span class="line">  <span class="keyword">final</span> ipList = <span class="built_in">List</span>.generate(<span class="number">256</span>, (i) =&gt; <span class="string">'<span class="subst">${networkInterface.split(<span class="string">'.'</span>).take(<span class="number">3</span>).join(<span class="string">'.'</span>)}</span>.<span class="subst">$i</span>'</span>).where((ip) =&gt; ip != networkInterface).toList();</span><br><span class="line">  _runners[networkInterface]?.stop();</span><br><span class="line">  _runners[networkInterface] = TaskRunner&lt;Device?&gt;(</span><br><span class="line">    initialTasks: <span class="built_in">List</span>.generate(</span><br><span class="line">      ipList.length,</span><br><span class="line">      (index) =&gt; () <span class="keyword">async</span> =&gt; _doRequest(ipList[index], port, https, fingerprint),</span><br><span class="line">    ),</span><br><span class="line">    concurrency: <span class="number">50</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _runners[networkInterface]!.stream.where((device) =&gt; device != <span class="keyword">null</span>).cast&lt;Device&gt;();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>简单来说，这个工具发现局域网内的方法是，利用当前设备的ip的前三位，暴力尝试连接从<code>xxx.xxx.xxx.0</code>到<code>xxx.xxx.xxx.255</code>整个网段的所有IP，返回响应的就是可连接设备<span class="github-emoji"><span>😹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f639.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>据很多人测试，这个方法出奇的好用，尤其是某些网络下管理员会限制设备注册发现服务，用这个方法就可以了。<br>所以说有的时候，优雅的做法可能还不如简单粗暴的方式来得效果好，虽然这个方法并不适合我（因为我的服务端并不固定端口号），但是思路也是值得学习吧～</p><h2 id="参考了deepin的UI设计"><a href="#参考了deepin的UI设计" class="headerlink" title="参考了deepin的UI设计"></a>参考了deepin的UI设计</h2><p>最后感谢deepin的设计和资源。<br>本人资深伪全栈，从需求设计到前后端开发，再到项目发布部署运维，多多少少也都能做个像那么回事，唯独美术水平一直不忍直视。所以本工具在很多地方借鉴参考了deepin的UI设计，包括不限于设计指南(<a href="https://docs.deepin.org/info/%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/DTK/%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1/%E6%A6%82%E8%A6%81">UI视觉规范、设计基础知识</a>)，主题配色，组件样式，甚至app的应用图标也是直接拿系统监视器的图标来用的，可以说虽然这是个通用为目的的工具，但是一切还是优先以deepin为主，希望大家喜欢。</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> flutter </tag>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 flutter 中利用 source_gen 实现条件编译（下）</title>
      <link href="/2023/06/20/conditional-compilation-using-source-gen-in-flutter-3/"/>
      <url>/2023/06/20/conditional-compilation-using-source-gen-in-flutter-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在前篇 <a href="2022/06/19/conditional-compilation-using-source-gen-in-flutter-2/"> 在 flutter 中利用 source_gen 实现条件编译（中）</a> 中，我们利用 source_gen 实现了一套基础的条件编译流程。</p></blockquote><p>但是目前这套方案还有几个实用性问题：</p><ol><li>条件的表达力太弱，缺乏平台类型的组合和取反操作，一旦需要处理的平台类型超过两个就会很难处理 <figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">例如，如果有三个平台类型[android、ios、desktop]，那么代码需要写成下面的样子：</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.desktop)</span><br><span class="line"><span class="built_in">String</span> platform = <span class="string">'Desktop'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.android)</span><br><span class="line"><span class="built_in">String</span> platform = <span class="string">'Mobile'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">即使 ios 和 android 的代码完全相同，也必须再写一遍</span></span></span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.ios)</span><br><span class="line"><span class="built_in">String</span> platform = <span class="string">'Mobile'</span>;</span><br></pre></td></tr></tbody></table></figure></li><li>生成的代码存在格式丢失情况，尤其是尾随逗号(trailing commas)丢失导致的格式化效果变差(参考：<a href="https://flutter.cn/docs/tools/formatting#using-trailing-commas">代码格式化:末尾处添加逗号</a>)，以及在个别情况下会出现代码替换出错的问题</li><li>缺少一个统一的入口和路径，可以用于为指定平台生成代码时执行特定的操作</li><li>当修改已有工程或新增代码时，错误地引用了原始的源文件而不是生成的<code>.p.dart</code>文件时，缺少判断和警告信息，从而会导致难以发现的隐蔽bug</li></ol><p>针对这些问题，我们进一步对前面的方案进行一些修改和增强。</p><h1 id="增强条件的表达力"><a href="#增强条件的表达力" class="headerlink" title="增强条件的表达力"></a>增强条件的表达力</h1><p>这个问题是因为，在原本注解的函数签名</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PlatformSpec({</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.platformType,</span><br><span class="line">  <span class="keyword">this</span>.renameTo,</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>中，只有一个枚举值用于控制该代码块的“所属”，所以只能表达它“是什么”的语义。<br>那么为了增加表达能力，常规能想到的修改方式有如下几种：</p><ol><li><p>使用表达式<br>这种方式是将传参的类型改为字符串，传入支持的表达式，这种方式我在 <a href="http://localhost:4000/2022/04/17/conditional-compilation-using-source-gen-in-flutter-1/#Flutter-%E5%B7%A5%E7%A8%8B%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC-FlutterX">Flutter 工程条件编译打包脚本 - FlutterX</a> 中使用过。<br>但是这种方式虽然可以实现非常复杂且灵活的条件语句表达，但缺点是条件语句编辑时缺乏IDE提示的支持，会有一定出错的概率。而且由于dart不支持eval，替代方案则是使用 Isolate.spawnUri 代替或者使用类似 <a href="https://pub-web.flutter-io.cn/packages/dart_eval">dart_eval</a>、<a href="https://pub-web.flutter-io.cn/packages/expressions">expressions</a> 这样的库，但是它们使用起来也有各自的问题和成本。</p></li><li><p>使用数组允许传入多个平台类型<br>这种方式是将传参的类型改为数组，即<code>List&lt;PlatformType&gt;</code>，这样书写时就可以一次性指定多个平台类型。<br>这里有个库就是用了这种办法：<a href="https://pub-web.flutter-io.cn/packages/super_annotations#generation-targets">super_annotations</a>。<br>但是个人觉得这样不是很优雅，因为在只需要指定一个平台类型的时候也必须写成 <code>@PlatformSpec(platformType: [PlatformType.desktop])</code>，显得不够简洁。</p></li><li><p>使用静态方法作为参数传递<br>先定义类型为 <code>typedef TypeBuilder = List&lt;PlatformType&gt; Function();</code>的静态方法，然后通过注解的参数指定，运行 build_runner 时通过反射执行函数，从而可以得到该注解匹配的平台类型的列表。这种方法的好处是注解本身看上去比较整洁，定义出的静态方法可以复用，而且由于可以写逻辑，所以可以比较方便地实现“除了xxx以外的所有平台类型”的效果。缺点还是过于繁琐，方法的定义和注解的使用分离时可能不是那么直观。</p></li></ol><p>最终，参考借鉴了<a href="http://localhost:4000/2020/11/11/learn-about-digitwise-operation/#Android-%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E7%94%A8%E6%B3%95">一段位运算代码的理解记录 - Android 中常见的用法</a> 这种思路，用标记位的方式传入int类型的参数来实现上述需求，具体实现如下：</p><h2 id="1-增加-PlatformType-的方法"><a href="#1-增加-PlatformType-的方法" class="headerlink" title="1. 增加 PlatformType 的方法"></a>1. 增加 PlatformType 的方法</h2><p>在<code>platform_code_options.yaml</code>中增加类型：</p><ul><li>基本平台类型<br>在<code>platform_types</code>节点下以数组形式声明所有基本平台类型，形如：<figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">platform_types:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">android</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ios</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">desktop</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">web</span></span><br></pre></td></tr></tbody></table></figure></li><li>组合平台类型<br>在<code>union_types</code>节点下以字典形式声明组合平台类型，形如：<figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">union_types:</span></span><br><span class="line">  <span class="attr">mobile:</span> [<span class="string">android</span>, <span class="string">ios</span>]</span><br><span class="line">  <span class="attr">native:</span> [<span class="string">mobile</span>, <span class="string">desktop</span>]  <span class="comment"># 注意，由于上面先定义了mobile类型，所以这里才可以使用</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="2-生成平台类型的定义文件"><a href="#2-生成平台类型的定义文件" class="headerlink" title="2. 生成平台类型的定义文件"></a>2. 生成平台类型的定义文件</h2><p>运行 <code>dart run build_runner build</code>，将根据上面的配置生成 <code>platform_code_builder/lib/platform_type.dart</code>。以上面的配置为例，生成的代码如下：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlatformType</span> </span>{</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> android = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> ios = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> desktop = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> web = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> mobile = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> native = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">int</span> fromName(<span class="built_in">String</span> name) =&gt; {</span><br><span class="line">        <span class="string">'android'</span>: android,</span><br><span class="line">        <span class="string">'ios'</span>: ios,</span><br><span class="line">        <span class="string">'desktop'</span>: desktop,</span><br><span class="line">        <span class="string">'web'</span>: web,</span><br><span class="line">        <span class="string">'mobile'</span>: mobile,</span><br><span class="line">        <span class="string">'native'</span>: native</span><br><span class="line">      }[name]!;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段代码中，<code>android</code>作为第一个平台类型，其值为<code>1</code>，实际上是<code>1&lt;&lt;0</code>的结果；以此类推，<code>ios</code>和<code>desktop</code>的值实际上是<code>1&lt;&lt;1</code>和<code>1&lt;&lt;2</code>，所以他们的二进制形式分别是<code>0001</code>、<code>0010</code>和<code>0100</code>。<code>mobile</code>类型是<code>android</code>和<code>ios</code>的组合，所以它的二进制是<code>0011</code>，十进制为<code>3</code>。</p><blockquote><p>P.S. 需要注意的是，每次修改<code>platform_code_options.yaml</code>后执行 <code>dart run build_runner build</code>，会重新生成<code>platform_code_builder/lib/platform_type.dart</code>文件，再次执行<code>dart run build_runner build</code>才会为项目生成新的<code>*.p.dart</code>平台代码。如果是使用<code>dart run build_runner watch</code>的方式实时监听项目的变化生成代码，则需要退出并重新watch，否则修改的平台类型不会生效。<br><img src="/2023/06/20/conditional-compilation-using-source-gen-in-flutter-3/warn1.webp" alt="warn1"> </p></blockquote><blockquote><p>另外，由于使用的是一个<code>int</code>类型的值存储标记位，所以最多只允许64种不同的基本平台类型，因为build_runner运行的native环境中，可以假定<code>int</code>类型就是64位的（参考<a href="https://dart.dev/guides/language/numbers">Dart 中的数字</a>）。这在绝大多数情况下应该都是够用的，如果确实存在需要更大范围的场景，则需要相关的逻辑。</p></blockquote><h2 id="3-使用注解"><a href="#3-使用注解" class="headerlink" title="3. 使用注解"></a>3. 使用注解</h2><p>在生成 <code>platform_code_builder/lib/platform_type.dart</code>后，可以用如下方式使用注解标记代码块：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">直接使用定义好的组合平台类型</span></span></span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.mobile)</span><br><span class="line"><span class="keyword">const</span> someConstant = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">或者在代码中直接使用 '|' 组合已经定义的类型</span></span></span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.android | PlatformType.ios)</span><br><span class="line"><span class="keyword">const</span> someConstant = <span class="number">2.0</span>;</span><br></pre></td></tr></tbody></table></figure><p>而对于<code>除了...以外的所有平台</code>这样的场景，我在注解的签名中加入了一个<code>not</code>的命名参数(借鉴了rust的cfg: <a href="https://rustwiki.org/zh-CN/rust-by-example/attribute/cfg.html">cfg - 通过例子学 Rust 中文版</a>)，其值默认为<code>false</code>。当将其值设为<code>true</code>时即表示标记的代码将在<code>除了...以外的所有平台</code>保留。<br>所以现在的注解签名为：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PlatformSpec({</span><br><span class="line">  <span class="built_in">int</span> platformType,</span><br><span class="line">  <span class="built_in">bool</span> not = <span class="keyword">false</span>,</span><br><span class="line">  <span class="built_in">String?</span> renameTo,</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="4-为指定的平台类型生成项目代码"><a href="#4-为指定的平台类型生成项目代码" class="headerlink" title="4. 为指定的平台类型生成项目代码"></a>4. 为指定的平台类型生成项目代码</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ol><li><p>修改<code>platform_code_options.yaml</code>，修改最后一行<code>current_platform: </code>的值：</p> <figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">current_platform:</span> <span class="string">android</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>运行代码生成：</p> <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dart run build_runner build</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>直接在代码生成命令中加入options覆盖参数：</p><ul><li><p>ios:</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dart run build_runner build --define "platform_code_builder:platform_builder=platform=ios"</span><br></pre></td></tr></tbody></table></figure></li><li><p>web:</p>  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dart run build_runner build --define "platform_code_builder:platform_builder=platform=web"</span><br></pre></td></tr></tbody></table></figure></li></ul><blockquote><p>注意：代码生成时选择的 platform 必须是 <code>platform_code_options.yaml</code> 中 <code>platform_types</code> 定义的“基本平台类型”</p></blockquote><h1 id="解决生成的代码格式丢失问题"><a href="#解决生成的代码格式丢失问题" class="headerlink" title="解决生成的代码格式丢失问题"></a>解决生成的代码格式丢失问题</h1><p>造成这个问题的原因是原本的代码替换逻辑是(<a href="https://github.com/debuggerx01/flutter_platform_code_demo/blob/main/lib/builder/platform_generator.dart">flutter_platform_code_demo/lib/builder/platform_generator.dart</a>)：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">generateForAnnotatedElement(<span class="built_in">Element</span> element, ConstantReader annotation, BuildStep buildStep) {</span><br><span class="line"><span class="comment">/// <span class="language-markdown">利用 [package:analyzer/dart/analysis/utilities.dart] 里的parseString方法解析源码</span></span></span><br><span class="line"><span class="keyword">var</span> compilationUnit = parseString(content: (element.source <span class="keyword">as</span> FileSource).file.readAsStringSync()).unit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">自定义 Visitor 遍历解析后的 AST</span></span></span><br><span class="line"><span class="keyword">var</span> _visitor = _Visitor(platformType);</span><br><span class="line">compilationUnit.visitChildren(_visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">从解析后的 AST 反向得到源码，再循环遍历替换得到新的源码</span></span></span><br><span class="line"><span class="keyword">var</span> res = compilationUnit.toSource();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> ele <span class="keyword">in</span> _visitor._removes) {</span><br><span class="line">res = res.replaceFirst(ele, <span class="string">''</span>);</span><br><span class="line">}</span><br><span class="line">_visitor._renames.forEach((from, to) {</span><br><span class="line">res = res.replaceFirst(from, to);</span><br><span class="line">});</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个过程中，<code>parseString</code>方法在解析过程中就会移除一些对语法没有影响的内容，包括所有的尾随逗号和换行符。而且由于遍历AST时是用每个<code>ASTNode</code>的<code>toString()</code>方法拿到对应源码，也是移除了尾随逗号和换行符的文本，所以后续替换时如果拿未经处理的源码内容来替换，就会出现内容匹配不上导致替换失败的问题。</p><p>在尝试了各种方法无果后，偶然看到这个技巧:<a href="https://github.com/dart-lang/sdk/issues/34539#issuecomment-423589192">https://github.com/dart-lang/sdk/issues/34539#issuecomment-423589192</a><br>原来可以用需要修改的节点或者元素的token里的offset和end属性，得到该<code>ASTNode</code>在源码中的开始和结束位置，然后倒序排序后循环对源码做replaceRange 这样就不会出问题了，具体实现的代码是：<a href="https://github.com/debuggerx01/platform_code_builder_starter/blob/15011c009d1a7afbea48d260ac70a10d79264890/platform_code_builder/lib/src/platform_generator.dart#L71-L92">https://github.com/debuggerx01/platform_code_builder_starter/blob/15011c009d1a7afbea48d260ac70a10d79264890/platform_code_builder/lib/src/platform_generator.dart#L71-L92</a></p><h1 id="增加统一的入口用于为指定平台生成代码时执行特定的操作"><a href="#增加统一的入口用于为指定平台生成代码时执行特定的操作" class="headerlink" title="增加统一的入口用于为指定平台生成代码时执行特定的操作"></a>增加统一的入口用于为指定平台生成代码时执行特定的操作</h1><p>除了针对代码的替换，在实际项目中针对不同平台，往往还需要做一些其他修改，比如：</p><ul><li>针对不同平台，选择使用不同的assets资源</li><li>根据不同的渠道或配置，修改原生项目的包名</li><li>根据不同平台，执行特定脚本或下载特定内容到项目中</li></ul><p>这里我指定了入口文件为项目根目录下的<code>bin/handle_platform.dart</code>文件，基础代码如下：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:platform_code_builder/platform_type.dart'</span>;</span><br><span class="line"></span><br><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) {</span><br><span class="line">  <span class="keyword">var</span> platformMaskCode = PlatformType.fromName(args.first);</span><br><span class="line">  <span class="comment">/// <span class="language-markdown">在这里判断platformMaskCode执行所需操作</span></span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>可以参考 <a href="https://github.com/debuggerx01/platform_code_builder_starter/blob/main/bin/handle_platform.dart">platform_code_builder_starter/bin/handle_platform.dart</a> 这个例子，执行的操作是为不同平台设置对应的 logo 图片资源。</p></blockquote><h1 id="错误引用了原始的源文件而不是生成的-p-dart-文件时给出错误提示"><a href="#错误引用了原始的源文件而不是生成的-p-dart-文件时给出错误提示" class="headerlink" title="错误引用了原始的源文件而不是生成的[*.p.dart]文件时给出错误提示"></a>错误引用了原始的源文件而不是生成的[*.p.dart]文件时给出错误提示</h1><p>在使用过程中，尤其是在对已有项目进行改造时，很有可能出现已经将某个源文件用注解改造完成，其他源文件引用的却还是原始的文件而不是生成的<code>*.p.dart</code>文件，从而导致难以发现的隐蔽bug。</p><p>这里我使用了 <a href="https://pub-web.flutter-io.cn/packages/lakos">lakos</a> 这个非常 WonderFull 的库，它可以分析Flutter/Dart项目中源码的依赖关系：<br><img src="https://user-images.githubusercontent.com/42989765/94976346-8c142480-04c9-11eb-920f-0d3412f1f042.png" alt="lakos" title="lakos"></p><p>将项目的<code>lib/</code>目录传入<code>lakos包</code>的<code>buildModel</code>方法后，即可得到项目源码之间关系的有向图模型，其中的<a href="https://pub-web.flutter-io.cn/documentation/lakos/latest/lakos/Edge-class.html">edges</a>属性就是导入/导出依赖关系表示为有向图形式的所有的边。所以当<code>source_gen</code>执行到注解标记的源码文件，该文件出现在了edges的任意一条边中时，即代表该源码出现的错误的引用问题，此时通过<code>sdterr</code>向控制台输出错误提醒信息：<br><img src="/2023/06/20/conditional-compilation-using-source-gen-in-flutter-3/warn2.webp" alt="warn2"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>经过了上面的这些改进，最终的结果就得到了<a href="https://github.com/debuggerx01/platform_code_builder_starter">platform_code_builder_starter</a>这个项目。</p><h2 id="DEMO使用方法"><a href="#DEMO使用方法" class="headerlink" title="DEMO使用方法"></a>DEMO使用方法</h2><ol><li><p>clone本仓库</p></li><li><p>下载依赖<code>dart pub get</code></p></li><li><p>运行代码生成：</p> <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dart run build_runner build</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看<code>lib</code>目录下生成的<code>*.p.dart</code>代码，或直接运行项目查看效果</p><blockquote><p>tips：可以用 <code>flutter create ./</code> 命令创建支持各个平台运行的模板代码</p></blockquote></li></ol><h2 id="向项目中集成的步骤"><a href="#向项目中集成的步骤" class="headerlink" title="向项目中集成的步骤"></a>向项目中集成的步骤</h2><ol><li>clone本仓库</li><li>复制<code>platform_code_builder</code>目录至目标项目的根目录</li><li>编辑目标项目的<code>pubspec.yaml</code>，添加如下内容 <figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="string">……</span></span><br><span class="line">  <span class="attr">platform_code_builder:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">platform_code_builder</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="string">……</span></span><br><span class="line">  <span class="attr">build_runner:</span> <span class="string">^&lt;latest_version&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li>在项目根目录创建<code>platform_code_options.yaml</code>，根据项目需要定义所有平台类型</li><li>定义完成后，在项目根目录依次如下命令： <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dart pub get</span><br><span class="line">dart run build_runner build</span><br></pre></td></tr></tbody></table></figure>完成后请检查生成的<code>platform_code_builder/lib/platform_type.dart</code>文件内容无误</li><li>在项目源码中使用注解标记不同平台下的代码，参考<a href="#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E">注解使用说明</a></li><li>(可选)，创建<code>bin/handle_platform.dart</code>，用于为指定平台执行特殊操作，基础代码如下： <figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:platform_code_builder/platform_type.dart'</span>;</span><br><span class="line"></span><br><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) {</span><br><span class="line">  <span class="keyword">var</span> platformMaskCode = PlatformType.fromName(args.first);</span><br><span class="line">  <span class="comment">/// <span class="language-markdown">在这里判断platformMaskCode执行所需操作</span></span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li>运行<code> run build_runner build</code>或<code>dart run build_runner watch</code>，并将项目中相关的import源码路径更改为生成的<code>*.p.dart</code></li><li>运行Flutter/Dart项目，检查结果是否符合预期</li></ol><blockquote><p>本方案可能还存在一些BUG，以及改进的空间，欢迎提issue讨论或者pr，谢谢~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> 编程 </tag>
            
            <tag> flutter </tag>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 flutter 中利用 source_gen 实现条件编译（中）</title>
      <link href="/2022/06/19/conditional-compilation-using-source-gen-in-flutter-2/"/>
      <url>/2022/06/19/conditional-compilation-using-source-gen-in-flutter-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在前篇 <a href="/2022/04/17/conditional-compilation-using-source-gen-in-flutter-1">在 flutter 中利用 source_gen 实现条件编译（上）</a> 中，主要介绍了在 Flutter 跨平台开发过程中“条件编译”特性的需求及现状。本篇将介绍一种利用 Flutter/Dart 官方的代码生成库 —— <a href="https://pub.flutter-io.cn/packages/source_gen">source_gen</a> 实现条件编译的方法。</p></blockquote><h1 id="从-json-serializable-认识-source-gen"><a href="#从-json-serializable-认识-source-gen" class="headerlink" title="从 json_serializable 认识 source_gen"></a>从 json_serializable 认识 source_gen</h1><blockquote><p>如果是按部就班地学习 flutter，那么应该是在 <a href="https://flutter.cn/docs/development/data-and-backend/json#use-code-generation-for-medium-to-large-projects">JSON 和序列化数据</a> 这篇教程里第一次认识 flutter/dart 的 <code>source_gen(代码生成)</code> 技术。</p></blockquote><h2 id="json-serializable-做了什么"><a href="#json-serializable-做了什么" class="headerlink" title="json_serializable 做了什么"></a>json_serializable 做了什么</h2><p>在网络应用开发中，经常需要做 JSON 对象的序列化和反序列化。如果直接使用 <code>dart:convert</code> 包将json字符串反序列化，得到的将是一个通用的Map/List结构，然后开发时通过输入字段名字符串的方式从中取值，非常的不方便，所以在前后端已经定义好数据格式时，通过预定义实体类，json解析后将字段值映射到这个实体类的属性上，就可以在开发时获得类型提醒和约束，从而极大提高开发效率，并降低出错的概率。而<a href="https://pub.flutter-io.cn/packages/json_serializable">json_serializable</a>就是flutter/dart官方推荐的用于生成实体类的工具：</p><blockquote><p>Automatically generate code for converting to and from JSON by annotating Dart classes.</p></blockquote><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p>向项目的 <code>pubspec.yaml</code> 添加依赖</p> <figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="comment"># Your other regular dependencies here</span></span><br><span class="line">  <span class="attr">json_annotation:</span> <span class="string">&lt;latest_version&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="comment"># Your other dev_dependencies here</span></span><br><span class="line">  <span class="attr">build_runner:</span> <span class="string">&lt;latest_version&gt;</span></span><br><span class="line">  <span class="attr">json_serializable:</span> <span class="string">&lt;latest_version&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>以 json_serializable 的方式创建模型类，例如：</p> <figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:json_annotation/json_annotation.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> <span class="string">'user.g.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">  User(<span class="keyword">this</span>.name, <span class="keyword">this</span>.email);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> email;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> User.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; _$UserFromJson(json);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$UserToJson(<span class="keyword">this</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>运行命令生成代码</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub run build_runner build --delete-conflicting-outputs</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>通过分析上面的步骤以及json_serializable的源码我们可以得知：</p><ol><li>json_serializable的代码生成依赖的是名为<a href="https://pub.flutter-io.cn/packages/build_runner">build_runner</a>的开发库</li><li>通过输入的代码以及注解添加的信息（或者说元数据metadata），经过编写的builder处理即可生成所需的代码</li><li>使用<a href="https://pub.flutter-io.cn/packages/source_gen">source_gen</a>可以简化builder的创建</li></ol><p>所以现在，我们可以确定可以通过以下思路来利用代码生成来实现条件编译：</p><ol><li>先将所有平台所需的代码写进源代码，并根据代码运行的平台（编译条件）添加注解</li><li>基于source_gen编写 <code>Generator</code> 和 <code>Builder</code> ，利用build_runner为指定平台生成新的dart源文件</li><li>在其他源文件中import新生成的dart源文件，从而实现条件编译</li><li>之后想要为其他平台编译代码时，只要用新的平台变量再次运行build_runner即可。</li></ol><h1 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h1><p>基于上述思路，实现了如下demo项目：<br><a href="https://github.com/debuggerx01/flutter_platform_code_demo">https://github.com/debuggerx01/flutter_platform_code_demo</a></p><p>主要实现参考了：<a href="https://github.com/dart-lang/source_gen/tree/master/example_usage">https://github.com/dart-lang/source_gen/tree/master/example_usage</a></p><h2 id="源码说明"><a href="#源码说明" class="headerlink" title="源码说明"></a>源码说明</h2><ol><li>先定义注解 <code>lib/builder/platform_annotation.dart</code>： <figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">本DEMO假设只有两个平台（编译条件），即移动端和桌面端</span></span></span><br><span class="line"><span class="keyword">enum</span> PlatformType {</span><br><span class="line">  mobile,</span><br><span class="line">  desktop,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">该注解用于标记一个源文件需要被处理，使用时需要放在想要处理的源码的第一行</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlatformDetector</span> </span>{</span><br><span class="line">  <span class="keyword">const</span> PlatformDetector();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">用于标记某个语法元素需要在什么平台上保留，并可以指定保留时其名称的重命名</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlatformSpec</span> </span>{</span><br><span class="line">  <span class="keyword">final</span> PlatformType platformType;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> renameTo;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> PlatformSpec({</span><br><span class="line"><span class="keyword">required</span> <span class="keyword">this</span>.platformType,</span><br><span class="line"><span class="keyword">this</span>.renameTo,</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p>编写 <code>Builder</code>，也就是代码处理逻辑的入口（<code>lib/builder/platform_builder.dart</code>）：</p> <figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:build/build.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:source_gen/source_gen.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'platform_annotation.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'platform_generator.dart'</span>;</span><br><span class="line"></span><br><span class="line">Builder platformBuilder(BuilderOptions options) =&gt; LibraryBuilder(</span><br><span class="line">PlatformGenerator(</span><br><span class="line">  <span class="comment">/// <span class="language-markdown">这里读取指定的平台是什么，可以通过编辑 build.yaml，或者执行 build<span class="emphasis">_runner build命令时通过参数传入</span></span></span></span><br><span class="line">  PlatformType.values.byName(options.config[<span class="string">'platform'</span>]),</span><br><span class="line">),</span><br><span class="line"><span class="comment">/// <span class="language-markdown"><span class="emphasis">这里指定了生成的代码的后缀名</span></span></span></span><br><span class="line">generatedExtension: <span class="string">'.p.dart'</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写 <code>Generator</code>，也就是代码处理的逻辑（<code>lib/builder/platform_generator.dart</code>）：<br><a href="https://github.com/debuggerx01/flutter_platform_code_demo/blob/main/lib/builder/platform_generator.dart">https://github.com/debuggerx01/flutter_platform_code_demo/blob/main/lib/builder/platform_generator.dart</a></p><p> 处理逻辑为：</p><ol><li>对于每一个被 <code>PlatformDetector</code> 注解标记的源文件，读取其源码，然后递归遍历所有语法元素</li><li>如果该语法元素被 <code>PlatformSpec</code> 注解标记，判断其 <code>platformType</code> 是否和当前指定的平台匹配<ol><li>如果匹配，则将该语法元素重命名（如果需要）后存入 <code>_renames</code> 集合，其中key是原始的源码字符串，value是重命名后的源码字符串</li><li>如果不匹配，则将该语法元素存入 <code>_removes</code> 集合</li></ol></li><li>遍历完源码后，先利用 <code>_removes</code> 集合，将源码中不符合指定平台的代码元素移除</li><li>再利用 <code>_renames</code> 集合，将源码中需要保留和重命名的代码元素进行替换</li></ol></li><li><p>根据文档，在项目根目录添加<code>build.yaml</code>用于build_runner的执行：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">builders:</span></span><br><span class="line">  <span class="attr">platform_builder:</span></span><br><span class="line">    <span class="attr">import:</span> <span class="string">'lib/builder/platform_builder.dart'</span></span><br><span class="line">    <span class="attr">builder_factories:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">platformBuilder</span></span><br><span class="line">    <span class="attr">build_extensions:</span> { <span class="string">'.dart'</span><span class="string">:</span> [ <span class="string">'.p.dart'</span> ] }</span><br><span class="line">    <span class="attr">auto_apply:</span> <span class="string">root_package</span></span><br><span class="line">    <span class="attr">build_to:</span> <span class="string">source</span></span><br><span class="line">    <span class="attr">defaults:</span></span><br><span class="line">      <span class="attr">generate_for:</span></span><br><span class="line">        <span class="attr">include:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">lib/**</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">platform:</span> <span class="string">desktop</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ol><li>修改<code>build.yaml</code>，修改最后一行<code>platform: </code>的值：<figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">options:</span></span><br><span class="line">  <span class="attr">platform:</span> <span class="string">desktop</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>当前可选<code>mobile</code>和<code>desktop</code></p></blockquote></li><li>运行代码生成：<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub run build_runner build --delete-conflicting-outputs</span><br></pre></td></tr></tbody></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3>直接在代码生成命令中加入options覆盖参数：</li></ol><ul><li>desktop:<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub run build_runner build --delete-conflicting-outputs --define "flutter_platform_code_demo:platform_builder=platform=desktop"</span><br></pre></td></tr></tbody></table></figure></li><li>mobile:<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub run build_runner build --delete-conflicting-outputs --define "flutter_platform_code_demo:platform_builder=platform=mobile"</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>源代码<code>test.dart</code>：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PlatformDetector</span>()</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_platform_code_demo/builder/platform_generator.dart'</span>;</span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.mobile)</span><br><span class="line"><span class="keyword">import</span> <span class="string">'messages/mobile.dart'</span>;</span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.desktop, renameTo: <span class="string">'messages/desktop.dart'</span>)</span><br><span class="line"><span class="comment">// ignore: duplicate_import</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'messages/mobile.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'builder/platform_annotation.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.mobile)</span><br><span class="line"><span class="keyword">const</span> _title = <span class="string">'Flutter Demo Mobile'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.desktop, renameTo: <span class="string">'_title'</span>)</span><br><span class="line"><span class="comment">// ignore: unused_element</span></span><br><span class="line"><span class="keyword">const</span> _titleDesktop = <span class="string">'Flutter Demo Desktop'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{</span><br><span class="line">  <span class="meta">@PlatformSpec</span>(platformType: PlatformType.mobile)</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PlatformSpec</span>(platformType: PlatformType.desktop, renameTo: <span class="string">'_counter'</span>)</span><br><span class="line">  <span class="comment">// ignore: unused_field, prefer_final_fields</span></span><br><span class="line">  <span class="built_in">int</span> _counterDesktop = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PlatformSpec</span>(platformType: PlatformType.mobile, renameTo: <span class="string">'_incrementCounter'</span>)</span><br><span class="line">  <span class="comment">// ignore: unused_element</span></span><br><span class="line">  <span class="keyword">void</span> _incrementCounterMobile() {</span><br><span class="line">    _counter++;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PlatformSpec</span>(platformType: PlatformType.desktop)</span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() {</span><br><span class="line">    _counter *= <span class="number">2</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.mobile)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>{</span><br><span class="line">  <span class="keyword">final</span> name = <span class="string">'mobile'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.desktop, renameTo: <span class="string">'B'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>{</span><br><span class="line">  <span class="keyword">final</span> name = <span class="string">'desktop'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在指定<code>PlatformType</code>为<code>mobile</code>时将生成如下<code>test.p.dart</code>代码：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GENERATED CODE - DO NOT MODIFY BY HAND</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **************************************************************************</span></span><br><span class="line"><span class="comment">// PlatformGenerator</span></span><br><span class="line"><span class="comment">// **************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PlatformDetector</span>()</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_platform_code_demo/builder/platform_generator.dart'</span>;</span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.mobile)</span><br><span class="line"><span class="keyword">import</span> <span class="string">'messages/mobile.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'builder/platform_annotation.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _title = <span class="string">'Flutter Demo Mobile'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{</span><br><span class="line">  <span class="meta">@PlatformSpec</span>(platformType: PlatformType.mobile)</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line">  <span class="meta">@PlatformSpec</span>(</span><br><span class="line">      platformType: PlatformType.mobile, renameTo: <span class="string">'_incrementCounter'</span>)</span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() {</span><br><span class="line">    _counter++;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.mobile)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>{</span><br><span class="line">  <span class="keyword">final</span> name = <span class="string">'mobile'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在指定<code>PlatformType</code>为<code>desktop</code>时将生成如下<code>test.p.dart</code>代码：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GENERATED CODE - DO NOT MODIFY BY HAND</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **************************************************************************</span></span><br><span class="line"><span class="comment">// PlatformGenerator</span></span><br><span class="line"><span class="comment">// **************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PlatformDetector</span>()</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_platform_code_demo/builder/platform_generator.dart'</span>;</span><br><span class="line"><span class="meta">@PlatformSpec</span>(</span><br><span class="line">    platformType: PlatformType.desktop, renameTo: <span class="string">'messages/desktop.dart'</span>)</span><br><span class="line"><span class="keyword">import</span> <span class="string">'messages/desktop.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'builder/platform_annotation.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _title = <span class="string">'Flutter Demo Desktop'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{</span><br><span class="line">  <span class="meta">@PlatformSpec</span>(platformType: PlatformType.desktop, renameTo: <span class="string">'_counter'</span>)</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">9</span>;</span><br><span class="line">  <span class="meta">@PlatformSpec</span>(platformType: PlatformType.desktop)</span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() {</span><br><span class="line">    _counter *= <span class="number">2</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@PlatformSpec</span>(platformType: PlatformType.desktop, renameTo: <span class="string">'B'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>{</span><br><span class="line">  <span class="keyword">final</span> name = <span class="string">'desktop'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="当前支持替换的语法元素"><a href="#当前支持替换的语法元素" class="headerlink" title="当前支持替换的语法元素"></a>当前支持替换的语法元素</h3><ul><li>类定义（ClassDeclaration）</li><li>变量定义（VariableDeclaration）</li><li>顶层变量定义（TopLevelVariableDeclaration）</li><li>字段定义（FieldDeclaration）</li><li>import指令（ImportDirective）</li><li>函数定义（FunctionDeclaration）</li><li>方法定义（MethodDeclaration）</li></ul><blockquote><p>更多语法支持可以通过在 <code>lib/builder/platform_generator.dart</code> 中增加 <code>visitXXX</code> 系列的方法覆写来实现。</p></blockquote><h3 id="调试开发的方法"><a href="#调试开发的方法" class="headerlink" title="调试开发的方法"></a>调试开发的方法</h3><p>参考 <a href="https://github.com/dart-lang/build/tree/master/build_runner#legacy-usage">https://github.com/dart-lang/build/tree/master/build_runner#legacy-usage</a> ，当想要自定义代码生成逻辑时，可以在IDE中运行 <code>.dart_tool/build/entrypoint/build.dart</code> 来进行调试，该文件会在项目安装依赖后生成。<br>以 Android Studio 中的配置为例：<br><img src="/2022/06/19/conditional-compilation-using-source-gen-in-flutter-2/debug.webp" alt="debug.webp"></p><p>然后即可在 <code>lib/builder/platform_generator.dart</code> 的 <code>visitXXX</code> 系列方法上打断点进行调试：<br><img src="/2022/06/19/conditional-compilation-using-source-gen-in-flutter-2/break_point.webp" alt="break_point.webp"></p><blockquote><p>以上面的方式已经可以满足简单的条件编译需求，这种实现方式与前文中提到基于操作注释的方式有相似之处，优点是出错的概率相对比较低，编写过程中可以获得更多的IDE提示支持，阅读源码时也可以正常获得代码高亮。在下一篇文章中，将继续介绍如何应对一些更复杂的情况。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> 编程 </tag>
            
            <tag> flutter </tag>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Gitea+Drone的CI系统</title>
      <link href="/2022/05/03/make-a-ci-workflow-with-gitea-and-drone/"/>
      <url>/2022/05/03/make-a-ci-workflow-with-gitea-and-drone/</url>
      
        <content type="html"><![CDATA[<p>关于CI系统(Continuous Integration)，我已经有过了一些学习和实践了：</p><p><a href="https://www.debuggerx.com/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/">GitLab CI/CD (一) ：自动打包部署Flutter项目 | DebuggerX’s Blog</a><br><a href="https://www.debuggerx.com/2020/12/26/modern-development-workflow-gitlab-ci-cd-2/">GitLab CI/CD (二) ：自动编译部署Web项目 | DebuggerX’s Blog</a><br><a href="https://www.debuggerx.com/2021/08/17/Using-github-actions-to-build-kernel-deb-packages/">利用 GitHub Actions 自动构建 Linux 内核为 deb 包 | DebuggerX’s Blog</a></p><p>那么为什么还要再折腾这样一套CI方案呢？</p><ul><li>GitLab的CI/CD：很好，很强大，功能非常完善，非常建议中小团队作为自建代码管理部署平台使用，唯一的问题就是太重了，需要一台性能配置颇高(至少使用2 vCPU和4 GiB内存)的独立服务器</li><li>GitHub Actions：也很好，使用非常方便，非常建议个人项目使用，但是同样缺陷明显，虽然可以部署私有runner，但是由于GitHub本身无法self-hosted，所以使用体验很受网络质量影响，并且由于各种安全限制，私有仓库使用体验不是那么的方便</li></ul><p>所以基于如上原因，我是在家里一台24小时运行的小服务器上部署了一个 <a href="https://gitea.io/zh-cn/">Gitea</a> 服务，并将一部分个人项目托管在上面。最近在做的一个玩具项目里需要部署api接口供app使用，测试阶段接口也打算通过CI实时部署在内网的服务器上，于是决定在原有的Gitea上搭配部署 <a href="https://www.drone.io/">Drone</a></p><h1 id="关于Drone"><a href="#关于Drone" class="headerlink" title="关于Drone"></a>关于Drone</h1><ul><li>官网：<a href="https://www.drone.io/">https://www.drone.io/</a></li><li>文档：<a href="https://docs.drone.io/server/provider/gitea/">https://docs.drone.io/server/provider/gitea/</a></li><li>源码：<a href="https://github.com/drone/drone-go">https://github.com/drone/drone-go</a></li></ul><p>由于Drone和Gitea一样，都是使用go语言开发的，所以都可以支持在许多不同的平台下运行，运行时的资源开销也很小，具有很高的灵活性。</p><p>Drone作为一种“外挂式”CI系统，大致原理就是利用OAuth方式和Git service进行认证注册，然后利用Git service本身的web hooks作为本身的触发器，从而实现在代码被推送到服务器时能够自动触发CI运行。得益于这种通用灵活的实现方式，据文档显示，它官方支持的平台就有：</p><ul><li>GitHub \ GitHub Enterprise</li><li>Gitea \ Gogs</li><li>Gitee</li><li>GitLab</li><li>Bitbucket Cloud \ Server</li></ul><h1 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h1><p>略。。。参考文档即可，很简单……</p><h2 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h2><ul><li>确保Git service、Drone和Grone runner之间的连通性。由于我的内网环境中有自定义的域名解析记录和端口映射，所以几部分之间是使用了域名+端口的方式互联，然后由于Drone是使用docker的方式部署，而正巧那台server上的docker设置了过多无用的虚拟网卡，导致了Drone在通过域名访问我的Gitea服务器时错误得将请求发到了docker自身创建的NAT网络中，结果是怎么都访问不通，最后在执行了 <code>docker network prune</code> 命令清理了无用的docker的虚拟网卡后问题解决</li><li>我是用的<a href="https://docs.drone.io/runner/exec/overview/">Exec Runner</a>，会在运行时在所部署机器的 /tmp 目录下创建一个虚拟环境拉取代码并执行CI脚本，所以一开始，在这个过程中发生的资源拷贝，我是打算通过系统的 $HOME 变量将资源写入家目录下，结果每次运行时会发现在指定的位置找不到资源，最终发现exec runner运行时读取到的 $HOME 变量并不是宿主机真实的家目录，而是虚拟环境的家目录，CI结束后会连同整个虚拟环境被一同销毁。所以暂时只能通过如下代码绕过：  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DATA_ROOT="$HOME"</span><br><span class="line"></span><br><span class="line">if [[ "$DATA_ROOT" == /tmp/* ]]; then</span><br><span class="line">    DATA_ROOT="/root"</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h1><ul><li><p>项目CI统计界面<br><img src="/2022/05/03/make-a-ci-workflow-with-gitea-and-drone/1.webp" alt="1"></p></li><li><p>runner日志界面<br><img src="/2022/05/03/make-a-ci-workflow-with-gitea-and-drone/2.webp" alt="2"></p></li><li><p>CI运行及成功状态时Gitea中的状态显示：<br><img src="/2022/05/03/make-a-ci-workflow-with-gitea-and-drone/3.webp" alt="3"></p></li><li><p>整套系统资源开销</p><ul><li><p>Gitea（按整个虚拟机的占用计算）：约 150 MB<br><img src="/2022/05/03/make-a-ci-workflow-with-gitea-and-drone/4.webp" alt="4"></p></li><li><p>Drone (按 Docker 中占用的资源计算) ： 约 30 MB<br><img src="/2022/05/03/make-a-ci-workflow-with-gitea-and-drone/5.webp" alt="5"></p></li><li><p>Runner (按进程所占资源计算) ： 约 120 MB<br><img src="/2022/05/03/make-a-ci-workflow-with-gitea-and-drone/6.webp" alt="6"></p></li></ul></li></ul><p>所以整个系统的内存占用大致是150 + 30 + 120 = 300 MB，512MB的服务器即可保证轻量实用。相较之下 GitLab 的内存配置需求是 4G 起步，相差足有一个数量级。</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 flutter 中利用 source_gen 实现条件编译（上）</title>
      <link href="/2022/04/17/conditional-compilation-using-source-gen-in-flutter-1/"/>
      <url>/2022/04/17/conditional-compilation-using-source-gen-in-flutter-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>随着 <a href="https://flutter.cn/posts/introducing-flutter-3">Flutter 3 正式发布</a>，Flutter 的跨平台之旅迈入高潮。现在，Flutter 3 增加了对 macOS 和 Linux 应用的稳定支持，这意味着我们可以仅用一套代码库，为 6 个平台构建精美的体验。</p></blockquote><h1 id="一套代码跨平台的问题"><a href="#一套代码跨平台的问题" class="headerlink" title="一套代码跨平台的问题"></a>一套代码跨平台的问题</h1><p>迄今为止，我已经使用 flutter 开发了数个跨平台项目，有的是相对常见的 Android / iOS 双平台项目，也有横跨桌面端、移动端和 Web 端这种平台差异更大的项目。由于 flutter 项目是使用同一套代码来编写所有目标平台的界面和逻辑，所以时常会出现以下情况：</p><h2 id="不同平台下需要运行不同的代码逻辑"><a href="#不同平台下需要运行不同的代码逻辑" class="headerlink" title="不同平台下需要运行不同的代码逻辑"></a>不同平台下需要运行不同的代码逻辑</h2><p>例如，在 Android 平台上，应用左上角默认的返回键图标是【<i class="fa fa-arrow-left fa-emoji" title="arrow-left"></i>】，而在 iOS 平台上，默认的返回键图标样式是【<i class="fa fa-chevron-left fa-emoji" title="chevron-left"></i>】（参看：<a href="https://flutter.cn/docs/resources/platform-adaptations#iconography">平台行为差异和适配 - 图标</a>），为了能够使应用在不同平台上可以表现得更加符合平台的风格和习惯，往往需要判断运行平台编写分支代码</p><h3 id="一般做法"><a href="#一般做法" class="headerlink" title="一般做法"></a>一般做法</h3><p>针对上面的例子，参看 flutter sdk 中 <code>BackButton</code> 的源码 <a href="https://github.com/flutter/flutter/blob/2cde203b9c7a825cc0f0faa0a535b8314c106cba/packages/flutter/lib/src/material/back_button.dart#L31">back_button.dart#L31</a>：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BackButtonIcon</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>{</span><br><span class="line">  <span class="keyword">const</span> BackButtonIcon({ <span class="keyword">super</span>.key });</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">Returns the appropriate "back" icon for the given <span class="code">`platform`</span>.</span></span></span><br><span class="line">  <span class="keyword">static</span> IconData _getIconData(TargetPlatform platform) {</span><br><span class="line">    <span class="keyword">switch</span> (platform) {</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.android:</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.fuchsia:</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.linux:</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.windows:</span><br><span class="line">        <span class="keyword">return</span> Icons.arrow_back;</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.iOS:</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.macOS:</span><br><span class="line">        <span class="keyword">return</span> Icons.arrow_back_ios;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) =&gt; Icon(_getIconData(Theme.of(context).platform));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到这里是利用 <code>Theme.of(context).platform</code> 在 APP 运行时获得平台，然后作为 switch 的条件，为 iOS/MacOS 平台返回与其他平台不同样式的返回键图标。应该说这是一种非常简单直接的处理办法，确实可以解决大部分类似的问题。</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><h4 id="会导致编译打包后，单个平台的-APP-中会包含一些本平台并不需要的代码或资源"><a href="#会导致编译打包后，单个平台的-APP-中会包含一些本平台并不需要的代码或资源" class="headerlink" title="会导致编译打包后，单个平台的 APP 中会包含一些本平台并不需要的代码或资源"></a>会导致编译打包后，单个平台的 APP 中会包含一些本平台并不需要的代码或资源</h4><p>还是以上面的例子，flutter 开发的程序在构建打包时会进行名为 <a href="https://zhuanlan.zhihu.com/p/272567200">Tree Shaking</a> 的死代码消除优化，自动将源代码中“不可及”的代码和依赖移除，从而减小最终产出的包大小。但是，在条件分支中的代码并不属于“死代码”，编译器并不知道我们为 iOS/MacOS 以外平台的情况编写的代码在  iOS/MacOS 平台下是无用的。如果判断或分支很多，则有可能会增加最终的 APP 包大小，从而造成了浪费。</p><h4 id="代码组织形式受限"><a href="#代码组织形式受限" class="headerlink" title="代码组织形式受限"></a>代码组织形式受限</h4><p>由于总是需要用代码获取到的平台类型作为执行代码分支的依据，所以针对不同平台所编写的代码基本只能放在 <code>if-else</code>、<code>switch-case</code>和<code>condition ? exp1 : exp2</code> 这几种代码块中，针对不同平台的代码往往不得不挤在一起，不方便更选灵活地组织代码。</p><h4 id="可能造成-debug-时被无关代码干扰"><a href="#可能造成-debug-时被无关代码干扰" class="headerlink" title="可能造成 debug 时被无关代码干扰"></a>可能造成 debug 时被无关代码干扰</h4><p>由于多种平台的独有代码共存，极端情况下源代码可能会变得相当冗长，在调试代码时，即使我们只想针对某种特定的平台进行调试，却不得不在一堆与当前平台无关的代码中自行分辨有效的代码。有时看了半天，才发现追了半天的逻辑并不属于当前正在调试的平台，使人相当抑郁。</p><h2 id="不同平台下需要导入不同的-Library-Plugin"><a href="#不同平台下需要导入不同的-Library-Plugin" class="headerlink" title="不同平台下需要导入不同的 Library / Plugin"></a>不同平台下需要导入不同的 Library / Plugin</h2><p>例如，有时我们想要在 Android 平台上使用 Material 组件库，而在 iOS 平台使用 Cupertino 的组件；<br>又或者，有时在 Android 平台我们想使用原生插件 A，而在 iOS 平台，由于种种原因，想要使用原生插件 B</p><h3 id="一般做法-1"><a href="#一般做法-1" class="headerlink" title="一般做法"></a>一般做法</h3><p>针对第一个问题，有时我们可能会使用和上面一样的方法，先判断平台类型，然后在分支中使用不同的组价；另外还有一个比较流行的库：<a href="https://pub.flutter-io.cn/packages/flutter_platform_widgets">flutter_platform_widgets</a>，这个库的思路是对两种风格的组件做一次包装，提供统一的 API，这样代码中只写了一种代码，但在两种平台上会自动使用对应风格的组件。</p><p>而第二个问题，一般来说也是需要在 <code>pubspec.yaml</code> 加入所需的插件依赖，在代码中根据平台分支去分别调用。</p><h3 id="存在的问题-1"><a href="#存在的问题-1" class="headerlink" title="存在的问题"></a>存在的问题</h3><h4 id="还是会造成最终产物的资源浪费"><a href="#还是会造成最终产物的资源浪费" class="headerlink" title="还是会造成最终产物的资源浪费"></a>还是会造成最终产物的资源浪费</h4><p>原因与平台分支代码的情况类似，而且由于导入的 Library 一般都比较大，无用代码占用空间的增速会更加明显</p><h4 id="可能由于插件冲突导致-APP-打包出错"><a href="#可能由于插件冲突导致-APP-打包出错" class="headerlink" title="可能由于插件冲突导致 APP 打包出错"></a>可能由于插件冲突导致 APP 打包出错</h4><p>比如存在 A 和 B 两个插件，它们都实现了 Android 和 iOS 的原生代码，并有自己的库文件，但是由于在 Android 下 A 插件运行效果较好，而 iOS 下只有 B 插件能正常使用，但是同时导入两个插件会由于它们的库文件冲突而导致编译打包失败，这就很麻烦了。</p><h2 id="在某平台下特定库不可导入"><a href="#在某平台下特定库不可导入" class="headerlink" title="在某平台下特定库不可导入"></a>在某平台下特定库不可导入</h2><p>最常见的问题就是，在 web 平台下不可以导入 <code>dart:io</code> 库，而经常使用 <code>dart:html</code> 库；而在其他平台下则正相反，导入<code>dart:html</code> 库会导致无法构建，而 <code>dart:io</code> 库却非常常用</p><h3 id="一般做法-2"><a href="#一般做法-2" class="headerlink" title="一般做法"></a>一般做法</h3><p>参看：<a href="https://github.com/flutter/flutter/issues/39998#issue-490489986">Dart SDK libraries and Flutter for web</a>，可以使用如下方式针对 web 平台和非 web 平台引入不同的库：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'b.dart'</span> <span class="keyword">if</span> (dart.<span class="keyword">library</span>.io) <span class="string">'c.dart'</span></span><br></pre></td></tr></tbody></table></figure><p>然后分别在 <code>b.dart</code> 和 <code>c.dart</code> 中导入平台允许使用的库，并编写逻辑。</p><p>还有一种针对 <code>dart:io</code> 库的解决方案，即使用 <a href="https://pub.flutter-io.cn/packages/universal_io">universal_io</a> 这个第三方库替代<code>dart:io</code>，然后在代码中用 <a href="https://github.com/flutter/flutter/blob/2cde203b9c7a825cc0f0faa0a535b8314c106cba/packages/flutter/lib/src/foundation/constants.dart#L77">kIsWeb</a> 常量来做判断。</p><h3 id="存在的问题-2"><a href="#存在的问题-2" class="headerlink" title="存在的问题"></a>存在的问题</h3><h4 id="条件引入的写法只能用于区分-web-和-非-web-平台"><a href="#条件引入的写法只能用于区分-web-和-非-web-平台" class="headerlink" title="条件引入的写法只能用于区分 web 和 非 web 平台"></a>条件引入的写法只能用于区分 web 和 非 web 平台</h4><p>由于条件引入这种写法生效的条件实际就只有 <code>if (dart.library.io)</code>和<code>if (dart.library.html)</code> 这两种，所以如果是想区分 Android 和 iOS 平台，或者区分移动端和桌面端，这种方法就无法使用了。</p><h4 id="写法非常死板繁琐"><a href="#写法非常死板繁琐" class="headerlink" title="写法非常死板繁琐"></a>写法非常死板繁琐</h4><p>如果要使用这种方法，基本上都需要编写三个源文件，写法非常固定。</p><h4 id="IDE-的代码转跳被限制"><a href="#IDE-的代码转跳被限制" class="headerlink" title="IDE 的代码转跳被限制"></a>IDE 的代码转跳被限制</h4><p>如果使用了这种写法，当想要通过查看定义的方式向上查找源码时，总是会转跳到条件导入中前面一个源代码中的位置，相当不友好。</p><h2 id="自定义平台-多渠道打包"><a href="#自定义平台-多渠道打包" class="headerlink" title="自定义平台/多渠道打包"></a>自定义平台/多渠道打包</h2><p>比如同一个项目的 Android 端和 iOS 端，想要通过简单的参数设置可以分别打包出针对国内用户的普通版和针对海外用户的国际版，又或者一种在国内更常见的需求，需要向国内各大应用市场上传不同的“渠道包”。</p><h3 id="一般做法-3"><a href="#一般做法-3" class="headerlink" title="一般做法"></a>一般做法</h3><p>官方推荐的常规做法是使用 <code>flavor</code>，参考：<a href="https://flutter.cn/docs/deployment/flavors">配置 flavors 构建双端</a>，通过一些配置，可以在编译打包时在打包命令中添加 <code>--flavor [flavor_name]</code> 的方式传入参数，在代码中即可拿到之前配置好的一些常量，得以实现不同渠道包的差异化。</p><h3 id="存在的问题-3"><a href="#存在的问题-3" class="headerlink" title="存在的问题"></a>存在的问题</h3><h4 id="配置非常繁琐"><a href="#配置非常繁琐" class="headerlink" title="配置非常繁琐"></a>配置非常繁琐</h4><p>这种方案需要针对每种渠道单独在原生侧设置很多繁琐的配置，而且有些设置依赖 Android Studio 或 Xcode 对原生项目的操作，配置使用的灵活性也不是很高，即使只是一个常量或者字符串的差异，也必须完整配置整套 flavor，非常麻烦。</p><h4 id="同样会造成最终产物的资源浪费"><a href="#同样会造成最终产物的资源浪费" class="headerlink" title="同样会造成最终产物的资源浪费"></a>同样会造成最终产物的资源浪费</h4><p>原因和上面相同，不再赘述。</p><h1 id="其他语言或方案中的处理方式"><a href="#其他语言或方案中的处理方式" class="headerlink" title="其他语言或方案中的处理方式"></a>其他语言或方案中的处理方式</h1><h2 id="C-C-C-go-rust等"><a href="#C-C-C-go-rust等" class="headerlink" title="C/C++/C#/go/rust等"></a>C/C++/C#/go/rust等</h2><p>在 C 语言和以 C 语言为基础的很多语言中，有种称为“条件编译”的语言特性：<a href="https://baike.baidu.com/item/%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/7692959">条件编译_百度百科</a><br>C/C++ 语言的一大优势就是可以编写出“可移植性”高的代码，其中“条件编译”发挥了相当重要的作用（<a href="https://blog.51cto.com/vanshell/417068">对于C语言可移植性的思考</a>）。</p><h3 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h3><ul><li>if格式<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 表达式</span></span><br><span class="line">     语句序列①</span><br><span class="line">[<span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">     语句序列②]</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>功能：当表达式的值为真时，编译语句序列①，否则编译语句序列②。其中，#else和语句序列②可有可无。</p></blockquote></li><li>ifdef格式<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span>     标识符</span></span><br><span class="line">     语句序列①</span><br><span class="line">[<span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">     语句序列②]</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>功能：当标识符已被定义时（用#define定义），编译语句序列①，否则编译语句序列②。其中#else和语句序列②可有可无。</p></blockquote></li><li>ifndef格式<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span>     标识符</span></span><br><span class="line">     语句序列①</span><br><span class="line">[<span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">     语句序列②]</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>功能：该格式功能与ifdef相反</p></blockquote></li></ul><p>条件编译允许只编译源文件中满足条件的程序段，使生成的目标程序较短，从而减少了内存的开销，并提高程序的效率，可以按不同的条件去编译不同的程序部分，因而产生不同的目标代码文件。这对于程序的移植和调试是很有用的。同时，条件编译可以让程序在各种不同的软硬件环境下都得以正常运行。即提高了程序的可移植性和灵活性。</p><h2 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a>Taro</h2><p><a href="https://taro-docs.jd.com/taro/docs">Taro</a> 是一个开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发 微信 / 京东 / 百度 / 支付宝 / 字节跳动 / QQ / 飞书 小程序 / H5 / RN 等应用。</p><blockquote><p>Taro 的设计初衷就是为了统一跨平台的开发方式，虽然 Taro 不像 Flutter 可以同时支持移动端、桌面端和 Web 等软硬件差异巨大的平台，但是由于它支持了众多厂家的“类小程序”应用开发，虽然已经尽力通过运行时框架、组件、API 去抹平多端差异，但是由于不同的平台之间还是存在一些无法消除的差异，所以为了更好的实现跨平台开发，Taro 中提供了如下的解决方案：<br><a href="https://taro-docs.jd.com/taro/docs/envs">Taro 文档 - 跨平台开发</a></p></blockquote><h3 id="内置环境变量"><a href="#内置环境变量" class="headerlink" title="内置环境变量"></a>内置环境变量</h3><p>Taro 在编译时提供了一些内置的环境变量来帮助用户做一些特殊处理。</p><h4 id="process-env-TARO-ENV"><a href="#process-env-TARO-ENV" class="headerlink" title="process.env.TARO_ENV"></a>process.env.TARO_ENV</h4><p>用于判断当前的编译平台类型。</p><p>取值：<code>weapp</code> / <code>swan</code> / <code>alipay</code> / <code>tt</code> / <code>qq</code> / <code>jd</code> / <code>h5</code> / <code>rn</code> </p><p>可以通过这个变量来区分不同环境，从而使用不同的逻辑。在编译阶段，<strong>会移除不属于当前编译类型的代码，只保留当前编译类型下的代码</strong>，例如：</p><h5 id="1-在微信小程序和-H5-端分别引用不同资源："><a href="#1-在微信小程序和-H5-端分别引用不同资源：" class="headerlink" title="1. 在微信小程序和 H5 端分别引用不同资源："></a>1. 在微信小程序和 H5 端分别引用不同资源：</h5><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 源码 */</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">TARO_ENV</span> === <span class="string">'weapp'</span>) {</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'path/to/weapp/name'</span>)</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">TARO_ENV</span> === <span class="string">'h5'</span>) {</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'path/to/h5/name'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 编译后（微信小程序）*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) {</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'path/to/weapp/name'</span>)</span><br><span class="line">}</span><br><span class="line"><span class="comment">/** 编译后（H5）*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) {</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'path/to/h5/name'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="2-决定不同端要加载的组件"><a href="#2-决定不同端要加载的组件" class="headerlink" title="2. 决定不同端要加载的组件"></a>2. 决定不同端要加载的组件</h5><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 源码（React JSX） */</span></span><br><span class="line">&lt;<span class="title class_">View</span>&gt;</span><br><span class="line">  {process.<span class="property">env</span>.<span class="property">TARO_ENV</span> === <span class="string">'weapp'</span> &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">ScrollViewWeapp</span> /&gt;</span></span>}</span><br><span class="line">  {process.<span class="property">env</span>.<span class="property">TARO_ENV</span> === <span class="string">'h5'</span> &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">ScrollViewH5</span> /&gt;</span></span>}</span><br><span class="line">&lt;/<span class="title class_">View</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 编译后（微信小程序）*/</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  {true &amp;&amp; <span class="tag">&lt;<span class="name">ScrollViewWeapp</span> /&gt;</span>}</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="comment">/** 编译后（H5）*/</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  {true &amp;&amp; <span class="tag">&lt;<span class="name">ScrollViewH5</span> /&gt;</span>}</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="统一接口的多端文件"><a href="#统一接口的多端文件" class="headerlink" title="统一接口的多端文件"></a>统一接口的多端文件</h3><p>内置环境变量虽然可以解决大部分跨端的问题，但是会让代码中充斥着逻辑判断的代码，影响代码的可维护性，而且也让代码变得愈发丑陋。为了解决这种问题，Taro 提供了另外一种称为“统一接口的多端文件”跨端开发的方式作为补充，主要用于以下场景：</p><ul><li>多端组件</li><li>多端脚本逻辑</li><li>多端页面路由</li></ul><p>参考：<a href="https://taro-docs.jd.com/taro/docs/envs#%E7%BB%9F%E4%B8%80%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%A4%9A%E7%AB%AF%E6%96%87%E4%BB%B6">统一接口的多端文件</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>可以看出，以上列举的 C 语言和 Taro 框架所提供的解决方案，都可以解决部分 Flutter 现有方案中的问题，主要的一个点就是编译过程中可以将不属于本平台的代码移除。</p><h1 id="已有方案"><a href="#已有方案" class="headerlink" title="已有方案"></a>已有方案</h1><h2 id="宏替换工具-definetool"><a href="#宏替换工具-definetool" class="headerlink" title="宏替换工具 - definetool"></a>宏替换工具 - definetool</h2><p>地址：<a href="https://github.com/fengdeyingzi/definetool">fengdeyingzi / definetool</a></p><blockquote><p>这是一个为编程语言加入define宏定义的工具，用于实现对不同版本、不同平台进行区分，实现原理是利用宏注释不需要的代码，该工具理论上适用于任何编程语言，作者是 <em>风的影子</em></p></blockquote><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><h4 id="1-在代码中加入宏注释"><a href="#1-在代码中加入宏注释" class="headerlink" title="1.在代码中加入宏注释"></a>1.在代码中加入宏注释</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// #ifdef WINDOWS</span><br><span class="line">print("hello windows");</span><br><span class="line">// #endif</span><br><span class="line"></span><br><span class="line">// #ifdef WEB</span><br><span class="line">print("hello web");</span><br><span class="line">// #endif</span><br></pre></td></tr></tbody></table></figure><h4 id="2-在代码所在目录运行findtool工具，并定义宏：WINDOWS"><a href="#2-在代码所在目录运行findtool工具，并定义宏：WINDOWS" class="headerlink" title="2.在代码所在目录运行findtool工具，并定义宏：WINDOWS"></a>2.在代码所在目录运行findtool工具，并定义宏：WINDOWS</h4><p>这个命令可直接在本项目上操作来查看效果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">definetool -define WINDOWS </span><br></pre></td></tr></tbody></table></figure><p>在编译时若没有此宏，会将define与endif之间的内容进行/**/注释，若有宏，则进行解除注释。</p><p>宏内定义的内容不要使用多行注释</p><h2 id="Flutter-工程条件编译打包脚本-FlutterX"><a href="#Flutter-工程条件编译打包脚本-FlutterX" class="headerlink" title="Flutter 工程条件编译打包脚本 - FlutterX"></a>Flutter 工程条件编译打包脚本 - FlutterX</h2><p>地址：<a href="https://github.com/debuggerx01/FlutterX">debuggerx01 / FlutterX</a></p><blockquote><p>这是我自己之前自用的一套脚本，原理和上面的 <code>definetool</code> 类似，原理是通过将 <code>flutter run/build [--option]</code> 命令替换为 <code>bash flutter.sh run/build [--option]</code> ，在原有 flutter 运行/打包流程前后执行内置及用户自定义脚本，从而实现对打包流程的自定义控制，默认内置功能为根据命令参数中的 <code>--debug/release</code> 以及 <code>--flavor</code> 渠道名，还可以使用 <code>--replace</code> 参数，只对项目的源文件进行注释的，对代码条件编译。</p></blockquote><h3 id="用法语法"><a href="#用法语法" class="headerlink" title="用法语法"></a>用法语法</h3><p>代码中使用形如以下的注释来进行代码块的条件标记：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; arguments) {</span><br><span class="line">  <span class="built_in">print</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// #{{exp}}</span></span><br><span class="line">  <span class="comment">// print(2);</span></span><br><span class="line">  <span class="comment">// #{{default}}</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="number">7</span>);</span><br><span class="line">  <span class="comment">// #{{end}}</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>基本注释标记语法为 <code>// #{{exp | default | end}}</code></p><blockquote><p>exp 支持的操作符有 <code>==</code>、<code>!=</code>、<code>in [...]</code>、<code>notIn [...]</code>、<code>&amp;&amp;</code>、<code>||</code>等，整体类似于 C 语言中 <code>#if 表达式</code> 的用法。</p></blockquote><p>另外，除了识别命令参数中的 <code>--debug/release</code> 以及 <code>--flavor</code> 渠道名，还可以使用 <code>--replace</code> 参数，只对项目的源文件进行代码注释和解除注释操作，之后即可正常使用 IDE 对所选模式的代码进行开发和调试。</p><p>如果还有进阶的需求，还可以在<code>.hooks/</code>目录下编写<code>pre_script.dart</code>、<code>pre_script.sh</code>、<code>after_script.dart</code>、<code>after_script.sh</code>等自定义脚本，在脚本中可以用类似如下方式对项目进行任意的处理：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'../bin/parse_arguments.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'change_package_name.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; arguments) {</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Running pre_script."</span>);</span><br><span class="line">  <span class="keyword">var</span> args = parse(arguments);</span><br><span class="line">  <span class="keyword">var</span> flavor = args.flavor;</span><br><span class="line">  <span class="keyword">if</span> (args.mode == <span class="string">'release'</span>) {</span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">'cn'</span>, <span class="string">'test'</span>].contains(args.flavor))</span><br><span class="line">      changeAndroidPackageNameAndAppName(</span><br><span class="line">        packageName: <span class="string">'com.debuggerx.flutter_app_'</span> + args.flavor,</span><br><span class="line">        appName: args.flavor == <span class="string">'test'</span> ? <span class="string">'测试版'</span> : <span class="string">'中文版'</span>,</span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">if</span> (args.flavor == <span class="string">'tw'</span>)</span><br><span class="line">      changeIosBundleIdAndAppName(...);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>如上两种方案其实都是借鉴了 C 语言中的“宏”和“条件编译”的思路实现的，好处是相对比较灵活，可以对项目源码进行以行为单位的替换操作，都可以解决一部分 Flutter 现有方案中的问题。<br>但是，这种思路也有一些问题，比如：</p><ol><li>由于需要对非当前平台的代码进行注释操作，所以在代码中会出现大量的注释代码，这些代码在 IDE 中不会高亮显示，也不参与语法检查，对开发和代码审核不是很友好</li><li>需要对源文件进行操作，虽然两种方案都会做了自动的备份处理，但是仍有可能在某些情况下破坏项目源码</li><li>解决思路比较偏向于“通用”的源文件级代码替换，不太符合 Flutter / Dart 代码生成的思路</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇详细介绍了在 Flutter 开发跨平台应用时，对于平台独有代码的处理方式以及问题，参考了 C 语言和 Taro 框架的处理方法，并介绍了两种已有的源码替换方案和缺点。<br>下一篇，我将介绍一种更符合 Flutter / Dart 代码生成的模式，即利用 <a href="https://pub.flutter-io.cn/packages/source_gen">source_gen</a> 实现的条件编译方案。</p>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> 编程 </tag>
            
            <tag> flutter </tag>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人对 Linux 的一些偏好设置</title>
      <link href="/2022/03/30/some-personal-preferences-for-linux/"/>
      <url>/2022/03/30/some-personal-preferences-for-linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一篇 <a href="/2022/03/27/set-global-keybindings-via-xbindkeys/">利用 Xbindkeys 设置全局快捷键/一键切换输入法</a> 中介绍了我关于系统快捷键的一点定制，这篇将继续介绍我个人对 Linux 的一些偏好设置，有些是为了提高效率方便使用，有些则是为了美观。</p></blockquote><script>    window.onload = function () {        document.querySelectorAll('.hide_code').forEach(function (div) {            var is = div.querySelectorAll('i');            is[0].click();        });    }</script><h1 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h1><h2 id="bashrc"><a href="#bashrc" class="headerlink" title=".bashrc"></a><code>.bashrc</code></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">History settings.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置显示 <span class="built_in">history</span> 时显示时间</span></span><br><span class="line">HISTTIMEFORMAT="[%F-%T] "</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加记录历史的最大条数</span></span><br><span class="line">HISTSIZE=10000</span><br><span class="line">HISTFILESIZE=20000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Alias definitions.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将别名配置分离到独立文件中方便管理</span></span><br><span class="line">if [ -f ~/.bash_aliases ]; then</span><br><span class="line">    . ~/.bash_aliases</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Custom definitions.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 将自定义配置分离到独立文件中方便管理</span></span></span><br><span class="line">if [ -f ~/.bash_debuggerx ]; then</span><br><span class="line">    . ~/.bash_debuggerx</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><h2 id="bash-debuggerx"><a href="#bash-debuggerx" class="headerlink" title=".bash_debuggerx"></a><code>.bash_debuggerx</code></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">避免终端乱码</span></span><br><span class="line">export LC_NUMERIC="en_US.UTF-8"</span><br><span class="line"></span><br><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line"></span><br><span class="line">export PATH="/home/debuggerx/flutter/bin:$PATH"</span><br><span class="line">export PATH="/home/debuggerx/flutter/bin/cache/dart-sdk/bin:$PATH"</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置这条 PATH 路径后，可以在终端直接调用以 pub global activate 方式安装的 dart 程序</span></span><br><span class="line">export PATH="/home/debuggerx/.pub-cache/bin:$PATH"</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配合 JetBrains Toolbox App 生成的 shell 脚本功能，使得可以通过命令行打开 IDE</span></span><br><span class="line">export PATH="/home/debuggerx/JetBrainsIDE/bin:$PATH"</span><br></pre></td></tr></tbody></table></figure><h2 id="bash-aliases"><a href="#bash-aliases" class="headerlink" title=".bash_aliases"></a><code>.bash_aliases</code></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方便调用 python 或者快速进入 python 交互程序</span></span><br><span class="line">alias py='python3'</span><br><span class="line">alias l.='ls -d .* --color=auto'</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使得 mplayer 变速播放时声调不变，适合加速看视频教程</span></span><br><span class="line">alias mplayer='mplayer -af scaletempo -ao alsa'</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用 Android Studio 内置的对比工具进行文件或文件夹的对比</span></span><br><span class="line">alias idiff='studio diff'</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制推送代码到 git 服务器，以避免漏提交或频繁提交产生过多无用的 commit</span></span><br><span class="line">alias gitpush="git status &amp;&amp; echo -e '\n\033[31m 危险操作，任意键继续\033[0m' &amp;&amp; read -n 1 &amp;&amp; git commit --amend --no-edit --no-verify &amp;&amp; git push -f"</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用 docker 进入 alpine 系统</span></span><br><span class="line">alias alpine='docker exec -it alpine-bash /bin/bash'</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简化 apt 操作</span></span><br><span class="line">alias aarm='sudo apt-get autoremove --purge'</span><br><span class="line">alias ainstall='sudo apt-get install'</span><br><span class="line">alias arm='sudo apt-get --purge remove'</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为简化后的 apt 操作命令赋予 tab 键补全的能力</span></span><br><span class="line">_apt_get_install()</span><br><span class="line">{</span><br><span class="line">    local cur prev words cword</span><br><span class="line">    _init_completion || return</span><br><span class="line"></span><br><span class="line">    special="install"</span><br><span class="line">    COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" \</span><br><span class="line">                2&gt; /dev/null ) )</span><br><span class="line">    return 0</span><br><span class="line">} &amp;&amp;</span><br><span class="line"></span><br><span class="line">_apt_get_remove()</span><br><span class="line">{</span><br><span class="line">    local cur prev words cword</span><br><span class="line">    _init_completion || return</span><br><span class="line"></span><br><span class="line">    special="remove"</span><br><span class="line">    if [[ -f /etc/debian_version ]]; then</span><br><span class="line">    # Debian system</span><br><span class="line">    COMPREPLY=( $( \</span><br><span class="line">            _xfunc dpkg _comp_dpkg_installed_packages $cur ) )</span><br><span class="line">    else</span><br><span class="line">        # assume RPM based</span><br><span class="line">        _xfunc rpm _rpm_installed_packages</span><br><span class="line">    fi</span><br><span class="line">    return 0</span><br><span class="line">} &amp;&amp;</span><br><span class="line"></span><br><span class="line">complete -F _apt_get_install ainstall</span><br><span class="line">complete -F _apt_get_remove arm</span><br></pre></td></tr></tbody></table></figure><h2 id="Dockerfile-alpine"><a href="#Dockerfile-alpine" class="headerlink" title="Dockerfile(alpine)"></a><code>Dockerfile</code>(alpine)</h2><figure class="highlight docker"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> DebuggerX </span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g'</span> /etc/apk/repositories</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update \</span></span><br><span class="line"><span class="language-bash">        &amp;&amp; apk upgrade \</span></span><br><span class="line"><span class="language-bash">        &amp;&amp; apk add --no-cache bash \</span></span><br><span class="line"><span class="language-bash">        bash-doc \</span></span><br><span class="line"><span class="language-bash">        bash-completion \</span></span><br><span class="line"><span class="language-bash">        &amp;&amp; <span class="built_in">rm</span> -rf /var/cache/apk/* \</span></span><br><span class="line"><span class="language-bash">        &amp;&amp; /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将以上内容保存为 Dockerfile 文件，然后在同目录的终端下执行下面的命令，之后即可通过 alpine 别名快速进入</span></span><br><span class="line"><span class="comment"># docker build -t alpine-bash .</span></span><br><span class="line"><span class="comment"># docker run --name="alpine-bash" --restart=always -it alpine-bash /bin/bash</span></span><br></pre></td></tr></tbody></table></figure><h2 id="inputrc"><a href="#inputrc" class="headerlink" title=".inputrc"></a><code>.inputrc</code></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终端中使用 tab 键补全忽略大小写的影响</span></span><br><span class="line">set completion-ignore-case on</span><br></pre></td></tr></tbody></table></figure><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><h2 id="vimrc"><a href="#vimrc" class="headerlink" title=".vimrc"></a><code>.vimrc</code></h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set number</span><br><span class="line">:set mouse=a</span><br><span class="line">set backspace=2</span><br><span class="line">syntax enable</span><br><span class="line">highlight LineNr ctermfg=220</span><br><span class="line">set incsearch</span><br><span class="line">set ic</span><br><span class="line">au BufNewFile,BufRead *.dart set filetype=javascript</span><br></pre></td></tr></tbody></table></figure><blockquote><p>从上至下分别是：<br>    1. 显示行号<br>    2. 设置可以使用鼠标操作<br>    3. 解决插入模式下delete/backspce键失效问题<br>    4. 开启语法高亮<br>    5. 设置行号的显示颜色为黄色<br>    6. 设置搜索时实时更新位置并高亮<br>    7. 设置搜索时忽略大小写<br>    8. 设置使用 js 的规则来给 dart 源码进行语法高亮着色</p></blockquote><h1 id="Chrome-开启暗色模式"><a href="#Chrome-开启暗色模式" class="headerlink" title="Chrome 开启暗色模式"></a>Chrome 开启暗色模式</h1><p>目前 Chrome 在 Linux 上不能很好地响应系统明暗主题配置，这主要会有两个问题：</p><ol><li>Chrome 的菜单等内置 UI 会一直显示亮色</li><li>如 GitHub 等用 <code>@media(prefers-color-scheme: dark) </code> 方式设置了暗色主题的网页无法正常显示暗色</li></ol><p>而我基本一直使用深色主题，参考：<a href="https://askubuntu.com/questions/1159741/enable-dark-mode-on-chromes-internal-pages">Enable dark mode on chrome - Ask Ubuntu</a> 的内容，可以将其修改成强制使用暗色模式</p><h2 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h2><ol><li>复制 <code>.desktop</code> 文件到用户目录<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/applications/google-chrome.desktop ~/.local/share/applications/</span><br></pre></td></tr></tbody></table></figure></li><li>修改启动参数<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/%U/--enable-features=WebUIDarkMode --force-dark-mode %U/g'  ~/.local/share/applications/google-chrome.desktop</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h2><p>修改前：<br><img src="/2022/03/30/some-personal-preferences-for-linux/light.webp" alt="light"><br>修改后：<br><img src="/2022/03/30/some-personal-preferences-for-linux/dark.webp" alt="dark"></p><h1 id="easystroke"><a href="#easystroke" class="headerlink" title="easystroke"></a>easystroke</h1><blockquote><p>这大概是 Linux 唯一可用的全局鼠标手势软件。不幸的是，该软件长期处于无人维护的状态：原作者不详，自 2013 年开始就没有再发布过新版本，如果不应用一些补丁，源代码也无法正常编译构建……</p><p>参考：<a href="https://github.com/thjaeger/easystroke/wiki/BuildInstructions#releases">thjaeger/easystroke Wiki</a></p></blockquote><p>但也正是由于其在 Linux 世界中的“唯一性”，而且就其功能本身还是足够丰富好用的，所以很多发行版还是会选择维护构建属于它们自己的软件包。</p><p>目前，Deepin/UOS 的官方仓库中不再包含此软件，我能找到最方便的安装使用此软件的方式则是从 Ubuntu 的仓库中下载可用的 deb 包：</p><p><a href="https://packages.ubuntu.com/bionic/amd64/easystroke/download">easystroke_0.6.0-0ubuntu11_amd64.deb</a><br><a href="https://packages.ubuntu.com/bionic/amd64/libboost-serialization1.65.1/download">libboost-serialization1.65.1_1.65.1+dfsg-0ubuntu5_amd64.deb</a></p><p>下载完成后先安装<code>libboost-serialization</code>这个依赖，再安装<code>easystroke_0.6.0</code>这个本体即可正常使用。</p><h2 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h2><p>偏好设置：<br><img src="/2022/03/30/some-personal-preferences-for-linux/easystroke1.webp" alt="easystroke1"><br>手势配置：<br><img src="/2022/03/30/some-personal-preferences-for-linux/easystroke2.webp" alt="easystroke2"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><a href="actions-0.5.6">~/.easystroke/actions-0.5.6</a>:</p><div class="hide_code"><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">22 serialization::archive 15 0 3 0 1 0 0 0 0 0 0 14 0 0 0 5 1 0</span><br><span class="line">0 0 1 1 0</span><br><span class="line">1 0 0 1 1 0 1 10 1 5</span><br><span class="line">2 0 0 0 1 4 0 0 32768 0 1 13 7 SendKey 1 1</span><br><span class="line">3 1 0</span><br><span class="line">4 0 0 4 65365 0 9 左标签 5</span><br><span class="line">5</span><br><span class="line">6 1 1 10</span><br><span class="line">7 0 1 0 9 0 32768 13</span><br><span class="line">8</span><br><span class="line">9 0 65365 0 12 向上翻页 5</span><br><span class="line">10</span><br><span class="line">11 1 1 10</span><br><span class="line">12 0 1 8 0 0 32768 13</span><br><span class="line">13</span><br><span class="line">14 4 118 0 6 粘贴 5</span><br><span class="line">15</span><br><span class="line">16 1 1 10</span><br><span class="line">17 94 1 0 1 5.13910433472223205e-01 1.74632108133779829e-02 5.13910433472223205e-01 1.96148347445530558e-02 5.11104000096036182e-01 1.68085889391036414e-02 5.11104000096036182e-01 2.60280658343277627e-02 5.11104000096036182e-01 4.74734034072599731e-02 5.11104000096036182e-01 7.24219996466167193e-02 5.11104000096036182e-01 9.73437732704946490e-02 5.11104000096036182e-01 1.46672626414236451e-01 5.11104000096036182e-01 1.96443396215797872e-01 5.11104000096036182e-01 2.44668583139416473e-01 5.11104000096036182e-01 2.93100473015886154e-01 5.22636224186046161e-01 3.62293442414470590e-01 5.22636224186046161e-01 4.26522539812826895e-01 5.22636224186046161e-01 4.90751449640445647e-01 5.22636224186046161e-01 5.54980547038802063e-01 5.22636224186046161e-01 6.13255961654538995e-01 5.22636224186046161e-01 6.70827798433484279e-01 5.11040226045247348e-01 7.28808539420428891e-01 5.05450993205812771e-01 7.79113135541241064e-01 5.05450993205812771e-01 8.27356891967883312e-01 5.00279667969783071e-01 8.68725243007269166e-01 4.95513870668475853e-01 9.02085824116419910e-01 4.95513870668475853e-01 9.28353605353418931e-01 4.95513870668475853e-01 9.48099176902089225e-01 4.95513870668475853e-01 9.54539418178080412e-01 4.95513870668475853e-01 9.60685736108229826e-01 4.95513870668475853e-01 9.66479983763876893e-01 4.92616653055283460e-01 9.69377201377069397e-01 4.92616653055283460e-01 9.72450360342144049e-01 4.92616653055283460e-01 9.75523519307218701e-01 4.89543494090208753e-01 9.84742996202442766e-01 4.86470335125134046e-01 9.87816155167517529e-01 4.86470335125134046e-01 9.90852925409495100e-01 4.83433564883156586e-01 9.96926841034925237e-01 4.80360405918081879e-01 1.00000000000000000e+00 4.80360405918081879e-01 9.97245336147394523e-01 4.80360405918081879e-01 9.94569076863112023e-01 4.80360405918081879e-01 9.85349599967887846e-01 4.80360405918081879e-01 9.72697766145057430e-01 4.83718672404330474e-01 9.59265262912275762e-01 4.83718672404330474e-01 9.31406881820306509e-01 4.88505102486775311e-01 8.93114128165584442e-01 4.93284780022666069e-01 8.59656197843611691e-01 4.93284780022666069e-01 8.08003530831564842e-01 4.93284780022666069e-01 7.50549676046579073e-01 4.93284780022666069e-01 6.92935823422408115e-01 4.87521106397250048e-01 6.35296836319396929e-01 4.87521106397250048e-01 5.85360629127259613e-01 4.82140077076567475e-01 5.36933616089967924e-01 4.82140077076567475e-01 4.95446157632197015e-01 4.77363775813953839e-01 4.62012048793901398e-01 4.77363775813953839e-01 4.41251156842524250e-01 4.77363775813953839e-01 4.22580740761859808e-01 4.77363775813953839e-01 4.08367568119126945e-01 4.77363775813953839e-01 3.94964701062888335e-01 4.77363775813953839e-01 3.85476998012875605e-01 4.77363775813953839e-01 3.79330680082726190e-01 4.77363775813953839e-01 3.70111203187502125e-01 4.77363775813953839e-01 3.63964885257352710e-01 4.77363775813953839e-01 3.54745408362128534e-01 4.77363775813953839e-01 3.48599090431979119e-01 4.77363775813953839e-01 3.39379613536755054e-01 4.77363775813953839e-01 3.33233295606605640e-01 4.77363775813953839e-01 3.30160136641530932e-01 4.77363775813953839e-01 3.24013818711381518e-01 4.77363775813953839e-01 3.14794341816157397e-01 4.77363775813953839e-01 3.08648023886007983e-01 4.77363775813953839e-01 2.99428546990783917e-01 4.77363775813953839e-01 2.90209070095559796e-01 4.77363775813953839e-01 2.80989593200335674e-01 4.77363775813953839e-01 2.71770116305111553e-01 4.77363775813953839e-01 2.62550639409887432e-01 4.77363775813953839e-01 2.53331162514663366e-01 4.77363775813953839e-01 2.47184844584513952e-01 4.77363775813953839e-01 2.34714954377169494e-01 4.77363775813953839e-01 2.28480103058866069e-01 4.80489829727035800e-01 2.15975699835800561e-01 4.80489829727035800e-01 2.09723592009636639e-01 4.80489829727035800e-01 1.97244510836149078e-01 4.83681533398282848e-01 1.87669962534620871e-01 4.83681533398282848e-01 1.78450485639396750e-01 4.86860482259372063e-01 1.65734690195039780e-01 4.86860482259372063e-01 1.47883395525537586e-01 4.86860482259372063e-01 1.33704548327788109e-01 4.90219874170046366e-01 1.20266230402140406e-01 4.93807727239135075e-01 1.02328090481122680e-01 4.93807727239135075e-01 8.34494708817062891e-02 4.93807727239135075e-01 6.92261694191421695e-02 4.93807727239135075e-01 5.15146149491627070e-02 4.93807727239135075e-01 3.28468248588248968e-02 4.93807727239135075e-01 1.87103686477763098e-02 4.93807727239135075e-01 9.21947689522412128e-03 4.93807727239135075e-01 3.07315896507470709e-03 4.93807727239135075e-01 0.00000000000000000e+00 0 0 0 32768 13</span><br><span class="line">18</span><br><span class="line">19 0 65360 0 6 顶部 5</span><br><span class="line">20</span><br><span class="line">21 1 1 10</span><br><span class="line">22 0 1 0 8 0 32768 13</span><br><span class="line">23</span><br><span class="line">24 0 65366 0 12 向下翻页 5</span><br><span class="line">25</span><br><span class="line">26 1 1 10</span><br><span class="line">27 248 1 9.91140625078119508e-01 5.00353655603188008e-01 9.88312491285337158e-01 5.00353655603188008e-01 9.84480539428606916e-01 5.00353655603188008e-01 9.79929749401014405e-01 5.00353655603188008e-01 9.70828169345829495e-01 5.00353655603188008e-01 9.57175799263052074e-01 5.00353655603188008e-01 9.38412678661005639e-01 5.00353655603188008e-01 9.24363114380263196e-01 5.00353655603188008e-01 8.99426540460756430e-01 5.00353655603188008e-01 8.78414689630231615e-01 5.00353655603188008e-01 8.58714968443893056e-01 5.00353655603188008e-01 8.38959140105114853e-01 5.00353655603188008e-01 8.24864023482787534e-01 5.00353655603188008e-01 8.06175342073087053e-01 5.00353655603188008e-01 7.92149664995858593e-01 5.00353655603188008e-01 7.87598874968266083e-01 5.00353655603188008e-01 7.78497294913081062e-01 5.00353655603188008e-01 7.74398695203171838e-01 5.00353655603188008e-01 7.70368979522000341e-01 5.00353655603188008e-01 7.65818189494407831e-01 5.00353655603188008e-01 7.56716609439222920e-01 5.00353655603188008e-01 7.52165819411630410e-01 5.00353655603188008e-01 7.47615029384037899e-01 5.00353655603188008e-01 7.43064239356445388e-01 5.00353655603188008e-01 7.33962659301260478e-01 5.00353655603188008e-01 7.29411869273667968e-01 5.00353655603188008e-01 7.24861079246075457e-01 5.00353655603188008e-01 7.20364729821840299e-01 5.00353655603188008e-01 7.11371475457009406e-01 5.00353655603188008e-01 7.07034559228321147e-01 5.00353655603188008e-01 7.03294823087482146e-01 5.00353655603188008e-01 6.98801251245050992e-01 5.00353655603188008e-01 6.89699671189866081e-01 5.00353655603188008e-01 6.85148881162273571e-01 5.00353655603188008e-01 6.80598091134681060e-01 5.00353655603188008e-01 6.76047301107088550e-01 5.00353655603188008e-01 6.57567493849045115e-01 5.00353655603188008e-01 6.48328145736384087e-01 5.00353655603188008e-01 6.34675775653606666e-01 5.00353655603188008e-01 6.25574195598421645e-01 5.00353655603188008e-01 6.16472615543236624e-01 5.00353655603188008e-01 6.11921825515644224e-01 5.00353655603188008e-01 6.02820245460459203e-01 5.00353655603188008e-01 5.93718665405274182e-01 5.00353655603188008e-01 5.89167875377681671e-01 5.00353655603188008e-01 5.84617085350089161e-01 5.00353655603188008e-01 5.80066295322496650e-01 5.04904445630780518e-01 5.75730490126529992e-01 5.04904445630780518e-01 5.71996309149298887e-01 5.04904445630780518e-01 5.63009165464436689e-01 5.04904445630780518e-01 5.58458375436844179e-01 5.04904445630780518e-01 5.53907585409251668e-01 5.04904445630780518e-01 5.49356795381659158e-01 5.04904445630780518e-01 5.40255215326474136e-01 5.04904445630780518e-01 5.26602845243696716e-01 5.04904445630780518e-01 5.17501265188511694e-01 5.04904445630780518e-01 5.08399685133326673e-01 5.04904445630780518e-01 4.99298105078141707e-01 5.04904445630780518e-01 4.80799410263831384e-01 5.04904445630780518e-01 4.66702627092421829e-01 5.04904445630780518e-01 4.53050257009644297e-01 5.04904445630780518e-01 4.39397886926866821e-01 5.04904445630780518e-01 4.34847096899274310e-01 5.04904445630780518e-01 4.21194726816496834e-01 5.04904445630780518e-01 4.16643936788904323e-01 5.04904445630780518e-01 4.12093146761311813e-01 5.04904445630780518e-01 4.02991566706126847e-01 5.04904445630780518e-01 3.98440776678534336e-01 5.04904445630780518e-01 3.93889986650941881e-01 5.04904445630780518e-01 3.89339196623349371e-01 5.04904445630780518e-01 3.80237616568164349e-01 5.04904445630780518e-01 3.75743489209372450e-01 5.04904445630780518e-01 3.71249361850580550e-01 5.04904445630780518e-01 3.62147781795395529e-01 5.09455235658373029e-01 3.53046201740210563e-01 5.09455235658373029e-01 3.48495411712618053e-01 5.09455235658373029e-01 3.43944621685025598e-01 5.09455235658373029e-01 3.30292251602248066e-01 5.09455235658373029e-01 3.21190671547063045e-01 5.09455235658373029e-01 3.07538301464285568e-01 5.09455235658373029e-01 2.98436721409100603e-01 5.09455235658373029e-01 2.84784351326323071e-01 5.09455235658373029e-01 2.80233561298730560e-01 5.09455235658373029e-01 2.71131981243545594e-01 5.09455235658373029e-01 2.62030401188360629e-01 5.09455235658373029e-01 2.57479611160768118e-01 5.09455235658373029e-01 2.52984372769254617e-01 5.09455235658373029e-01 2.43995007018949217e-01 5.09455235658373029e-01 2.39444216991356706e-01 5.09455235658373029e-01 2.34893426963764196e-01 5.09455235658373029e-01 2.30342636936171741e-01 5.09455235658373029e-01 2.21241056880986720e-01 5.09455235658373029e-01 2.16690266853394209e-01 5.09455235658373029e-01 2.12139476825801754e-01 5.09455235658373029e-01 2.07588686798209243e-01 5.09455235658373029e-01 1.93936316715431767e-01 5.09455235658373029e-01 1.84834736660246746e-01 5.09455235658373029e-01 1.75733156605061780e-01 5.09455235658373029e-01 1.71182366577469269e-01 5.09455235658373029e-01 1.66631576549876759e-01 5.09455235658373029e-01 1.62080786522284248e-01 5.09455235658373029e-01 1.48428416439506772e-01 5.09455235658373029e-01 1.43877626411914261e-01 5.09455235658373029e-01 1.39326836384321751e-01 5.09455235658373029e-01 1.30225256329136785e-01 5.09455235658373029e-01 1.25674466301544274e-01 5.09455235658373029e-01 1.21536424930018816e-01 5.09455235658373029e-01 1.17397828042132557e-01 5.09455235658373029e-01 1.08296247986947591e-01 5.09455235658373029e-01 1.03745457959355081e-01 5.09455235658373029e-01 9.91946679317625701e-02 5.09455235658373029e-01 9.46438779041701150e-02 5.09455235658373029e-01 8.55422978489850938e-02 5.09455235658373029e-01 8.09915078213925832e-02 5.09455235658373029e-01 7.64407177938001281e-02 5.09455235658373029e-01 7.18899277662076175e-02 5.09455235658373029e-01 6.27883477110225963e-02 5.09455235658373029e-01 5.82919982867875497e-02 5.09455235658373029e-01 5.52599899895951929e-02 5.09455235658373029e-01 5.17980120291512969e-02 5.05993257697929133e-01 4.32269500985208444e-02 5.01707726732613879e-01 4.05165857742259550e-02 5.01707726732613879e-01 3.64063202207399739e-02 5.01707726732613879e-01 3.18555301931474633e-02 5.01707726732613879e-01 2.27539501379624975e-02 5.01707726732613879e-01 1.82031601103699869e-02 5.01707726732613879e-01 1.36523700827774763e-02 5.01707726732613879e-01 9.10158005518502122e-03 5.01707726732613879e-01 0.00000000000000000e+00 5.01707726732613879e-01 4.05971356465406608e-03 5.01707726732613879e-01 7.96721564645158642e-03 5.01707726732613879e-01 1.25180056740440970e-02 5.01707726732613879e-01 1.70687957016366076e-02 5.01707726732613879e-01 2.16195857292291183e-02 5.01707726732613879e-01 3.07211657844140840e-02 5.01707726732613879e-01 4.43735358671916158e-02 5.01707726732613879e-01 5.80259059499690921e-02 5.01707726732613879e-01 7.16782760327465684e-02 5.01707726732613879e-01 8.53306461155240448e-02 5.01707726732613879e-01 1.04100988430260777e-01 5.01707726732613879e-01 1.30330804437686909e-01 5.01707726732613879e-01 1.45364743709749389e-01 5.06719039823301354e-01 1.70358535814417511e-01 5.06719039823301354e-01 1.91335389114212495e-01 5.06719039823301354e-01 2.11191210397933038e-01 5.06719039823301354e-01 2.30979258685637179e-01 5.06719039823301354e-01 2.40209718536525452e-01 5.06719039823301354e-01 2.49311298591710473e-01 5.11269829850893864e-01 2.53862088619302984e-01 5.11269829850893864e-01 2.62963668674487949e-01 5.11269829850893864e-01 2.67514458702080460e-01 5.11269829850893864e-01 2.72065248729672970e-01 5.11269829850893864e-01 2.76616038757265481e-01 5.11269829850893864e-01 2.85717618812450447e-01 5.11269829850893864e-01 2.90268408840042957e-01 5.11269829850893864e-01 2.94819198867635412e-01 5.11269829850893864e-01 2.99369988895227923e-01 5.11269829850893864e-01 3.08471568950412944e-01 5.11269829850893864e-01 3.13022358978005455e-01 5.11269829850893864e-01 3.22123939033190476e-01 5.11269829850893864e-01 3.31225519088375442e-01 5.11269829850893864e-01 3.35776309115967897e-01 5.11269829850893864e-01 3.40327099143560408e-01 5.11269829850893864e-01 3.44877889171152918e-01 5.11269829850893864e-01 3.53979469226337939e-01 5.11269829850893864e-01 3.58530259253930450e-01 5.11269829850893864e-01 3.63081049281522905e-01 5.11269829850893864e-01 3.67631839309115416e-01 5.11269829850893864e-01 3.76733419364300381e-01 5.11269829850893864e-01 3.85834999419485403e-01 5.11269829850893864e-01 3.94936579474670424e-01 5.11269829850893864e-01 4.04038159529855390e-01 5.11269829850893864e-01 4.13139739585040355e-01 5.11269829850893864e-01 4.26792109667817887e-01 5.11269829850893864e-01 4.35893689723002908e-01 5.11269829850893864e-01 4.54359609072026605e-01 5.11269829850893864e-01 4.63592290988358025e-01 5.11269829850893864e-01 4.77244661071135556e-01 5.11269829850893864e-01 4.90897031153913033e-01 5.11269829850893864e-01 5.04549401236690565e-01 5.11269829850893864e-01 5.18201771319467985e-01 5.11269829850893864e-01 5.22752561347060496e-01 5.11269829850893864e-01 5.31854141402245517e-01 5.11269829850893864e-01 5.40955721457430538e-01 5.11269829850893864e-01 5.50057301512615449e-01 5.11269829850893864e-01 5.59158881567800470e-01 5.11269829850893864e-01 5.68260461622985491e-01 5.11269829850893864e-01 5.77362041678170512e-01 5.11269829850893864e-01 5.86463621733355422e-01 5.11269829850893864e-01 5.95565201788540444e-01 5.11269829850893864e-01 6.09217571871317976e-01 5.11269829850893864e-01 6.18319151926502997e-01 5.11269829850893864e-01 6.31971522009280418e-01 5.06719039823301354e-01 6.36308438237968788e-01 5.06719039823301354e-01 6.40645354466657047e-01 5.06719039823301354e-01 6.49746934521842068e-01 5.06719039823301354e-01 6.54297724549434578e-01 5.06719039823301354e-01 6.63399304604619600e-01 5.06719039823301354e-01 6.72500884659804621e-01 5.06719039823301354e-01 6.77051674687397020e-01 5.06719039823301354e-01 6.81602464714989531e-01 5.06719039823301354e-01 6.90704044770174552e-01 5.06719039823301354e-01 6.99805624825359573e-01 5.06719039823301354e-01 7.04356414852951973e-01 5.06719039823301354e-01 7.08907204880544484e-01 5.02168249795708843e-01 7.18008784935729505e-01 5.02168249795708843e-01 7.22559574963322016e-01 5.02168249795708843e-01 7.27110364990914526e-01 5.02168249795708843e-01 7.31661155018507037e-01 5.02168249795708843e-01 7.40762735073692058e-01 5.02168249795708843e-01 7.45313525101284569e-01 5.02168249795708843e-01 7.54415105156469590e-01 5.02168249795708843e-01 7.63516685211654500e-01 5.02168249795708843e-01 7.72618265266839521e-01 5.02168249795708843e-01 7.81719845322024431e-01 5.02168249795708843e-01 7.90821425377209453e-01 5.02168249795708843e-01 7.95158341605897823e-01 5.02168249795708843e-01 7.99494702318225281e-01 4.97831750204291157e-01 8.04045492345817792e-01 4.93280960176698646e-01 8.13147072401002813e-01 4.93280960176698646e-01 8.17482877596969582e-01 4.93280960176698646e-01 8.21819238309297040e-01 4.93280960176698646e-01 8.30920818364482061e-01 4.93280960176698646e-01 8.35471608392074572e-01 4.93280960176698646e-01 8.44573188447259593e-01 4.93280960176698646e-01 8.53674768502444614e-01 4.93280960176698646e-01 8.62776348557629524e-01 4.93280960176698646e-01 8.71877928612814546e-01 4.93280960176698646e-01 8.80979508667999456e-01 4.93280960176698646e-01 8.90081088723184477e-01 4.93280960176698646e-01 8.99182668778369498e-01 4.93280960176698646e-01 9.03733458805962009e-01 4.93280960176698646e-01 9.12835038861147030e-01 4.93280960176698646e-01 9.21936618916332051e-01 4.93280960176698646e-01 9.26487408943924562e-01 4.93280960176698646e-01 9.35588988999109583e-01 4.88730170149106136e-01 9.44690569054294493e-01 4.88730170149106136e-01 9.49184140896725648e-01 4.88730170149106136e-01 9.53400510075122498e-01 4.88730170149106136e-01 9.56453072477664090e-01 4.88730170149106136e-01 9.64553056534344533e-01 4.88730170149106136e-01 9.69103846561937043e-01 4.88730170149106136e-01 9.73654636589529554e-01 4.88730170149106136e-01 9.78205426617122065e-01 4.88730170149106136e-01 9.87307006672307086e-01 4.88730170149106136e-01 9.91857796699899485e-01 4.88730170149106136e-01 9.96408586727491996e-01 4.93280960176698646e-01 1.00000000000000000e+00 4.93280960176698646e-01 0 0 0 32768 13</span><br><span class="line">28</span><br><span class="line">29 4 119 0 6 关闭 5</span><br><span class="line">30</span><br><span class="line">31 1 1 10</span><br><span class="line">32 67 1 4.97765479598201166e-01 1.00000000000000000e+00 4.97765479598201166e-01 9.96113588519303761e-01 4.97765479598201166e-01 9.92371837171724280e-01 4.97765479598201166e-01 9.83658191506349366e-01 4.97765479598201166e-01 9.70587723008287218e-01 4.97765479598201166e-01 9.52629124791569026e-01 4.97765479598201166e-01 9.27498947291724329e-01 4.97765479598201166e-01 9.00998487317707264e-01 4.97765479598201166e-01 8.59763435476062821e-01 4.97765479598201166e-01 8.05912105407244228e-01 4.97765479598201166e-01 7.49620433350170479e-01 4.97765479598201166e-01 6.93425290021628560e-01 4.97765479598201166e-01 6.27688694052726759e-01 4.97765479598201166e-01 5.69182711465392566e-01 5.04792664667573554e-01 5.12965762749138188e-01 5.04792664667573554e-01 4.65664292494279763e-01 5.04792664667573554e-01 4.28702032966821078e-01 5.04792664667573554e-01 4.00631053238784784e-01 4.99716795879100839e-01 3.80327578084893925e-01 4.99716795879100839e-01 3.61298122596005855e-01 4.95207335332426446e-01 3.47769209117258060e-01 4.95207335332426446e-01 3.39055563451883257e-01 4.95207335332426446e-01 3.34698740619195911e-01 4.95207335332426446e-01 3.25985094953821108e-01 4.95207335332426446e-01 3.12914626455758960e-01 4.95207335332426446e-01 3.04200980790384157e-01 4.95207335332426446e-01 2.91130512292321952e-01 4.95207335332426446e-01 2.86773689459634551e-01 4.95207335332426446e-01 2.78060043794259748e-01 4.95207335332426446e-01 2.69346398128885001e-01 4.95207335332426446e-01 2.60632752463510253e-01 4.95207335332426446e-01 2.51919106798135450e-01 4.95207335332426446e-01 2.43205461132760647e-01 4.95207335332426446e-01 2.38848638300073246e-01 4.95207335332426446e-01 2.30134992634698443e-01 4.95207335332426446e-01 2.21421346969323696e-01 4.95207335332426446e-01 2.17064524136636294e-01 4.95207335332426446e-01 1.99382482056758625e-01 4.95207335332426446e-01 1.94961838577108026e-01 4.95207335332426446e-01 1.81891503038727032e-01 4.99564158165113847e-01 1.73177857373352229e-01 4.99564158165113847e-01 1.64464211707977481e-01 4.99564158165113847e-01 1.55750566042602678e-01 4.99564158165113847e-01 1.51393743209915277e-01 4.99564158165113847e-01 1.42680097544540474e-01 4.99564158165113847e-01 1.38323274711853128e-01 4.99564158165113847e-01 1.29609629046478325e-01 4.99564158165113847e-01 1.20895983381103522e-01 4.99564158165113847e-01 1.12182337715728719e-01 4.99564158165113847e-01 1.03468692050353972e-01 4.99564158165113847e-01 9.47550463849791691e-02 4.99564158165113847e-01 8.60414007196043662e-02 4.99564158165113847e-01 7.73277550542296188e-02 4.99564158165113847e-01 7.29709322215422174e-02 4.99564158165113847e-01 6.42572865561674145e-02 4.99564158165113847e-01 5.55436408907926116e-02 4.99564158165113847e-01 5.12421292854733368e-02 4.99564158165113847e-01 4.72218274058356369e-02 4.99564158165113847e-01 4.31914205904287418e-02 4.99564158165113847e-01 3.45818823554126520e-02 4.99564158165113847e-01 3.02795729920063428e-02 4.99564158165113847e-01 2.59772636285999781e-02 4.99564158165113847e-01 2.16750872248748228e-02 4.99564158165113847e-01 1.30704684980622043e-02 4.99564158165113847e-01 8.71364566537480290e-03 4.99564158165113847e-01 4.35682283268740145e-03 4.99564158165113847e-01 0.00000000000000000e+00 0 0 0 32768 13</span><br><span class="line">33</span><br><span class="line">34 0 65365 0 9 上翻页 5</span><br><span class="line">35</span><br><span class="line">36 1 1 10</span><br><span class="line">37 118 1 4.81328203451729553e-01 0.00000000000000000e+00 4.81328203451729553e-01 1.05360978081217582e-02 4.81328203451729553e-01 2.12056958357048631e-02 4.81328203451729553e-01 2.65404948494963877e-02 4.81328203451729553e-01 3.18046364300608730e-02 4.81328203451729553e-01 4.23325939808983920e-02 4.81328203451729553e-01 4.76673929946899722e-02 4.81328203451729553e-01 5.30021920084814968e-02 4.81328203451729553e-01 5.83369910222730215e-02 4.81328203451729553e-01 6.90065890498561263e-02 4.81328203451729553e-01 7.43413880636477065e-02 4.81328203451729553e-01 8.50109860912308113e-02 4.81328203451729553e-01 9.56805841188139161e-02 4.81328203451729553e-01 1.06350182146396965e-01 4.81328203451729553e-01 1.11684981160188546e-01 4.81328203451729553e-01 1.27689378201563175e-01 4.81328203451729553e-01 1.33024177215354755e-01 4.81328203451729553e-01 1.43693775242937860e-01 4.81328203451729553e-01 1.59698172284312490e-01 4.81328203451729553e-01 1.70367770311895594e-01 4.81328203451729553e-01 1.86372167353270224e-01 4.81328203451729553e-01 1.91706966367061804e-01 4.81328203451729553e-01 2.07711363408436434e-01 4.86663002465521133e-01 2.13046162422227958e-01 4.86663002465521133e-01 2.29050559463602643e-01 4.86663002465521133e-01 2.39720157491185748e-01 4.86663002465521133e-01 2.55724554532560377e-01 4.86663002465521133e-01 2.61059353546351902e-01 4.86663002465521133e-01 2.71728951573935062e-01 4.86663002465521133e-01 2.77063750587726587e-01 4.86663002465521133e-01 2.82398549601518112e-01 4.86663002465521133e-01 2.93068147629101217e-01 4.86663002465521133e-01 3.03737745656684321e-01 4.86663002465521133e-01 3.14407343684267426e-01 4.86663002465521133e-01 3.25076941711850531e-01 4.86663002465521133e-01 3.30411740725642056e-01 4.91997801479312658e-01 3.41081338753225161e-01 4.91997801479312658e-01 3.51750936780808265e-01 4.91997801479312658e-01 3.57085735794599790e-01 4.91997801479312658e-01 3.62353784698660697e-01 4.91997801479312658e-01 3.67288408664359634e-01 4.91997801479312658e-01 3.77824832082772732e-01 4.91997801479312658e-01 3.83159631096564257e-01 4.91997801479312658e-01 3.88494430110355837e-01 4.91997801479312658e-01 3.93829229124147417e-01 4.91997801479312658e-01 4.04498827151730467e-01 4.91997801479312658e-01 4.09833626165522047e-01 4.91997801479312658e-01 4.15168425179313572e-01 4.91997801479312658e-01 4.25838023206896676e-01 4.91997801479312658e-01 4.41842420248271361e-01 4.91997801479312658e-01 4.47177219262062886e-01 4.91997801479312658e-01 4.68846258542385985e-01 4.91997801479312658e-01 4.74263762570185321e-01 4.91997801479312658e-01 4.90268159611559950e-01 4.91997801479312658e-01 4.95602958625351475e-01 4.91997801479312658e-01 5.06272556652934580e-01 4.91997801479312658e-01 5.16942154680517740e-01 4.91997801479312658e-01 5.27611752708100790e-01 4.91997801479312658e-01 5.38281350735683839e-01 4.91997801479312658e-01 5.43616149749475475e-01 4.91997801479312658e-01 5.54285747777058524e-01 4.91997801479312658e-01 5.64955345804641684e-01 4.91997801479312658e-01 5.70290144818433209e-01 4.91997801479312658e-01 5.80959742846016258e-01 4.91997801479312658e-01 5.91629340873599419e-01 4.91997801479312658e-01 5.96964139887390943e-01 4.91997801479312658e-01 6.02298938901182468e-01 4.91997801479312658e-01 6.07633737914973993e-01 4.91997801479312658e-01 6.18303335942557153e-01 4.97332600493104238e-01 6.23638134956348678e-01 5.02667399506895762e-01 6.28972933970140202e-01 5.02667399506895762e-01 6.34055385008120753e-01 5.02667399506895762e-01 6.44220938304664426e-01 5.02667399506895762e-01 6.49555737318455950e-01 5.02667399506895762e-01 6.54890536332247475e-01 5.02667399506895762e-01 6.60225335346039111e-01 5.08002198520687287e-01 6.70894933373622160e-01 5.08002198520687287e-01 6.76229732387413796e-01 5.08002198520687287e-01 6.81564531401205320e-01 5.08002198520687287e-01 6.86899330414996845e-01 5.08002198520687287e-01 6.97568928442579894e-01 5.13336997534478923e-01 7.08238526470163055e-01 5.13336997534478923e-01 7.13506249763932510e-01 5.13336997534478923e-01 7.24042021961762927e-01 5.13336997534478923e-01 7.29376820975554452e-01 5.13336997534478923e-01 7.34711619989345976e-01 5.13336997534478923e-01 7.40046419003137612e-01 5.13336997534478923e-01 7.50716017030720661e-01 5.13336997534478923e-01 7.61385615058303822e-01 5.13336997534478923e-01 7.66720414072095346e-01 5.13336997534478923e-01 7.82724811113469920e-01 5.13336997534478923e-01 7.93394409141053081e-01 5.13336997534478923e-01 8.04064007168636241e-01 5.13336997534478923e-01 8.09398806182427766e-01 5.13336997534478923e-01 8.20068404210010815e-01 5.13336997534478923e-01 8.30738002237593864e-01 5.18671796548270447e-01 8.46742399278968549e-01 5.18671796548270447e-01 8.57411997306551710e-01 5.18671796548270447e-01 8.68081595334134759e-01 5.18671796548270447e-01 8.78751193361717808e-01 5.18671796548270447e-01 8.89420791389300969e-01 5.18671796548270447e-01 8.94755590403092493e-01 5.18671796548270447e-01 9.00090389416884129e-01 5.18671796548270447e-01 9.10759987444467178e-01 5.18671796548270447e-01 9.16094786458258703e-01 5.18671796548270447e-01 9.21363812193193743e-01 5.18671796548270447e-01 9.26298761769184020e-01 5.18671796548270447e-01 9.36833231525848964e-01 5.18671796548270447e-01 9.42168030539640489e-01 5.18671796548270447e-01 9.47433800171661789e-01 5.18671796548270447e-01 9.52367772916777877e-01 5.18671796548270447e-01 9.62908429268978905e-01 5.18671796548270447e-01 9.68243228282770430e-01 5.18671796548270447e-01 9.73578027296561954e-01 5.18671796548270447e-01 9.78912826310353479e-01 5.18671796548270447e-01 9.89582424337936528e-01 5.13336997534478923e-01 9.94917223351728164e-01 5.13336997534478923e-01 1.00000000000000000e+00 0 0 0 32768 13</span><br><span class="line">38</span><br><span class="line">39 0 65366 0 9 下翻页 5</span><br><span class="line">40</span><br><span class="line">41 1 1 10</span><br><span class="line">42 0 1 5 0 0 32768 13</span><br><span class="line">43</span><br><span class="line">44 4 65366 0 9 右标签 5</span><br><span class="line">45</span><br><span class="line">46 1 1 10</span><br><span class="line">47 43 1 1.62082419681129464e-01 4.95492877049528213e-01 1.63349130674664389e-01 4.95492877049528213e-01 1.65325731746997329e-01 4.95492877049528213e-01 1.67643555392080590e-01 4.95492877049528213e-01 1.77049811139247670e-01 4.95492877049528213e-01 1.87232164330074835e-01 4.98038394612870805e-01 2.08303082603590484e-01 5.01048566214438273e-01 2.37034532516587182e-01 5.04640032820744988e-01 2.82879737434040213e-01 5.08807772291934857e-01 3.35726229716921065e-01 5.13211623070720213e-01 3.92976360575494787e-01 5.17615473849505570e-01 4.50226774371525196e-01 5.22019324628290926e-01 5.11880826743248418e-01 5.22019324628290926e-01 5.77938800628121196e-01 5.22019324628290926e-01 6.39592852999844363e-01 5.22019324628290926e-01 7.05650826884717142e-01 5.22019324628290926e-01 7.62901240680747494e-01 5.22019324628290926e-01 8.11343528513022161e-01 5.22019324628290926e-01 8.59786099282753513e-01 5.22019324628290926e-01 9.08228670052484865e-01 5.22019324628290926e-01 9.46995062741381011e-01 5.22019324628290926e-01 9.68594225246509177e-01 5.22019324628290926e-01 9.87313084442683953e-01 5.22019324628290926e-01 9.95364352709833478e-01 5.22019324628290926e-01 1.00000000000000000e+00 5.22019324628290926e-01 9.97883627824069475e-01 5.22019324628290926e-01 9.95767255648138949e-01 5.22019324628290926e-01 9.83753731237709927e-01 5.22019324628290926e-01 9.57591636368780641e-01 5.22019324628290926e-01 9.17127901877289986e-01 5.22019324628290926e-01 8.55530719934358475e-01 5.22019324628290926e-01 7.80665185960643382e-01 5.17615473849505570e-01 6.92587887447479789e-01 5.08807772291934857e-01 6.04510588934316084e-01 5.00000000000000000e-01 5.07625447394853380e-01 4.86788447663643931e-01 4.10740588792847361e-01 4.82384596884858574e-01 3.18259368766534156e-01 4.77980675371709074e-01 2.38989913279669508e-01 4.77980675371709074e-01 1.64124096368497729e-01 4.77980675371709074e-01 9.80661224836250067e-02 4.77980675371709074e-01 4.96235517138936544e-02 4.77980675371709074e-01 1.64163141737518892e-02 4.82131650798590994e-01 0.00000000000000000e+00 4.82131650798590994e-01 0 0 0 32768 13</span><br><span class="line">48</span><br><span class="line">49 5 116 0 6 重开 5</span><br><span class="line">50</span><br><span class="line">51 1 1 10</span><br><span class="line">52 176 1 4.92709196580761066e-01 9.26320346300650854e-01 4.92709196580761066e-01 9.24552961525865413e-01 4.92709196580761066e-01 9.22434799251159010e-01 4.92709196580761066e-01 9.19950087379691306e-01 4.90224484709293362e-01 9.14980663636755898e-01 4.90224484709293362e-01 9.01794280749541599e-01 4.90224484709293362e-01 8.90336004049789187e-01 4.90224484709293362e-01 8.72228575293601760e-01 4.90224484709293362e-01 8.52168591279531817e-01 4.90224484709293362e-01 8.27462359852976781e-01 4.93921221561032686e-01 8.01586111819465374e-01 4.93921221561032686e-01 7.75826486309706187e-01 4.93921221561032686e-01 7.50105077803829623e-01 4.93921221561032686e-01 7.24345603948847727e-01 4.93921221561032686e-01 6.98459953319143012e-01 4.93921221561032686e-01 6.67583950587233854e-01 4.93921221561032686e-01 6.40794134175199370e-01 4.90071313384208951e-01 6.09994868760609710e-01 4.86353041554091425e-01 5.87684934470349862e-01 4.86353041554091425e-01 5.63047781794860036e-01 4.82824641505167573e-01 5.41878291429980896e-01 4.79432730755823933e-01 5.21526371969586844e-01 4.82803409836344011e-01 5.01302145831688861e-01 4.82803409836344011e-01 4.81103397696379109e-01 4.82803409836344011e-01 4.60926715331168135e-01 4.82803409836344011e-01 4.45026470203968849e-01 4.82803409836344011e-01 4.29872063271586335e-01 4.82803409836344011e-01 4.14692102509226834e-01 4.82803409836344011e-01 3.99552633572409499e-01 4.82803409836344011e-01 3.84392994550209754e-01 4.85681514200157149e-01 3.72879970475847977e-01 4.85681514200157149e-01 3.62019744390422504e-01 4.88571144327045959e-01 3.47572276202476438e-01 4.91630627804523379e-01 3.32274782987700745e-01 4.91630627804523379e-01 3.17037951683849517e-01 4.91630627804523379e-01 3.05536225890397417e-01 4.94509338787445740e-01 2.91142595148396854e-01 4.94509338787445740e-01 2.75920171048390228e-01 4.94509338787445740e-01 2.64463259241633608e-01 4.94509338787445740e-01 2.53646482249907823e-01 4.94509338787445740e-01 2.42832055907230338e-01 4.94509338787445740e-01 2.32024529856920569e-01 4.91630627804523379e-01 2.17630595805365368e-01 4.91630627804523379e-01 2.02440474172926044e-01 4.91630627804523379e-01 1.90971126674429892e-01 4.88905998075349235e-01 1.80072986894676601e-01 4.88905998075349235e-01 1.69185083812391834e-01 4.88905998075349235e-01 1.58378467690745872e-01 4.88905998075349235e-01 1.53338221166806066e-01 4.88905998075349235e-01 1.45884085552402898e-01 4.88905998075349235e-01 1.40914661809467434e-01 4.88905998075349235e-01 1.33460526195064266e-01 4.88905998075349235e-01 1.26006390580661098e-01 4.88905998075349235e-01 1.18552254966257931e-01 4.91482612741867553e-01 1.08246099609739188e-01 4.91482612741867553e-01 1.03192659120173280e-01 4.91482612741867553e-01 9.31052657799260053e-02 4.91482612741867553e-01 8.54263777855475692e-02 4.91482612741867553e-01 8.04569540426121055e-02 4.91482612741867553e-01 7.03804798463312231e-02 4.91482612741867553e-01 6.53422048344964868e-02 4.91482612741867553e-01 6.28574929630287826e-02 4.91482612741867553e-01 6.03727810915610230e-02 4.91482612741867553e-01 5.78880692200933189e-02 4.93967324613335312e-01 5.04339336056901510e-02 4.99277061676557221e-01 3.98143078244689863e-02 5.04995660019410320e-01 2.83771111387628450e-02 5.10413071974523236e-01 2.02509173787048247e-02 5.15564481450232148e-01 1.25239548199186923e-02 5.18082557372708363e-01 4.96942374293546374e-03 5.20567269244176067e-01 0.00000000000000000e+00 5.20567269244176067e-01 2.25950452716050521e-03 5.20567269244176067e-01 4.51893322693236454e-03 5.20567269244176067e-01 1.19730688413355324e-02 5.20567269244176067e-01 2.93307922058846926e-02 5.20567269244176067e-01 4.53460674816745790e-02 5.17206599378958520e-01 6.88711356751409154e-02 5.13504706264790611e-01 9.47846149564822715e-02 5.10122804730749446e-01 1.11694274281465333e-01 5.10122804730749446e-01 1.30931227819067075e-01 5.10122804730749446e-01 1.43047155460629793e-01 5.07407880907323250e-01 1.53906699099557343e-01 5.07407880907323250e-01 1.61619709418830859e-01 5.07407880907323250e-01 1.69073845033234027e-01 5.07407880907323250e-01 1.79317139484557242e-01 5.07407880907323250e-01 1.86999667193591179e-01 5.07407880907323250e-01 1.94453802807994347e-01 5.07407880907323250e-01 2.04665856375191468e-01 5.07407880907323250e-01 2.18989953401794835e-01 5.07407880907323250e-01 2.34180075034234159e-01 5.07407880907323250e-01 2.49321818792711203e-01 5.07407880907323250e-01 2.64463031759467615e-01 5.07407880907323250e-01 2.79601211630677859e-01 5.07407880907323250e-01 2.98758546410191173e-01 5.07407880907323250e-01 3.18950849217465138e-01 5.10616895995229525e-01 3.34996227966551319e-01 5.10616895995229525e-01 3.54166074265192754e-01 5.13820148201598048e-01 3.70182107814869266e-01 5.13820148201598048e-01 3.85403242849268746e-01 5.13820148201598048e-01 4.00561516978472698e-01 5.13820148201598048e-01 4.12074692707611767e-01 5.13820148201598048e-01 4.22846200748310141e-01 5.13820148201598048e-01 4.37120024216234859e-01 5.13820148201598048e-01 4.48615532163817166e-01 5.13820148201598048e-01 4.62931970624166356e-01 5.13820148201598048e-01 4.74345888301555219e-01 5.13820148201598048e-01 4.82033648100406387e-01 5.13820148201598048e-01 4.92270421396305224e-01 5.13820148201598048e-01 5.06599371375782592e-01 5.13820148201598048e-01 5.18036947198431963e-01 5.13820148201598048e-01 5.25694906833541475e-01 5.13820148201598048e-01 5.35902334930030699e-01 5.11100371425297850e-01 5.46781593690008672e-01 5.11100371425297850e-01 5.57688301964680111e-01 5.08385447601871654e-01 5.68547769776219014e-01 5.08385447601871654e-01 5.79456449562995357e-01 5.08385447601871654e-01 5.90302647581519513e-01 5.08385447601871654e-01 6.04568205864080777e-01 5.08385447601871654e-01 6.19699712925089297e-01 5.05493694308100427e-01 6.31267029409728453e-01 5.05493694308100427e-01 6.42124298226996348e-01 5.05493694308100427e-01 6.56431561573318278e-01 5.02601941014329312e-01 6.67999029712734727e-01 5.00000758273886570e-01 6.75802729588840356e-01 4.97413831082511027e-01 6.86149831735233251e-01 4.94676159042488128e-01 6.97100974859656830e-01 4.94676159042488128e-01 7.04853263766253901e-01 4.94676159042488128e-01 7.12307399380657014e-01 4.94676159042488128e-01 7.22521803596902545e-01 4.94676159042488128e-01 7.33310827764380280e-01 4.94676159042488128e-01 7.40981829710338658e-01 4.94676159042488128e-01 7.48435965324741770e-01 4.94676159042488128e-01 7.58673269412361240e-01 4.94676159042488128e-01 7.63718672198729687e-01 4.94676159042488128e-01 7.71172807813132799e-01 4.94676159042488128e-01 7.76142231556068207e-01 4.94676159042488128e-01 7.83596367170471431e-01 4.94676159042488128e-01 7.88565790913406839e-01 4.94676159042488128e-01 7.96019926527810062e-01 4.94676159042488128e-01 8.00989350270745470e-01 4.94676159042488128e-01 8.03474062142213175e-01 4.92191447171020424e-01 8.10928197756616398e-01 4.92191447171020424e-01 8.18382333371019621e-01 4.92191447171020424e-01 8.23351757113955030e-01 4.92191447171020424e-01 8.28321180856890438e-01 4.89706735299552665e-01 8.33290604599825846e-01 4.89706735299552665e-01 8.38260028342761254e-01 4.89706735299552665e-01 8.45714163957164478e-01 4.87222023428084960e-01 8.50683587700099997e-01 4.84737311556617256e-01 8.58137723314503109e-01 4.84737311556617256e-01 8.63107147057438517e-01 4.84737311556617256e-01 8.68076570800374037e-01 4.84737311556617256e-01 8.73045994543309445e-01 4.82252599685149497e-01 8.80500130157712668e-01 4.82252599685149497e-01 8.85469553900648076e-01 4.82252599685149497e-01 8.92923689515051189e-01 4.82252599685149497e-01 8.97893113257986708e-01 4.82252599685149497e-01 9.05347248872389931e-01 4.82252599685149497e-01 9.10316672615325340e-01 4.82252599685149497e-01 9.20411269557494860e-01 4.82252599685149497e-01 9.25458643855968321e-01 4.82252599685149497e-01 9.32912779470371545e-01 4.82252599685149497e-01 9.37882203213306953e-01 4.82252599685149497e-01 9.45336338827710065e-01 4.82252599685149497e-01 9.50305762570645474e-01 4.82252599685149497e-01 9.57759898185048697e-01 4.82252599685149497e-01 9.62729321927984216e-01 4.82252599685149497e-01 9.67698745670919624e-01 4.82252599685149497e-01 9.70183457542387329e-01 4.82252599685149497e-01 9.75152881285322737e-01 4.82252599685149497e-01 9.80122305028258145e-01 4.82252599685149497e-01 9.82607016899725960e-01 4.82252599685149497e-01 9.90061152514129184e-01 4.82252599685149497e-01 9.92545864385596888e-01 4.82252599685149497e-01 9.95030576257064592e-01 4.82252599685149497e-01 1.00000000000000000e+00 0 0 0 32768 13</span><br><span class="line">53</span><br><span class="line">54 0 65367 0 6 底部 5</span><br><span class="line">55</span><br><span class="line">56 1 1 10</span><br><span class="line">57 0 1 9 0 0 32768 13</span><br><span class="line">58</span><br><span class="line">59 4 99 0 6 复制 5</span><br><span class="line">60</span><br><span class="line">61 1 1 10</span><br><span class="line">62 38 1 1.00000000000000000e+00 4.79926360873404900e-01 9.97735396569809252e-01 4.79926360873404900e-01 9.95534327244338435e-01 4.79926360873404900e-01 9.90456557626130385e-01 4.79926360873404900e-01 9.77106027728452675e-01 4.79926360873404900e-01 9.48340264490928342e-01 4.83522081278095428e-01 9.20852776448124244e-01 4.87448876352869653e-01 8.89443064686861296e-01 4.87448876352869653e-01 8.56507914567393946e-01 4.91565731377495319e-01 8.23601277314435110e-01 4.95679099774422927e-01 7.85037625361698854e-01 4.95679099774422927e-01 7.45010519543168104e-01 4.95679099774422927e-01 6.99364054603998864e-01 4.95679099774422927e-01 6.46493142113240382e-01 4.95679099774422927e-01 5.98373960810614558e-01 4.95679099774422927e-01 5.40630912255217422e-01 4.95679099774422927e-01 4.82744369599891643e-01 4.95679099774422927e-01 4.34524618458331013e-01 4.95679099774422927e-01 3.86622847762832456e-01 4.95679099774422927e-01 3.39092829060561485e-01 4.95679099774422927e-01 2.91763485152467139e-01 4.95679099774422927e-01 2.50419208870228838e-01 4.95679099774422927e-01 2.10373662665206129e-01 5.00128579081442481e-01 1.81574427801780403e-01 5.04242799765140748e-01 1.44687301407497360e-01 5.08341369364505580e-01 1.15717764151175850e-01 5.16618391077828143e-01 8.89829228074573986e-02 5.16618391077828143e-01 7.17067600442383157e-02 5.20073639126595100e-01 5.61471028370766900e-02 5.20073639126595100e-01 4.07475205815632791e-02 5.20073639126595100e-01 3.24340054983344173e-02 5.20073639126595100e-01 2.48173510710222867e-02 5.20073639126595100e-01 1.97395814528142366e-02 5.20073639126595100e-01 1.46618118346061865e-02 5.20073639126595100e-01 9.58404221639808096e-03 5.17534754317491075e-01 4.50627259819003090e-03 5.17534754317491075e-01 2.08639801451271367e-03 5.17534754317491075e-01 0.00000000000000000e+00 5.17534754317491075e-01 0 0 0 32768 13</span><br><span class="line">63</span><br><span class="line">64 8 65361 0 6 后退 5</span><br><span class="line">65</span><br><span class="line">66 1 1 10</span><br><span class="line">67 109 1 0.00000000000000000e+00 4.78727586979817654e-01 2.69227964974255718e-03 4.78727586979817654e-01 5.37469605243845461e-03 4.78727586979817654e-01 1.17119289784325398e-02 4.78727586979817654e-01 1.80491619044266804e-02 4.78727586979817654e-01 2.43863948304208211e-02 4.78727586979817654e-01 3.72296962642081342e-02 4.78727586979817654e-01 4.36514436796022753e-02 4.81938460687514725e-01 5.31572930685934586e-02 4.81938460687514725e-01 6.26631424575846419e-02 4.81938460687514725e-01 7.21689918465758251e-02 4.81938460687514725e-01 8.16748412355670084e-02 4.85107077150511823e-01 9.47836767516111456e-02 4.85107077150511823e-01 1.04581168817982684e-01 4.85107077150511823e-01 1.14087018206973867e-01 4.88275693613508865e-01 1.27190051812990534e-01 4.88275693613508865e-01 1.37024676103537801e-01 4.91553869477524441e-01 1.46530525492528985e-01 4.91553869477524441e-01 1.56036374881520168e-01 4.91553869477524441e-01 1.65542224270511351e-01 4.94722485940521539e-01 1.83030728269284459e-01 4.98220264099076493e-01 1.97700664376717239e-01 4.98220264099076493e-01 2.11487162983968746e-01 4.98220264099076493e-01 2.21244428474149879e-01 4.98220264099076493e-01 2.34325028028060378e-01 4.98220264099076493e-01 2.48106885107289898e-01 4.98220264099076493e-01 2.61887388407513022e-01 4.98220264099076493e-01 2.68322673612971241e-01 4.98220264099076493e-01 2.77828523001962369e-01 4.98220264099076493e-01 2.84165755927956509e-01 4.98220264099076493e-01 2.93671605316947693e-01 5.01388880562073536e-01 3.00008838242941833e-01 5.01388880562073536e-01 3.12879602050859185e-01 5.01388880562073536e-01 3.22739561348526327e-01 5.04675565894129430e-01 3.29076794274520468e-01 5.04675565894129430e-01 3.38582643663511651e-01 5.04675565894129430e-01 3.44919876589505736e-01 5.04675565894129430e-01 3.54425725978496975e-01 5.04675565894129430e-01 3.60762958904491060e-01 5.04675565894129430e-01 3.70268808293482299e-01 5.04675565894129430e-01 3.73437424756479341e-01 5.04675565894129430e-01 3.79774657682473427e-01 5.04675565894129430e-01 3.82943274145470525e-01 5.04675565894129430e-01 3.92449123534461708e-01 5.04675565894129430e-01 4.01954972923452891e-01 5.04675565894129430e-01 4.11460822312444074e-01 5.04675565894129430e-01 4.24504869833181531e-01 5.04675565894129430e-01 4.38326179900597801e-01 5.04675565894129430e-01 4.48135469184025192e-01 5.04675565894129430e-01 4.61280276542239576e-01 5.01389364054575903e-01 4.75165601016958816e-01 5.01389364054575903e-01 4.88940495804155384e-01 5.01389364054575903e-01 4.95368625320579681e-01 5.01389364054575903e-01 5.04874474709570920e-01 5.01389364054575903e-01 5.11211707635565005e-01 5.01389364054575903e-01 5.24087112971504343e-01 5.01389364054575903e-01 5.38002220584364532e-01 5.04868189307041138e-01 5.44445821860862100e-01 5.04868189307041138e-01 5.57312717728761120e-01 5.04868189307041138e-01 5.71208872435531534e-01 5.08342179634483582e-01 5.81063610014174059e-01 5.08342179634483582e-01 5.94103402800891356e-01 5.08342179634483582e-01 6.07855476741979928e-01 5.08342179634483582e-01 6.17697643515563000e-01 5.11622869659511093e-01 6.27203492904554127e-01 5.14791486122508135e-01 6.40452541246261831e-01 5.18103796557185303e-01 6.54329162855939894e-01 5.18103796557185303e-01 6.64086234949120113e-01 5.18103796557185303e-01 6.73592084338111352e-01 5.21272413020182346e-01 6.83097933727102480e-01 5.21272413020182346e-01 6.89435166653096676e-01 5.21272413020182346e-01 6.98941016042087804e-01 5.21272413020182346e-01 7.05278248968082000e-01 5.21272413020182346e-01 7.11615481894076085e-01 5.21272413020182346e-01 7.21121331283067324e-01 5.21272413020182346e-01 7.30627180672058452e-01 5.21272413020182346e-01 7.36964413598052537e-01 5.18103796557185303e-01 7.46470262987043776e-01 5.18103796557185303e-01 7.49638879450040818e-01 5.18103796557185303e-01 7.55976112376034903e-01 5.18103796557185303e-01 7.65481961765026142e-01 5.18103796557185303e-01 7.82800663196995483e-01 5.18103796557185303e-01 7.97446231282312956e-01 5.18103796557185303e-01 8.07242949760680895e-01 5.18103796557185303e-01 8.20273072697352390e-01 5.18103796557185303e-01 8.30065149647698286e-01 5.18103796557185303e-01 8.39570999036689525e-01 5.18103796557185303e-01 8.49076848425680764e-01 5.18103796557185303e-01 8.58582697814671891e-01 5.18103796557185303e-01 8.64919930740666087e-01 5.18103796557185303e-01 8.71257163666660173e-01 5.18103796557185303e-01 8.77594396592654258e-01 5.18103796557185303e-01 8.83931629518648343e-01 5.18103796557185303e-01 8.93437478907639582e-01 5.18103796557185303e-01 9.02943328296630821e-01 5.18103796557185303e-01 9.12449177685621948e-01 5.18103796557185303e-01 9.29922016527320983e-01 5.14609209449145344e-01 9.36703288967416725e-01 5.11218573229097473e-01 9.46209138356407853e-01 5.11218573229097473e-01 9.52546371282402049e-01 5.11218573229097473e-01 9.58883604208396134e-01 5.11218573229097473e-01 9.62052220671393177e-01 5.11218573229097473e-01 9.68389453597387262e-01 5.11218573229097473e-01 9.71520164248204976e-01 5.11218573229097473e-01 9.74651068296023437e-01 5.08087765879779441e-01 9.80988301222017633e-01 5.08087765879779441e-01 9.90494150611008761e-01 5.08087765879779441e-01 9.93662767074005915e-01 5.08087765879779441e-01 1.00000000000000000e+00 5.08087765879779441e-01 0 0 0 32768 13</span><br><span class="line">68</span><br><span class="line">69 8 65363 0 6 前进 6 默认 0 0 0 1 1 0 0 14 0 5 45 5 30 5 15 5 50 5 35 5 10 5 25 5 0 5 5 5 40 5 55 5 20 5 65 5 60</span><br></pre></td></tr></tbody></table></figure></div><p><a href="preferences-0.5.5">~/.easystroke/preferences-0.5.5</a>:</p><div class="hide_code"><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">22 serialization::archive 15 0 18 0 0 0 0 1 4</span><br><span class="line">0 3 0 0 0 0 0 16 0 0 0 0 192 0 0 0 250 250 6 1 1 0 0 0 0 0 0 30069 20560 31611 65535 5 0 0 2 4</span><br><span class="line">1 8 0 0 0</span><br><span class="line">2 9 0 0 0 1 1 2.00000000000000000e+00 1 1 0 0 0 0 0 0</span><br></pre></td></tr></tbody></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Chrome </tag>
            
            <tag> vim </tag>
            
            <tag> shell </tag>
            
            <tag> Easystroke </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Xbindkeys 设置全局快捷键/一键切换输入法</title>
      <link href="/2022/03/27/set-global-keybindings-via-xbindkeys/"/>
      <url>/2022/03/27/set-global-keybindings-via-xbindkeys/</url>
      
        <content type="html"><![CDATA[<blockquote><p>就像在 <a href="https://github.com/debuggerx01/dde_gesture_manager#faq">DDE手势管理器：FAQ</a> 中提到的，我对与电脑的交互方式一直有比较高的要求，毕竟工作加上生活娱乐，有太多太多的时间要花在电脑上了，符合个人习惯的操作方式可以极大地提高效率并缓解疲劳。除了触摸板手势和鼠标手势之外，我还有一些习惯的个人向系统快捷键设置，其中很重要使用频率极高的快捷键就是：通过单击键盘右侧的 Shift 按键切换输入法。</p></blockquote><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>切换中英文输入法是一个使用频率极高的操作，尤其是在写代码和文档的时候。一般来说，默认的切换方式有两种：</p><ol><li>使用 Ctrl + Shift 组合键，这是最符合一般习惯的。但是由于需要使用左手的小拇指和无名指以略微扭曲的姿势去按，所以长时间频繁使用会比较容易造成疲劳，而且需要按两个键的组合键，相比于按下一个键总归要多花一点点时间，这在高速打字或者需要尽快跟随思路编写代码的时候，这一点点的差别就可能会让人感觉到不爽。</li><li>使用中文输入法自带的方式切换中英文模式，比如搜狗输入法中可以选择切换中英文模式的快捷键：<br> <img src="/2022/03/27/set-global-keybindings-via-xbindkeys/sogou.webp" alt="sogou"><br>但是搜狗输入法给出的选项是同时对左右两侧的 Ctrl / Shift 键生效的，而我只希望右侧的 Shift 键响应中英文的切换，因为正常来说一般打字的时候是左手的使用压力比较大，左侧功能键使用的频率很高，而右侧功能键用得相对少一点，用右侧 Shift 键切换输入法可以更好地平衡左右手的疲劳程度；另外，写代码的时候经常需要按住左侧 Shift 键临时输入大写英文字母，有时会在下意识按下 Shift 键后思路跟上来发现接下来并不需要大写字母，此时松开 Shift 键，输入法却切换到中文了，还需要再按一次切换回英文，然后就会因为节奏被打断而恼火——所以我喜欢的模式是，左侧 Shift 键只响应按住时输入大写字母的操作，切换中英文操作则交给右侧 Shift 。</li></ol><p>综上，之前我一直是关闭搜狗本身的切换快捷键，使用 <a href="https://fcitx-im.org/wiki/Fcitx_5/zh-cn">Fcitx</a> (搜狗输入法的 Linux 版是基于 Fcitx 框架的) 的设置项：<br><img src="/2022/03/27/set-global-keybindings-via-xbindkeys/fcitx.webp" alt="fcitx"></p><p>即可实现想要的效果——但是，最新的 Deepin/UOS 系统为了更好地做到符合国人使用习惯的开箱即用，将输入法的设置限制在只能在系统设置模块里调整，fcitx 本身的设置不再生效：<br><img src="/2022/03/27/set-global-keybindings-via-xbindkeys/dde.webp" alt="dde"></p><p>而这里又不允许将切换快捷键设置为 Shift_R 单个按键，于是我不得不寻找一种更为通用的替代方案。</p><p>在经过一些摸索之后，找到了 <a href="https://wiki.archlinux.org/title/Xbindkeys">Xbindkeys</a> 这个工具，可以通过全局绑定快捷键的方式实现想要的效果。 Xbindkeys 是一个允许将命令绑定到键盘上的某些键或组合键的程序，可以独立于窗口管理器和桌面环境工作，所以不论在使用的是什么发行版的 Linux，使用的是什么桌面环境，都可以使用这个程序实现统一的效果。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>xbindkey被包含在大多数GNU/Linux发行版中，所以只需：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xbindkeys</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一个图形化的配置工具，可以简化配置操作，而不用手动编写配置文件</span></span><br><span class="line">sudo apt install xbindkeys-config</span><br></pre></td></tr></tbody></table></figure><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>初次使用前需要先执行如下命令生成默认配置文件：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xbindkeys --defaults &gt; ~/.xbindkeysrc</span><br></pre></td></tr></tbody></table></figure><p>否则在使用 <code>xbindkeys-config</code> 工具编辑配置的时候会报如下错误：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Error : ~/.xbindkeysrc not found or reading not allowed.</span><br><span class="line">please, create one with 'xbindkeys --defaults &gt; ~/.xbindkeysrc'.</span><br><span class="line">or, if you want scheme configuration style,</span><br><span class="line">with 'xbindkeys --defaults-guile &gt; ~/.xbindkeysrc.scm'.</span><br><span class="line">段错误</span><br></pre></td></tr></tbody></table></figure><h2 id="使用-xbindkeys-config-进行配置"><a href="#使用-xbindkeys-config-进行配置" class="headerlink" title="使用 xbindkeys-config 进行配置"></a>使用 xbindkeys-config 进行配置</h2><h3 id="打开图形化配置工具"><a href="#打开图形化配置工具" class="headerlink" title="打开图形化配置工具"></a>打开图形化配置工具</h3><p>直接在终端中输入运行：<code>xbindkeys-config</code>，即可看到如下界面：<br><img src="/2022/03/27/set-global-keybindings-via-xbindkeys/config.webp" alt="config"></p><h3 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h3><ol><li><p>点击左侧下方的 <code>New</code> 按钮增加一条配置</p></li><li><p>在右侧 <code>Name</code> 栏中输入该条配置的名称</p></li><li><p>点击 <code>Get Key</code> 按钮，将会弹出如上图中间左侧的窗口 <code>XBindKey: Hit a key</code></p></li><li><p>鼠标点击一下这个弹出的窗口，确保其拥有输入焦点</p></li><li><p>按下想要绑定的快捷键，以我想绑定的右侧 Shift 为例，在 <code>Get Key</code> 按钮上面的<code>Key</code>输入框中会自动填入如下代码：<br><code>Shift+Mod2 + Shift_R | m:0x11 + c:62</code><br> 经测试，绑定单个按键并不需要前面的修饰按键，所以只需要保留 <code>Shift_R</code> 即可</p></li><li><p>在 <code>Action</code> 栏中输入想要触发的操作，以切换输入法为例，可以通过 <a href="https://www.semicomplete.com/projects/xdotool/">xdotool</a> 模拟发送 Ctrl + Shift 快捷键，所以填入如下代码：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xdotool keyup Shift_R &amp;&amp; xdotool key Ctrl+Shift</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意需要先用 <code>xdotool keyup Shift_R，</code> 释放我们实际按下的右 Shift 键，否则的话，系统接收到的组合键就变成了 Ctrl+Shift+Shift_R，无法完成输入法的切换</p></blockquote></li><li><p>点击 <code>Apply</code> 按钮应用配置，即可测试效果</p></li></ol><h1 id="额外内容"><a href="#额外内容" class="headerlink" title="额外内容"></a>额外内容</h1><h2 id="xbindkeys-如何实现的开机自启"><a href="#xbindkeys-如何实现的开机自启" class="headerlink" title="xbindkeys 如何实现的开机自启"></a>xbindkeys 如何实现的开机自启</h2><p>安装配置好后，发现重启后配置仍然生效，查看系统进程可以发现开机后 <code>xbindkeys</code> 进程会自动启动，但是通过 <code>systemctl list-unit-files | grep xbindkeys</code> 发现并没有注册开机启动服务，那么它是如何实现开机自启的呢？</p><p>查找后发现，xbindkeys安装后会在 <code>/etc/xdg/autostart</code> 目录下写入 <code>xbindkeys.desktop</code> 这个文件，从而实现的开机自启，这种方式与 Windows 中将程序的快捷方式放入 <code>启动</code> 文件夹下实现开机自启的方式类似。</p><p>另外，可以将desktop 文件放进 <code>~/.config/autostart</code> 这个目录下，以单独为当前用户配置开机自启的程序</p><h2 id="修改搜狗输入法的输入框配色"><a href="#修改搜狗输入法的输入框配色" class="headerlink" title="修改搜狗输入法的输入框配色"></a>修改搜狗输入法的输入框配色</h2><p>搜狗输入法默认的配色在暗色主题下不是很好看。参考<a href="https://pinyin.sogou.com/skins/detail/view/info/526130">星空黑</a>这个皮肤的配色，打开搜狗的外观配置页面：<br><img src="/2022/03/27/set-global-keybindings-via-xbindkeys/color.webp" alt="color"><br>将颜色分别设置为：</p><ul><li>拼音串颜色：            #EEEEEE</li><li>第一候选颜色：        #36ABBF</li><li>非第一候选颜色：    #EEEEEE</li></ul><p>字体设置为： 18</p><p>效果：<br><img src="/2022/03/27/set-global-keybindings-via-xbindkeys/skin.webp" alt="skin"></p>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> xbindkeys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 使用技巧杂记</title>
      <link href="/2022/02/10/docker-tips-and-tricks/"/>
      <url>/2022/02/10/docker-tips-and-tricks/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一些使用 Docker 的经验和技巧，备忘 <span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><h1 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h1><h2 id="Docker-镜像加速"><a href="#Docker-镜像加速" class="headerlink" title="Docker 镜像加速"></a>Docker 镜像加速</h2><p>尝试过各种国内镜像，最终发现还是阿里云的最快，这与 <a href="https://blog.csdn.net/CSDN_duomaomao/article/details/73161076" title="【测速】使用不同的Docker镜像加速器下载速度 对比测试">【测速】使用不同的Docker镜像加速器下载速度 对比测试</a> 这篇博客中的测试结果一致。由于阿里云会为每个用户分配独立的加速器地址，建议有阿里云账号的还是用自己的地址，查看方式是，登录阿里云账号后进入控制台，然后【容器镜像服务】-&gt;【镜像工具】-&gt;【镜像加速器】查看：<br><img src="/2022/02/10/docker-tips-and-tricks/aliyun_mirrors.webp" alt="aliyun_mirrors"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">{</span><br><span class="line">  "registry-mirrors": ["https://xxxxxx.mirror.aliyuncs.com"]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></tbody></table></figure><script>    let _time;    const img = document.querySelector('[alt="aliyun_mirrors"]').parentElement;    img.parentElement.onclick = (evt) => {        evt.preventDefault();    };    img.onpointerdown = () => {        _time = Date.now();    };    img.onpointerup = () => {        if (Date.now() - _time > 1000) {            const lines = document.querySelectorAll('.line');            for (const line of lines) {                if (line.innerText.includes('xxxxxx')) {                    line.innerText = line.innerText.replace('xxxxxx', 'q5xwweps');                    break;                }            }        }    }</script><h2 id="镜像内-apt-更换为清华源"><a href="#镜像内-apt-更换为清华源" class="headerlink" title="镜像内 apt 更换为清华源"></a>镜像内 apt 更换为清华源</h2><blockquote><p>编写 Docker 文件的时候，经常需要在基础镜像的基础上通过包管理安装额外的软件。基于 debian 的基础镜像通过默认源安装阮建师速度会慢得令人发指，替换成国内源则可以大幅提速。个人经验清华源在速度、仓库丰富度、更新及时性多个方面都是较为优秀的：<br><a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">Debian 镜像使用帮助</a></p></blockquote><p>通过在 <code>Dockerfile</code> 中加入如下命令即可：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN apt install apt-transport-https ca-certificates &amp;&amp; sed -i 's|deb.debian.org|mirrors.ustc.edu.cn|g' /etc/apt/sources.list</span><br></pre></td></tr></tbody></table></figure><h1 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h1><h2 id="Watchtower-–-自动更新-Docker-镜像与容器"><a href="#Watchtower-–-自动更新-Docker-镜像与容器" class="headerlink" title="Watchtower – 自动更新 Docker 镜像与容器"></a>Watchtower – 自动更新 Docker 镜像与容器</h2><p><a href="https://containrrr.dev/watchtower/">Quick Start</a></p><ul><li>监控更新所有容器：  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower</span><br></pre></td></tr></tbody></table></figure></li><li>只更新某个容器一次  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --run-once portainer</span><br></pre></td></tr></tbody></table></figure></li><li>只监控更新指定容器  <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --label-enable</span><br></pre></td></tr></tbody></table></figure>  然后需要被监控的容器运行命令中加入 <code>--label='com.centurylinklabs.watchtower.enable=true'</code></li></ul><h2 id="dive-查看镜像层级和文件目录"><a href="#dive-查看镜像层级和文件目录" class="headerlink" title="dive - 查看镜像层级和文件目录"></a>dive - 查看镜像层级和文件目录</h2><p><a href="https://github.com/wagoodman/dive">A tool for exploring each layer in a docker image</a></p><p>用法：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive:latest [image]:[tag]</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/2020071111274796.png" alt="dive"></p><h1 id="构建镜像瘦身"><a href="#构建镜像瘦身" class="headerlink" title="构建镜像瘦身"></a>构建镜像瘦身</h1><ul><li><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">编写 Dockerfile 的最佳实践</a></li><li><a href="https://registry.hub.docker.com/_/dart">Dart - Image documentation</a></li><li><a href="https://zhuanlan.zhihu.com/p/153460341">两个奇技淫巧，将 Docker 镜像体积减小 99%</a></li><li><a href="https://www.cnblogs.com/ryanyangcs/p/12908986.html?spm=a2c6h.12873639.0.0.5b317602VYcIfO">Docker 镜像制作教程：针对不同语言的精简策略</a></li></ul><h1 id="将容器作为程序运行"><a href="#将容器作为程序运行" class="headerlink" title="将容器作为程序运行"></a>将容器作为程序运行</h1><h2 id="dart"><a href="#dart" class="headerlink" title="dart"></a>dart</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it -v ${PWD}:/runner --workdir /runner dart:stable dart --version</span><br><span class="line"></span><br><span class="line">alias dart="docker run --rm -it -v ${PWD}:/runner --workdir /runner dart:stable dart"</span><br></pre></td></tr></tbody></table></figure><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile:"></a>Dockerfile:</h3><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.4</span>-cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt install apt-transport-https ca-certificates &amp;&amp; sed -i <span class="string">'s|deb.debian.org|mirrors.ustc.edu.cn|g'</span> /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="language-bash">        libfreetype6-dev \</span></span><br><span class="line"><span class="language-bash">        libjpeg62-turbo-dev \</span></span><br><span class="line"><span class="language-bash">        libpng-dev \</span></span><br><span class="line"><span class="language-bash">        librabbitmq-dev \</span></span><br><span class="line"><span class="language-bash">        libssh-dev \</span></span><br><span class="line"><span class="language-bash">        zip \</span></span><br><span class="line"><span class="language-bash">        unzip \</span></span><br><span class="line"><span class="language-bash">        zlib1g-dev \</span></span><br><span class="line"><span class="language-bash">        libzip-dev \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; docker-php-ext-configure gd --with-freetype --with-jpeg \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; docker-php-ext-install -j$(<span class="built_in">nproc</span>) gd \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; docker-php-ext-install bcmath \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; docker-php-ext-install zip \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; docker-php-ext-install sockets</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pecl install redis-5.3.1 \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; pecl install mongodb-1.7.5 \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; pecl install xdebug-2.8.1 \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; pecl install amqp \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; docker-php-ext-enable redis mongodb xdebug amqp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">"xdebug.enable=1"</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">"xdebug.remote_enable=1"</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">"xdebug.idekey=PHPSTORM"</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">"xdebug.remote_host=172.17.0.1"</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">"xdebug.remote_port=9000"</span> &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br></pre></td></tr></tbody></table></figure><h3 id="构建、运行"><a href="#构建、运行" class="headerlink" title="构建、运行"></a>构建、运行</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t php-runner .</span><br><span class="line">docker run --name="php-runner" -it --rm php-runner /bin/bash</span><br></pre></td></tr></tbody></table></figure><h3 id="PhpStorm-配置"><a href="#PhpStorm-配置" class="headerlink" title="PhpStorm 配置"></a>PhpStorm 配置</h3><p>首先在如下设置页面选择新增来自 Docker 的解释器<br><img src="/2022/02/10/docker-tips-and-tricks/ps1.webp" alt="ps1"><br>然后在弹框中选择 Docker，再在下拉框中选择编译好的 <code>php-runner</code> 镜像<br><img src="/2022/02/10/docker-tips-and-tricks/ps2.webp" alt="ps2"><br>运行或调试代码前选择这个解释器，效果如下图所示，可以看到断点调试工作正常<br><img src="/2022/02/10/docker-tips-and-tricks/ps3.webp" alt="ps3"></p><h1 id="利用-docker-compose-跑服务"><a href="#利用-docker-compose-跑服务" class="headerlink" title="利用 docker-compose 跑服务"></a>利用 docker-compose 跑服务</h1><h2 id="Piwigo"><a href="#Piwigo" class="headerlink" title="Piwigo"></a>Piwigo</h2><p><a href="https://cn.piwigo.org/">Piwigo - 管理您的图像收藏</a></p><p><code>docker-compose.yml</code>:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2.1"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">piwigo_mysql</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> [<span class="string">password</span>]</span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">piwigo</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">debuggerx</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> [<span class="string">password</span>]</span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/hd500/db:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3306:3306"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynet</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">piwigo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lscr.io/linuxserver/piwigo</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">piwigo</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/hd500/config:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/hd500/gallery:/gallery</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynet</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mynet:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Files-Gallery"><a href="#Files-Gallery" class="headerlink" title="Files Gallery"></a>Files Gallery</h2><p><a href="https://www.files.gallery/">Files Gallery</a><br><a href="https://tinyfilemanager.github.io/">Tiny File Manager</a><br><a href="https://stackify.dev/147027-how-to-deal-with-permissions-using-docker-nginx-php-fpm">How to deal with permissions using docker - nginx / php-fpm</a><br><a href="https://github.com/debuggerx01/docker_gallery_with_manager">一键部署的相册和文件管理器：docker_gallery_with_manager</a></p>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDE手势管理器-更新日志</title>
      <link href="/2022/01/21/dgm-changelog/"/>
      <url>/2022/01/21/dgm-changelog/</url>
      
        <content type="html"><![CDATA[<h1 id="v1-0-2"><a href="#v1-0-2" class="headerlink" title="[v1.0.2]"></a>[v1.0.2]</h1><ol><li>修复内置命令不生效的问题。</li></ol><ul><li>发布地址: <a href="https://github.com/debuggerx01/dde_gesture_manager/releases/tag/1.0.3">v1.0.3</a></li><li>本站下载: <a href="https://www.debuggerx.com/raw_assets/bin/com.debuggerx.dde-gesture-manager_1.0.3.3_amd64.deb">com.debuggerx.dde-gesture-manager_1.0.3.3_amd64.deb</a></li></ul><h1 id="v1-0-2-1"><a href="#v1-0-2-1" class="headerlink" title="[v1.0.2]"></a>[v1.0.2]</h1><ol><li>修复删除最后一个本地方案配置时触发的程序内部错误；</li><li>修复退出单个手势编辑模式时，若手势配置不正确则会出现编辑界面清空的错误。</li></ol><ul><li>发布地址: <a href="https://github.com/debuggerx01/dde_gesture_manager/releases/tag/1.0.2">v1.0.2</a></li><li>本站下载: <a href="https://www.debuggerx.com/raw_assets/bin/com.debuggerx.dde-gesture-manager_1.0.2.2_amd64.deb">com.debuggerx.dde-gesture-manager_1.0.2.2_amd64.deb</a></li></ul><h1 id="v1-0-1"><a href="#v1-0-1" class="headerlink" title="[v1.0.1]"></a>[v1.0.1]</h1><ol><li>加入软件启动时读取公告并显示的功能</li><li>修复点击 markdown 预览界面中的文字部分无法进入编辑模式的问题</li><li>接入 <a href="https://sentry.io/">Sentry</a> 异常收集平台</li></ol><ul><li>发布地址: <a href="https://github.com/debuggerx01/dde_gesture_manager/releases/tag/1.0.1">v1.0.1</a></li><li>本站下载: <a href="https://www.debuggerx.com/raw_assets/bin/com.debuggerx.dde-gesture-manager_1.0.1.1_amd64.deb">com.debuggerx.dde-gesture-manager_1.0.1.1_amd64.deb</a></li></ul><h1 id="v1-0-0"><a href="#v1-0-0" class="headerlink" title="[v1.0.0]"></a>[v1.0.0]</h1><ol><li>正式使用生产服务器作为数据源</li><li>完成 Deepin/UOS 应用商店规范的 deb 打包</li></ol><ul><li>发布地址: <a href="https://github.com/debuggerx01/dde_gesture_manager/releases/tag/1.0.0">v1.0.0</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> flutter </tag>
            
            <tag> deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDE手势管理器-说明手册</title>
      <link href="/2022/01/21/dgm-manual/"/>
      <url>/2022/01/21/dgm-manual/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>DDE手势管理器是专为 <a href="https://www.deepin.org/zh/dde/">DDE</a> 桌面环境打造的触摸板手势管理工具（缩写：dgm），客户端使用 <a href="https://flutter.dev/">Flutter</a> 构建，支持如下功能：</p><ul><li>创建、编辑、删除本地手势配置方案</li><li>将选定手势方案应用到系统中</li><li>注册登陆后可以上传、分享自己创建的配置方案</li><li>可以下载、点赞他人分享的配置方案</li><li>贴合 DDE 的 UI 设计风格，支持系统主题切换和活动色</li><li>支持多语言</li></ul><h1 id="使用入门"><a href="#使用入门" class="headerlink" title="使用入门"></a>使用入门</h1><p>您可以通过以下方式运行或关闭手势管理器，或者创建快捷方式。</p><style>    img[alt=logo] {        display: inline !important;        margin: -0.2em 0.5em !important;        width: 1.5em;    }</style><h3 id="运行手势管理器"><a href="#运行手势管理器" class="headerlink" title="运行手势管理器"></a>运行手势管理器</h3><ol><li>单击任务栏上的手势管理器图标<img src="/2022/01/21/dgm-manual/logo.webp" alt="logo">，进入手势管理器界面。</li><li>上下滚动鼠标滚轮浏览或通过搜索，找到手势管理器图标<img src="/2022/01/21/dgm-manual/logo.webp" alt="logo">，单击运行 。</li><li>右键单击<img src="/2022/01/21/dgm-manual/logo.webp" alt="logo"> ，您可以：<ul><li>单击 发送到桌面，在桌面创建快捷方式。</li><li>单击 发送到任务栏，将应用程序固定到任务栏。</li></ul></li></ol><h3 id="关闭手势管理器"><a href="#关闭手势管理器" class="headerlink" title="关闭手势管理器"></a>关闭手势管理器</h3><ul><li>在手势管理器界面，单击 <img src="http://twemoji.maxcdn.com/36x36/2716.png" title="twemoji-2716" alt="twemoji-2716" class="emoji twemoji" />，退出手势管理器。</li><li>右键单击任务栏上的 <img src="/2022/01/21/dgm-manual/logo.webp" alt="logo"> 图标，选择 关闭所有 来退出手势管理器。</li></ul><h3 id="通过浏览器使用在线版手势管理器"><a href="#通过浏览器使用在线版手势管理器" class="headerlink" title="通过浏览器使用在线版手势管理器"></a>通过浏览器使用在线版手势管理器</h3><p>如果由于各种原因不方便在电脑上安装本工具，也可以通过浏览器访问 <a href="http://www.debuggerx.com/dgm_web">DDE手势管理器Web版</a> 的方式使用本工具的所有功能～</p><h1 id="操作介绍"><a href="#操作介绍" class="headerlink" title="操作介绍"></a>操作介绍</h1><p>初次打开 DDE 手势管理器，您将看到如下界面：<br><img src="/2022/01/21/dgm-manual/welcome.webp" alt="welcome"><br>界面可分为：</p><ul><li>左侧的【本地方案管理】面板</li><li>中部的【手势方案编辑】面板</li><li>右侧的【方案市场/我的】面板</li><li>底部的【功能设置】工具条<br>管理器的所有功能都将通过本界面完成。</li></ul><h2 id="本地方案管理"><a href="#本地方案管理" class="headerlink" title="本地方案管理"></a>本地方案管理</h2><p>该面板将显示所有本地存在的配置方案，可以通过面板右上角的按钮切换隐藏状态。面板列表除去第一条固定为【系统默认方案 <i class="fa fa-history fa-emoji" title="history"></i>】，还将列出如下类型的方案：</p><ul><li>【<i class="fa fa-user fa-emoji" title="user"></i>】表示用户本地创建的方案，还未上传，可以随意编辑；</li><li>【<i class="fa fa-cloud-upload fa-emoji" title="cloud-upload"></i>】表示用户创建的方案，且已经上传成功，可以在【我的】面板查看下载；</li><li>【<i class="fa fa-shopping-cart fa-emoji" title="shopping-cart"></i>】表示该方案来自【方案市场】，不可直接编辑其内容，但可以复制其中的手势命令来配置出自己想要的方案。</li></ul><blockquote><p>当点击方案条目时，【手势方案编辑】面板自动更新为对应内容。</p></blockquote><p>面板下侧为工具条，分别为：</p><ul><li>【<i class="fa fa-plus fa-emoji" title="plus"></i>】创建空白的手势方案</li><li>【<i class="fa fa-minus fa-emoji" title="minus"></i>】删除当前选中的手势方案</li><li>【<i class="fa fa-copy fa-emoji" title="copy"></i>】为当前选中的手势方案创建副本，这在想要简单修改某个来自市场的配置方案时较为有用</li><li>【<i class="fa fa-check fa-emoji" title="check"></i>】应用当前选中的手势方案</li></ul><h3 id="应用手势方案时"><a href="#应用手势方案时" class="headerlink" title="应用手势方案时"></a>应用手势方案时</h3><h4 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h4><p>如果使用的是本工具的 app 版本，点击应用后将出现如下对话框：<br><img src="/2022/01/21/dgm-manual/apply_app.webp" alt="apply_app"></p><h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><p>如果使用的是本工具的 app 版本，点击应用后将出现如下提示：<br><img src="/2022/01/21/dgm-manual/apply_web.webp" alt="apply_web"><br>此时请按提示，打开系统的终端模拟器，粘贴剪切板中的内容后回车，然后将出现如下对话框：<br><img src="/2022/01/21/dgm-manual/apply_web_dialog.webp" alt="apply_web_dialog"></p><blockquote><p>出现对话框后，请务必确保已经保存好了所有的工作进度，当点击【立即注销】后，系统将自动注销，所有未保存的文件内容都有可能丢失！</p></blockquote><h2 id="手势方案编辑"><a href="#手势方案编辑" class="headerlink" title="手势方案编辑"></a>手势方案编辑</h2><p>该面板用于修改编辑选定方案的具体内容，该面板从上到下可分为【手势编辑器】、【手势编辑工具条】、【方案名称编辑及方案上传按钮】、【方案描述编辑器】</p><h3 id="手势编辑器"><a href="#手势编辑器" class="headerlink" title="手势编辑器"></a>手势编辑器</h3><h4 id="工具条操作"><a href="#工具条操作" class="headerlink" title="工具条操作"></a>工具条操作</h4><ul><li>新增一个手势：点击工具条的【<i class="fa fa-plus fa-emoji" title="plus"></i>】按钮，此时会自动添加一条尚未占用的手势配置</li><li>移除一个手势：点击工具条的【<i class="fa fa-minus fa-emoji" title="minus"></i>】按钮，将删除当前选中的手势</li><li>复制一个手势：点击工具条的【<i class="fa fa-copy fa-emoji" title="copy"></i>】按钮，将当前选中的手势复制到应用内的剪切板中</li><li>粘贴一个手势：点击工具条的【<i class="fa fa-calendar-o fa-emoji" title="calendar-o"></i>】按钮，将当前应用内剪切板中的手势粘贴到本方案中（如果手势已经被占用，则会自动修改为一条尚未占用的手势）</li></ul><h4 id="单个手势编辑"><a href="#单个手势编辑" class="headerlink" title="单个手势编辑"></a>单个手势编辑</h4><ol><li>点击【手势编辑器】中的单个手势将其高亮选中，再次点击进入编辑状态</li><li>在编辑模式下，可以通过下拉框选择该手势的【手指数】、【手势类型】、【手势方向】和【命令类型】</li><li>根据【命令类型】的不同，以不同的方式设置【命令】：<ol><li>【内置操作】通过下拉框选择手势触发时想要执行的内置命令</li><li>【命令行】直接输入手势触发时想要执行的shell命令语句</li><li>【快捷键】通过监听键盘输入（可以不必同时按下），设置手势触发时向系统发送的组合快捷键</li></ol></li><li>如有必要，可以对该条手势添加备注说明</li><li>编辑完成后，点击编辑器内的其他任意位置退出编辑模式</li></ol><h3 id="修改方案名称"><a href="#修改方案名称" class="headerlink" title="修改方案名称"></a>修改方案名称</h3><p>通过输入框修改当前方案的名称，修改完成后点击输入框以外的任意位置或者输入回车以应用名称更改，新的方案名称将自动同步到【本地方案管理】面板中</p><blockquote><p><em>注意</em>：不允许使用本地已经存在的方案名称，若出现冲突时将给出相应提示</p></blockquote><h3 id="方案上传"><a href="#方案上传" class="headerlink" title="方案上传"></a>方案上传</h3><p>点击方案名称输入框右侧的上传按钮，可以将当前方案上传到云端，此时可能出现如下提示：</p><ol><li>【请填写方案描述】<br> 如果只是本地使用的方案，可以不用填写方案描述，但是上传时则强制要求填写，这样可以确保您自己或其他用户快速了解方案的一些细节。具体操作可以参考下一小节；</li><li>【请登录：您需要先登录才能进行上传操作】<br> 如果处于未登录状态则会弹出本提示，登录/注册操作请参考【<a href="/2022/01/21/dgm-manual/#%E7%99%BB%E5%BD%95-%E6%B3%A8%E5%86%8C">我的-登录/注册</a>】小节</li><li>【是否同时分享到方案市场？】<br> 如果选择【分享】，那么其他用户可以通过【方案市场】面板看到您上传的这个手势方案</li></ol><h3 id="编写方案描述"><a href="#编写方案描述" class="headerlink" title="编写方案描述"></a>编写方案描述</h3><p>方案描述编辑器支持 <a href="https://baike.baidu.com/item/markdown/3245829">Markdown</a> 语法，可以方便地编写出精美的说明文档；如果您希望分享的方案可以被更多的用户喜欢，强烈建议您简单了解一下：<a href="https://www.runoob.com/markdown/md-title.html">Markdown 教程</a></p><p>除去基础的标题样式和字体格式等，目前已支持的特性有：</p><ul><li>可以点击的超链接</li><li>加载网络图片</li><li>代码区域内容复制</li></ul><h4 id="进入-Markdown-编辑模式"><a href="#进入-Markdown-编辑模式" class="headerlink" title="进入 Markdown 编辑模式"></a>进入 Markdown 编辑模式</h4><p>点击方案描述编辑器区域即可</p><h4 id="退出-Markdown-编辑模式"><a href="#退出-Markdown-编辑模式" class="headerlink" title="退出 Markdown 编辑模式"></a>退出 Markdown 编辑模式</h4><p>编辑完成后，点击编辑器左下角的【<i class="fa fa-check fa-emoji" title="check"></i>】按钮即可结束编辑，并进入预览模式</p><h2 id="方案市场-我的"><a href="#方案市场-我的" class="headerlink" title="方案市场/我的"></a>方案市场/我的</h2><p>该面板可以通过面板左上角的按钮切换隐藏状态，并可通过右上角的【<i class="fa fa-user fa-emoji" title="user"></i>】/【<i class="fa fa-shopping-cart fa-emoji" title="shopping-cart"></i>】按钮切换到【我的】/【方案市场】模式</p><h3 id="方案市场"><a href="#方案市场" class="headerlink" title="方案市场"></a>方案市场</h3><p>如果当前为未登录状态，应用打开后右侧面板默认显示【方案市场】，在该模式下，您可以：</p><ol><li>点击【推荐】、【最近更新】、【点赞数】、【下载量】标签，用以切换不同的方案排列顺序</li><li>点击选中列表中的方案，列表下面的描述预览区将更新显示该方案的说明描述</li><li>通过面板底部的操作按钮对当前选中的方案进行【点赞】和【下载】操作</li></ol><h3 id="我的"><a href="#我的" class="headerlink" title="我的"></a>我的</h3><p>如果当前为登录状态，应用打开后右侧面板默认显示【我的】</p><h4 id="登录-注册"><a href="#登录-注册" class="headerlink" title="登录/注册"></a>登录/注册</h4><p>如果当前为未登录状态，进入该面板将显示如下控件：<br><img src="/2022/01/21/dgm-manual/login.webp" alt="login"><br>请在控件中输入您的有效邮箱和8-16位密码，然后点击【登录/注册按钮】</p><h5 id="如果该邮箱尚未完成注册"><a href="#如果该邮箱尚未完成注册" class="headerlink" title="如果该邮箱尚未完成注册"></a>如果该邮箱尚未完成注册</h5><p>则您将会收到一封包含【完成注册链接】的邮件，请在30分钟内访问该链接以完成注册，然后回到这里用刚才输入的邮箱和密码进行登录</p><h5 id="如果该邮箱已经完成注册"><a href="#如果该邮箱已经完成注册" class="headerlink" title="如果该邮箱已经完成注册"></a>如果该邮箱已经完成注册</h5><p>而且邮箱和密码输入无误，面板将显示如下界面：<br><img src="/2022/01/21/dgm-manual/me.webp" alt="me"><br>在该界面，您可以：</p><ol><li>点击【我的上传】、【我的下载】、【我的点赞】标签，用以切换显示不同类型的方案</li><li>点击选中列表中的方案，列表下面的描述预览区将更新显示该方案的说明描述</li><li>通过面板底部的操作按钮对当前选中的方案进行【分享】、【点赞】和【下载】操作</li></ol><h4 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h4><p>如果需要退出登录状态，请点击【<i class="fa fa-sign-out fa-emoji" title="sign-out"></i>】按钮</p><h2 id="底部工具条"><a href="#底部工具条" class="headerlink" title="底部工具条"></a>底部工具条</h2><p>应用底部工具条从左到右，依次可以：</p><ul><li>【当前版本】显示当前工具的版本号信息</li><li>【检查更新】检查是否有新版本（仅桌面app可用）</li><li>【语言】切换应用的 UI 界面语言，第一次启动时默认会跟随系统语言</li><li>【主题】切换应用的 UI 界面主题，可选【跟随系统】、【浅色】和【深色】</li><li>【帮助】点击后跳转至本页面显示说明手册</li></ul><h1 id="命令技巧"><a href="#命令技巧" class="headerlink" title="命令技巧"></a>命令技巧</h1><p>我将持续收集一些 DDE 下可用的命令，丰富触摸板手势可以实现的操作以供参考，希望能帮助每个人配置出自己最顺手的手势方案～</p><h1 id="与我联系"><a href="#与我联系" class="headerlink" title="与我联系"></a>与我联系</h1><p>如果在本应用的使用过程中出现了任何问题，或者想要提出建议和意见，欢迎通过如下方式与我联系：<br>Email：<a href="mailto:dx8917312@163.com">dx8917312@163.com</a><br>GitHub：<a href="https://github.com/debuggerx01/dde_gesture_manager/issues/new">New Issue</a></p><h1 id="源码地址-amp-参考"><a href="#源码地址-amp-参考" class="headerlink" title="源码地址&amp;参考"></a>源码地址&amp;参考</h1><ul><li><a href="https://github.com/debuggerx01/dde_gesture_manager">dde_gesture_manager</a></li><li><a href="https://github.com/linuxdeepin/dde-daemon">dde-daemon</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> flutter </tag>
            
            <tag> deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 GitHub Actions 自动构建 Linux 内核为 deb 包</title>
      <link href="/2021/08/17/Using-github-actions-to-build-kernel-deb-packages/"/>
      <url>/2021/08/17/Using-github-actions-to-build-kernel-deb-packages/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在上一篇中，我记录了如何通过源码直接编译并安装 Linux 内核，这一篇将介绍如何将内核编译为 deb 包，使我们可以方便地利用系统包管理工具对编译好的内核进行安装和删除等管理操作，以及如何利用 GitHub Actions 帮我们自动化编译。</p></blockquote><h1 id="本地编译"><a href="#本地编译" class="headerlink" title="本地编译"></a>本地编译</h1><p>主要参考 debian 的官方文档：<a href="https://www.debian.org/doc/manuals/debian-reference/ch09.zh-cn.html#_compiling_the_kernel_source_debian_kernel_team_recommendation">编译内核源代码：Debian 内核团队推荐</a></p><p>相比于前篇介绍的步骤，主要区别如下：</p><ol><li>使用 <code>sudo apt-get build-dep linux</code> 的方式即可自动安装编译内核所需的全部依赖</li><li>可以用 <code>wget</code> 直接从 <code>http://www.kernel.org/pub/linux/kernel/</code> 这个位置下载所需源码包</li><li>使用 <code>make deb-pkg</code> 命令编译，即可生成内核的 deb 安装包。</li></ol><h2 id="利用-KVM-虚拟机隔离编译环境"><a href="#利用-KVM-虚拟机隔离编译环境" class="headerlink" title="利用 KVM 虚拟机隔离编译环境"></a>利用 KVM 虚拟机隔离编译环境</h2><blockquote><p>为了不污染工作机的系统环境，我编译软件一般都是先用 KVM 开一个虚拟机进行编译，然后将产物拷贝到物理机使用，下面记录完整流程</p></blockquote><ol><li>下载系统镜像 iso 文件，我下载的是 UOS 系统的安装镜像，放置于 <code>~/Downloads/uniontechos-desktop-21.0-home-beta6-amd64.iso</code></li><li>创建编译所需的虚拟硬盘，完整编译大约需要 40G 左右空间 <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Qemu/uos/</span><br><span class="line">qemu-img create -f raw disk 64G</span><br></pre></td></tr></tbody></table></figure></li><li>用 KVM 引导安装镜像，进入 <code>Live-CD</code> 系统，参考：<a href="/2020/11/29/suggest-Linux-users-to-try-kvm-virtual-machine/#%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E2%80%94%E2%80%94%E8%AF%95%E7%94%A8-Linux-LiveCD">建议Linux用户尝试下kvm虚拟机: 最简单的使用场景——试用-Linux-LiveCD</a> <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里配置了端口转发，用于内核编译好之后可以方便地拷贝出来</span></span><br><span class="line">kvm -cpu host -smp 4 -m 16G -cdrom ~/Downloads/uniontechos-desktop-21.0-home-beta6-amd64.iso -hda ~/Qemu/uos/disk  -nic user,hostfwd=tcp::8000-:8000</span><br></pre></td></tr></tbody></table></figure><blockquote><p>ps.UOS 系统的安装镜像默认是没有进入  <code>Live-CD</code> 模式的选项的，需要通过如下方式进入：</p><pre><code> 1. 在启动项选择界面，按 `Tab` 键进入编辑模式 2. 将下图所示原本启动参数中的 `livecd-installer` 改错或者删除，然后回车启动</code></pre><p>   <img src="/2021/08/17/Using-github-actions-to-build-kernel-deb-packages/live-cd.webp" alt="live-cd"></p></blockquote></li><li>进入系统后，开启终端，首先用 <code>fdisk</code> 命令为虚拟磁盘创建分区<br> <img src="/2021/08/17/Using-github-actions-to-build-kernel-deb-packages/fdisk.webp" alt="fdisk"><br> a. 输入命令 <code>sudo fdisk /dev/sda</code><br> b. 按 <code>n</code> 新建分区，然后一直默认值，输入四次回车<br> c. 输入 <code>w</code>，将变更写入硬盘</li><li>格式化硬盘分区并挂载<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkfs.ext4 /dev/sda1</span><br><span class="line">sudo mount /dev/sda1 /mnt/</span><br></pre></td></tr></tbody></table></figure><img src="/2021/08/17/Using-github-actions-to-build-kernel-deb-packages/df.webp" alt="df"></li></ol><p>之后就可以在 <code>/mnt/</code> 路径下进行编译操作了</p><h2 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h2><ol><li><p>为 apt 开启源码仓库<br>为了可以使用 <code>apt build-dep linux</code> 自动安装编译所需的依赖，需要先为 apt 配置源码仓库<br>参考 <a href="https://www.debian.org/doc/manuals/debian-reference/ch02.zh-cn.html#_porting_a_package_to_the_stable_system">移植一个软件包到 stable 系统</a>，编辑 <code>/etc/apt/sources.list</code>，有些发行版（如 debian）默认是将 <code>deb-src</code> 开头的源码仓库注释掉的，只要取消注释即可；而 UOS 是没有的，所以如下方式添加：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "deb-src https://home-packages.chinauos.com/home plum main contrib non-free" &gt;&gt; /etc/apt/sources.list</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装所需依赖</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 /etc/apt/sources.list 后首先需要更新 apt</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 wget 用于下载内核源码包</span></span><br><span class="line">sudo apt install -y wget</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动下载编译所需的所有依赖</span></span><br><span class="line">sudo apt build-dep -y linux</span><br></pre></td></tr></tbody></table></figure></li><li><p>下载源码、应用 .config、编译 deb 包</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载需要的源码，可以用 <span class="built_in">uname</span> -r 查看系统内核版本号</span></span><br><span class="line">wget http://www.kernel.org/pub/linux/kernel/v5.x/linux-5.10.41.tar.xz</span><br><span class="line">tar -xf linux-5.10.41.tar.xz</span><br><span class="line">cd linux-5.10.41/</span><br><span class="line">cp /boot/config-"$(uname -r)" .config</span><br><span class="line">make deb-pkg -j4</span><br></pre></td></tr></tbody></table></figure></li></ol><p>编译结束后，会在 <code>解压的源码包的上级目录下</code> 生成几个 deb 包：<br><img src="/2021/08/17/Using-github-actions-to-build-kernel-deb-packages/build_done.webp" alt="build_done"></p><ol start="4"><li>拷贝出需要的 deb 包，在物理机安装测试<br>比较方便的从 kvm 虚拟机中拷贝文件到物理机的方法是，在虚拟机中利用 python 开一个文件下载服务器。<br>由于我们开启虚拟机的时候已经设置了虚拟机 8000 端口到物理机 8000 端口的映射，所以直接在虚拟机的 <code>/mnt/</code> 目录下执行：<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></tbody></table></figure>然后在物理机打开浏览器，访问 <code>http://127.0.0.1:8000/</code> 即可访问下载虚拟机中的文件。</li></ol><p>我们只需要下载 <code>linux-headers</code> 和 <code>linux-image</code> 开头的两个 deb 文件即可，不用下载名字中带有 <code>dbg</code>，大小 1G 左右的包，那个是调试内核使用的。</p><p><img src="/2021/08/17/Using-github-actions-to-build-kernel-deb-packages/download.webp" alt="download"></p><p>下载完成后，双击 deb 文件安装，或用 <code>sudo dpkg -i *.deb</code> 安装即可。</p><h2 id="自动编译脚本"><a href="#自动编译脚本" class="headerlink" title="自动编译脚本"></a>自动编译脚本</h2><p>针对上面的操作，我写了一个自动化的脚本，可以在这里得到：<br><a href="https://github.com/debuggerx01/kernel_deb_builder/blob/main/build_on_uos.sh">https://github.com/debuggerx01/kernel_deb_builder/blob/main/build_on_uos.sh</a></p><blockquote><p>注意，只能在 UOS 系统上使用该脚本。</p></blockquote><h1 id="利用-GitHub-Actions-自动编译"><a href="#利用-GitHub-Actions-自动编译" class="headerlink" title="利用 GitHub Actions 自动编译"></a>利用 GitHub Actions 自动编译</h1><p><a href="https://github.com/features/actions">GitHub Actions</a> 是 GitHub 的<a href="https://www.ruanyifeng.com/blog/2015/09/continuous-integration.html">持续集成服务</a>，于2018年10月推出。<br>简单入门可以参考：<a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程—— 阮一峰</a></p><h2 id="编译脚本"><a href="#编译脚本" class="headerlink" title="编译脚本"></a>编译脚本</h2><p>由于 GitHub Actions 提供的 Linux 运行环境是 <code>Ubuntu</code>，所以需要针对这个系统来编写编译脚本<br><a href="https://github.com/debuggerx01/kernel_deb_builder/blob/main/build_action.sh">build_action.sh</a></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这一步用于从脚本同目录下的 config 文件中获取要编译的内核版本号</span></span><br><span class="line">VERSION=$(grep 'Kernel Configuration' &lt; config | awk '{print $3}')</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add deb-src to sources.list Ubuntu系统只需要把系统 apt 配置中的源码仓库注释取消掉即可</span></span><br><span class="line">sed -i "/deb-src/s/# //g" /etc/apt/sources.list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install dep</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y wget</span><br><span class="line">sudo apt build-dep -y linux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">change <span class="built_in">dir</span> to workplace</span></span><br><span class="line">cd "${GITHUB_WORKSPACE}" || exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">download kernel <span class="built_in">source</span></span></span><br><span class="line">wget http://www.kernel.org/pub/linux/kernel/v5.x/linux-"$VERSION".tar.xz</span><br><span class="line">tar -xf linux-"$VERSION".tar.xz</span><br><span class="line">cd linux-"$VERSION" || exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">copy config file</span></span><br><span class="line">cp ../config .config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">应用 patch.d/ 目录下的脚本，用于自定义对系统源码的修改</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apply patches</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shellcheck <span class="built_in">source</span>=src/util.sh</span></span><br><span class="line">source ../patch.d/*.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">build deb packages</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取系统的 CPU 核心数，将核心数X2设置为编译时开启的进程数，以加快编译速度</span></span><br><span class="line">CPU_CORES=$(($(grep -c processor &lt; /proc/cpuinfo)*2))</span><br><span class="line">make deb-pkg -j"$CPU_CORES"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">move deb packages to artifact <span class="built_in">dir</span></span></span><br><span class="line">cd ..</span><br><span class="line">mkdir "artifact"</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除无用且巨大的调试包</span></span><br><span class="line">rm ./*dbg*.deb</span><br><span class="line">mv ./*.deb artifact/</span><br></pre></td></tr></tbody></table></figure><h2 id="创建-action"><a href="#创建-action" class="headerlink" title="创建 action"></a>创建 action</h2><p><a href="https://github.com/debuggerx01/kernel_deb_builder/blob/main/.github/workflows/build.yml">.github/workflows/build.yml</a></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">kernel</span> <span class="string">deb</span> <span class="string">packages</span></span><br><span class="line"><span class="comment"># 在代码推送的时候自动触发 action</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">kernel</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 由于默认的 Ubuntu 环境只有 17G 左右的剩余空间，所以我们需要先利用如下 action 对编译环境进行扩容</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Maximize</span> <span class="string">build</span> <span class="string">space</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">easimon/maximize-build-space@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 这个值是保留给系统的空间大小，之前设置太小，总会在安装依赖或者编译过程中报设备空间不足的错误而导致编译失败</span></span><br><span class="line">          <span class="attr">root-reserve-mb:</span> <span class="number">4096</span></span><br><span class="line">          <span class="attr">swap-size-mb:</span> <span class="number">512</span></span><br><span class="line">          <span class="attr">remove-dotnet:</span> <span class="string">'true'</span></span><br><span class="line">          <span class="attr">remove-android:</span> <span class="string">'true'</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 不要忘记先 checkout 代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 调用自动编译脚本，需要 sudo 权限</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">sudo</span> <span class="string">bash</span> <span class="string">build_action.sh</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 将编译后的产物保留，以供直接通过网页下载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">artifact</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">${{</span> <span class="string">github.workspace</span> <span class="string">}}/artifact/</span></span><br></pre></td></tr></tbody></table></figure><p>如下图，经过 2 小时 40 分钟的编译，最终生成了 70 MB左右的内核 deb 包，点击 <code>artifact</code> 下载解压安装即可 <span class="github-emoji"><span>🐕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f415.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br><img src="/2021/08/17/Using-github-actions-to-build-kernel-deb-packages/action_done.webp" alt="action_done"></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>如果您想要利用我的这个自动化脚本根据自己的需求编译内核，请参考如下步骤：</p><ol><li><p>Fork 仓库<br>访问 <a href="https://github.com/debuggerx01/kernel_deb_builder">https://github.com/debuggerx01/kernel_deb_builder</a> ，点击右上角的 <code>Fork</code> 按钮，并 clone 到本地</p></li><li><p>更新 config 文件<br>在本地将您获取的 config 文件替换根目录下的 <code>config</code>，可以从您系统的 <code>/boot/config*</code> 文件复制，或者手动编辑</p></li><li><p>编写自定义修改脚本<br>当前 <code>/patch.d/</code> 目录下的修改脚本是只针对我自己的需求编写的，建议您先将其删掉，然后编写自己的脚本放在这个目录下，在脚本执行过程中会自动应用该目录下的所有脚本</p></li><li><p>推送修改<br>推送后，action 自动触发，可以在您的仓库页面的 <code>Actions</code> 选项卡查看进度详情。</p></li></ol><p>Enjoy～ <span class="github-emoji"><span>😁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>卧槽，偶然发现原来可以通过禁用 <code>.config</code> 的 <code>DEBUG_INFO</code> 选项来大幅减少编译时所需的磁盘空间，同时耗时也会减少很多！！<span class="github-emoji"><span>😯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>只要在解压后的源码根目录，确保 <code>.config</code> 已存在，执行：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scripts/config --disable DEBUG_INFO</span><br></pre></td></tr></tbody></table></figure><p>这样一来，编译所需的空间从接近 40 G 直线减少到大约 4 G，actions 脚本中的扩容系统空间的部分就完全不需要了，而且生成的 deb 包也没有那个 1 G 多的 dbg 包，编译时间更是减少了一个多小时 <span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>而如果是在 kvm 虚拟机中编译，如果内存分配得足够大，甚至可以完全在内存中编译，而不用额外挂载一个虚拟磁盘了～</p><p><img src="/2021/08/17/Using-github-actions-to-build-kernel-deb-packages/kvm.webp" alt="kvm"></p><p>如上图，我给 kvm 分配了 16 G内存，那么其一半 8 G 会自动以 tmpfs 挂载到 <code>\tmp</code>，所以只要切换到这个目录下执行编译脚本即可！</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> linux </tag>
            
            <tag> 自动化 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改 Linux 内核使系统启动时间缩短约 30 秒</title>
      <link href="/2021/07/07/Modify-the-linux-kernel-to-reduce-the-boot-speed-by-about-30-seconds/"/>
      <url>/2021/07/07/Modify-the-linux-kernel-to-reduce-the-boot-speed-by-about-30-seconds/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先注明，标题描述的修改效果并不具备普适性，仅仅是针对我刚买的新本子的特殊处理，但文中涉及的一些思路和技巧应该还是对处理解决类似的问题有一定的帮助。</p></blockquote><h1 id="对比视频"><a href="#对比视频" class="headerlink" title="对比视频"></a>对比视频</h1><p><span id="jump0"></span></p><iframe id="bili1" width="100%" src="//player.bilibili.com/player.html?aid=804768485&amp;bvid=BV1By4y1L73q&amp;cid=388322265&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili1 = document.querySelector('#bili1');    var container = document.querySelector('#article-container');    bili1.height = (container.clientWidth * 3 / 4) + 'px';</script><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>趁着 618 活动新买了台红米 air 笔记本，cpu 是 i7-10510Y，希望可以日常使用 Linux，尝试了多个发行版基本都能正常使用，唯一的问题就是启动时，当在 GRUB 选择系统页面选择系统后，画面会停留在 GURB 主题背景页面长达 30 秒，然后才能继续开机流程。</p><p>尝试了最新的 Ubuntu 系统，也是类似的问题，唯一的区别是 Ubuntu 下是选择系统后电脑黑屏 30 秒然后出现加载信息。</p><p>查看 <code>dmesg</code> 信息可以看到如下错误：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[    0.244480] Simple Boot Flag at 0x44 set to 0x1</span><br><span class="line">[    0.244480] ACPI: bus type PCI registered</span><br><span class="line">[    0.244480] acpiphp: ACPI Hot Plug PCI Controller Driver version: 0.5</span><br><span class="line">[    0.244480] PCI: MMCONFIG for domain 0000 [bus 00-ff] at [mem 0xe0000000-0xefffffff] (base 0xe0000000)</span><br><span class="line">[    0.244480] PCI: MMCONFIG at [mem 0xe0000000-0xefffffff] reserved in E820</span><br><span class="line">[    0.244480] PCI: Using configuration type 1 for base access</span><br><span class="line">[    0.244621] ENERGY_PERF_BIAS: Set to 'normal', was 'performance'</span><br><span class="line">[    0.248307] Kprobes globally optimized</span><br><span class="line">[    0.248314] HugeTLB registered 1.00 GiB page size, pre-allocated 0 pages</span><br><span class="line">[    0.248314] HugeTLB registered 2.00 MiB page size, pre-allocated 0 pages</span><br><span class="line">[    0.248314] ACPI: Added _OSI(Module Device)</span><br><span class="line">[    0.248314] ACPI: Added _OSI(Processor Device)</span><br><span class="line">[    0.248314] ACPI: Added _OSI(3.0 _SCP Extensions)</span><br><span class="line">[    0.248314] ACPI: Added _OSI(Processor Aggregator Device)</span><br><span class="line">[    0.248314] ACPI: Added _OSI(Linux-Dell-Video)</span><br><span class="line">[    0.248314] ACPI: Added _OSI(Linux-Lenovo-NV-HDMI-Audio)</span><br><span class="line">[    0.248314] ACPI: Added _OSI(Linux-HPI-Hybrid-Graphics)</span><br><span class="line">[    0.358456] ACPI: 17 ACPI AML tables successfully acquired and loaded</span><br><span class="line">[    0.362525] ACPI: EC: EC started</span><br><span class="line">[    0.362527] ACPI: EC: interrupt blocked</span><br><span class="line"></span><br><span class="line">[   30.376923] No Local Variables are initialized for Method [ECMD]</span><br><span class="line"></span><br><span class="line">[   30.376927] Initialized Arguments for Method [ECMD]:  (1 arguments defined for method invocation)</span><br><span class="line">[   30.376928]   Arg0:   0000000036f30172            Integer 000000000000001A</span><br><span class="line"></span><br><span class="line">[   30.376940] ACPI Error: Aborting method \_SB.PCI0.LPCB.H_EC.ECMD due to previous error (AE_AML_LOOP_TIMEOUT) (20200925/psparse-531)</span><br><span class="line">[   30.376960] fbcon: Taking over console</span><br><span class="line">[   30.376972] ACPI Error: Aborting method \_TZ.FNCL due to previous error (AE_AML_LOOP_TIMEOUT) (20200925/psparse-531)</span><br><span class="line">[   30.376986] ACPI Error: Aborting method \_TZ.FN00._OFF due to previous error (AE_AML_LOOP_TIMEOUT) (20200925/psparse-531)</span><br><span class="line">[   30.376997] ACPI Error: Aborting method \_SB.PCI0.LPCB.H_EC._REG due to previous error (AE_AML_LOOP_TIMEOUT) (20200925/psparse-531)</span><br><span class="line">[   30.377037] ACPI: EC: EC_CMD/EC_SC=0x66, EC_DATA=0x62</span><br><span class="line">[   30.377038] ACPI: EC: Boot ECDT EC used to handle transactions</span><br><span class="line">[   30.379873] ACPI: [Firmware Bug]: BIOS _OSI(Linux) query ignored</span><br><span class="line">[   30.426569] ACPI: Dynamic OEM Table Load:</span><br><span class="line">[   30.426598] ACPI: SSDT 0xFFFF89BC00C45800 000507 (v02 PmRef  Cpu0Ist  00003000 INTL 20160527)</span><br><span class="line">[   30.429939] ACPI: \_PR_.PR00: _OSC native thermal LVT Acked</span><br><span class="line">[   30.433359] ACPI: Dynamic OEM Table Load:</span><br><span class="line">[   30.433378] ACPI: SSDT 0xFFFF89BC011D2C00 0003FF (v02 PmRef  Cpu0Cst  00003001 INTL 20160527)</span><br><span class="line">[   30.436652] ACPI: Dynamic OEM Table Load:</span><br><span class="line">[   30.436670] ACPI: SSDT 0xFFFF89BC0148D6C0 0000BA (v02 PmRef  Cpu0Hwp  00003000 INTL 20160527)</span><br><span class="line">[   30.439724] ACPI: Dynamic OEM Table Load:</span><br><span class="line">[   30.439742] ACPI: SSDT 0xFFFF89BC00C41800 000628 (v02 PmRef  HwpLvt   00003000 INTL 20160527)</span><br><span class="line">[   30.443600] ACPI: Dynamic OEM Table Load:</span><br><span class="line">[   30.443622] ACPI: SSDT 0xFFFF89BC011C1000 000D14 (v02 PmRef  ApIst    00003000 INTL 20160527)</span><br><span class="line">[   30.448401] ACPI: Dynamic OEM Table Load:</span><br><span class="line">[   30.448419] ACPI: SSDT 0xFFFF89BC011D0000 000317 (v02 PmRef  ApHwp    00003000 INTL 20160527)</span><br><span class="line">[   30.451771] ACPI: Dynamic OEM Table Load:</span><br><span class="line">[   30.451788] ACPI: SSDT 0xFFFF89BC011D2800 00030A (v02 PmRef  ApCst    00003000 INTL 20160527)</span><br><span class="line">[   30.461796] ACPI: Interpreter enabled </span><br></pre></td></tr></tbody></table></figure><p>通过传递 acpi=off 参数给内核可以跳过卡住的过程，但是开机后触摸板不可使用，且发热严重，根据日志错误信息查阅大量资料后，基本都是说升级 BIOS 以解决 ACPI 的错误，但是这款笔记本没有 BIOS 更新而且很有可能以后也不会有。在多处发帖与网友交流后，进行了如下尝试</p><h2 id="添加启动时内核参数"><a href="#添加启动时内核参数" class="headerlink" title="添加启动时内核参数"></a>添加启动时内核参数</h2><ul><li><a href="https://gitee.com/deepinwiki/wiki/blob/master/deepin%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97.md#%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3">deepin安装指南</a></li><li><a href="https://wiki.archlinux.org/title/DSDT_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">DSDT (简体中文)</a></li></ul><p>尝试了各种仿冒 Windows 的字符串，以及尝试添加 <code>nomodeset</code> 参数以禁用内核的显卡驱动，这些在某些安装 Linux 系统有问题的机型上会比较有用，但是我这台机器无效。</p><h2 id="尝试修复-ACPI-字节码"><a href="#尝试修复-ACPI-字节码" class="headerlink" title="尝试修复 ACPI 字节码"></a>尝试修复 ACPI 字节码</h2><p>主要参考：</p><ul><li><a href="https://www.v2ex.com/t/786747#r_10666829">https://www.v2ex.com/t/786747#r_10666829</a></li><li><a href="https://zhuanlan.zhihu.com/p/385750248">瞎改ACPI字节码修复BIOS bug</a></li><li><a href="https://wiki.archlinux.org/title/DSDT">DSDT - ArchWiki</a></li></ul><p>根据 <a href="https://www.v2ex.com/member/generic">generic</a> 大佬的方法，尝试修改 ACPI 字节码，但是反编译时获得的代码含有大量反编译失败的错误，无法继续修改……</p><h2 id="尝试不同版本的内核"><a href="#尝试不同版本的内核" class="headerlink" title="尝试不同版本的内核"></a>尝试不同版本的内核</h2><p>先后尝试了 5.4、5.8、5.10、5.12 等内核，情况完全一样，直到尝试了安装4.x的内核，发现启动时就不会卡那30秒了，虽然本子的触摸板、喇叭和麦克风都不能用了，但也说明确实可以通过修改kernel来解决/绕过/缓解这个问题。</p><h1 id="分析错误日志"><a href="#分析错误日志" class="headerlink" title="分析错误日志"></a>分析错误日志</h1><p>查看<code>dmesg</code>日志的第27行，可以看到有<code>AE_AML_LOOP_TIMEOUT</code>的错误描述。</p><p>找到 Linux Kernel 5.12 的内核源码，通过搜索 “AE_AML_LOOP_TIMEOUT” 这个错误的定义，顺藤摸瓜找到如下定义：<br><a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/acpi/acconfig.h?h=v5.12.14">root/include/acpi/acconfig.h</a></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Maximum time (default 30s) of While() loops before abort */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACPI_MAX_LOOP_TIMEOUT           30</span></span><br></pre></td></tr></tbody></table></figure><p>所以在出现某种错误的时候才会有卡住30秒的表现——那么是不是把这里的值改小，就可以缩短加载内核时卡住的时间，这样只要影响不大我也就能接受这样用下去了。</p><p>之后又在<a href="https://github.com/acpica/acpica/blob/master/documents/changes.txt">acpica/acpica: documents/changes.txt</a>这里看到了如下说明：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">29 September 2017. Summary of changes for version 20170929:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) ACPICA kernel-resident subsystem:</span><br><span class="line"></span><br><span class="line">Redesigned and implemented an improved ASL While() loop timeout </span><br><span class="line">mechanism. This mechanism is used to prevent infinite loops in the kernel </span><br><span class="line">AML interpreter caused by either non-responsive hardware or incorrect AML </span><br><span class="line">code. The new implementation uses AcpiOsGetTimer instead of a simple </span><br><span class="line">maximum loop count, and is thus more accurate and constant across </span><br><span class="line">different machines. The default timeout is currently 30 seconds, but this </span><br><span class="line">may be adjusted later.</span><br><span class="line"></span><br><span class="line">Renamed the ACPI_AML_INFINITE_LOOP exception to AE_AML_LOOP_TIMEOUT to </span><br><span class="line">better reflect the new implementation of the loop timeout mechanism.</span><br></pre></td></tr></tbody></table></figure><p>也就是说，在 2017年9月29日 的时候，ACPICA内核驻留子系统重新设计并实现了一个改进的 ASL While() 循环超时机制，用于防止内核中的无限循环 AML 解释器中由无响应的硬件或不正确的 AML 代码造成的无限循环（之前是 ACPI_AML_INFINITE_LOOP），并设置了默认的超时时间是 30 秒，而不是使用之前的最大循环数，因此可以在不同的机器上更加准确和稳定，这个值之后也可能会被调整——通过日志可以看出，我的机器上在出现 <code>AE_AML_LOOP_TIMEOUT</code> 异常之前总共只耗费了 300 多毫秒，也就是说，正常情况下所有操作都是可以在一秒内完成的。</p><p>于是我决定把上面代码中定义的 <code>30</code> 改为 <code>3</code> 试试看效果，也就是只允许内核的 AML 解释器循环等待 3 秒钟。</p><h1 id="修改、编译内核"><a href="#修改、编译内核" class="headerlink" title="修改、编译内核"></a>修改、编译内核</h1><p>参考 Linux Kernel 的官方教程：<a href="https://kernelnewbies.org/KernelBuild">KernelBuild</a></p><ol><li><p>下载内核源码<br>访问<a href="https://www.kernel.org/">https://www.kernel.org/</a>，点击所需版本的内核源码压缩包下载链接：<br><img src="/2021/07/07/Modify-the-linux-kernel-to-reduce-the-boot-speed-by-about-30-seconds/tarball.webp" alt="tarball.webp"></p></li><li><p>解压源码</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xf linux-5.xx.tar.xz</span><br><span class="line">cd linux-5.xxx/</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装依赖</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖，可能不全，可以根据错误信息补</span></span><br><span class="line">sudo apt-get install libncurses5-dev gcc make git exuberant-ctags bc libssl-dev flex bison</span><br></pre></td></tr></tbody></table></figure></li><li><p>从系统中获取配置文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /boot/config-`uname -r`* .config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将配置文件中未设置的选项自动设置为默认值</span></span><br><span class="line">make defconfig</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>此时可以修改源码，除了上文提到的对<code>root/include/acpi/acconfig.h</code>的修改，我还修改了<code>.config</code>文件中的<code>CONFIG_LOCALVERSION</code>字段的值，用于区分没有修改的内核。</p></blockquote><ol start="5"><li>编译安装<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以使用 make -jn 指定编译时使用的线程数以加快编译，在我的机器上可以从20分钟缩短至5分钟</span></span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装编译好的内核到系统中</span></span><br><span class="line">sudo make modules_install install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新启动项，以在下次启动时应用新内核</span></span><br><span class="line">sudo update-grub2</span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="对比效果"><a href="#对比效果" class="headerlink" title="对比效果"></a>对比效果</h1><blockquote><p>可以用 <code>systemd-analyze</code> 命令查看开机耗时情况（硬件启动、加载器、内核、用户程序），另外还有 <code>systemd-analyze blame</code> 比较常用，用于看看开机时各个服务的启动耗时。<br>修改前的开机耗时：<br><img src="/2021/07/07/Modify-the-linux-kernel-to-reduce-the-boot-speed-by-about-30-seconds/before.webp" alt="before"><br>修改后：<br><img src="/2021/07/07/Modify-the-linux-kernel-to-reduce-the-boot-speed-by-about-30-seconds/after.webp" alt="after"><br>先这样用了，有空再慢慢折腾，看看以后会不会官方更新BIOS或者内核升级可以彻底解决问题～～</p></blockquote><p>传送门：<a href="#jump0">回到视频</a></p><blockquote><p>上面的操作中，使用了<code>make &amp;&amp; make install</code>这种源码编译安装的方式，但这是非常不提倡不正规的行为，至于原因我比较认同这个回答：<a href="https://www.zhihu.com/question/329637242/answer/735304069">为何linux安装程序会很麻烦？ - invalid s的回答 - 知乎</a>。所以下一篇文章中，我将介绍如何将我们修改过的内核直接编译为 debian 系通用的 deb 安装包，使我们可以方便地利用系统包管理工具对编译好的内核进行安装和删除等管理操作，以及如何利用 GitHub Actions 帮我们自动化编译 deb 包，而不用花费时间精力在本地创建编译环境以及自己编译 <span class="github-emoji"><span>🐕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f415.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> linux </tag>
            
            <tag> bug </tag>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome 插件 : NewTabBeforeClose</title>
      <link href="/2021/06/23/chrome-extension-new-tab-before-close/"/>
      <url>/2021/06/23/chrome-extension-new-tab-before-close/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是一个 Chrome 插件，用于在关闭最后一个Tab时自动打开一个新标签页而不是关闭浏览器，行为表现模拟 <a href="http://www.theworld.cn/">世界之窗浏览器</a>。</p><blockquote><p>本人也算是世界之窗浏览器的老粉丝了，大约十五年前接触到这款浏览器之后就因为它简洁、轻巧、速度快、功能全面且人性化而一直使用。但是由于其被 360 公司收购之后逐渐停止更新，而且个人常用操作系统逐渐全面更换为 Linux，不得已只能强忍不适，将常用浏览器切换为 Chrome，多年过去也已经彻底习惯了。直到前些天看到 V2EX 上的这篇帖子：<a href="https://www.v2ex.com/t/784373">《浏览器关闭最后一个标签页后的行为》</a>，又使我回想起了那些年有世界之窗相伴的日子，回忆起切换到 Chrome 后关闭最后一个标签页后浏览器会直接关闭而不是保留一个新标签页这一行为的不适与别扭——当时的我没有能力，只是个普通的计算机爱好者，而现在作为伪全栈开发有了折腾的能力，趁此机会就尝试编写了本插件，试图找回熟悉的感觉～<span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/bowtie.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://www.debuggerx.com/raw_assets/gif/NewTabBeforeClose.gif" alt="demo"></p><h1 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h1><h2 id="Chrome插件开发学习"><a href="#Chrome插件开发学习" class="headerlink" title="Chrome插件开发学习"></a>Chrome插件开发学习</h2><p>主要参考资料如下：</p><ul><li><a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html">【干货】Chrome插件(扩展)开发全攻略</a></li><li><a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/">Doc: Getting started</a></li><li><a href="https://developer.chrome.com/docs/extensions/reference/">Doc: API Reference</a></li><li><a href="https://chrome.google.com/webstore/detail/dont-close-window-with-la/dlnpfhfhmkiebpnlllpehlmklgdggbhn">Don’t Close Window With Last Tab</a></li></ul><h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><blockquote><p>查阅API文档后，一开始的想法是，通过监听 <code>chrome.tabs.onRemoved</code> 事件，当判断刚刚关掉的是最后一个 tab，就通过 <code>chrome.tabs.create</code> 创建一个新标签页，经过尝试发现事情并没有那么简单：因为在关闭最后一个标签页时， <code>chrome.tabs.onRemoved</code> 事件要么根本来不及回调浏览器进程就已经退出，要么虽然事件触发，但是创建标签页不成功。之后又是各种尝试，包括使用 <code>content_script</code> 向每个页面注入 <code>window.onbeforeunload</code> 的监听，在页面关闭前向后台服务脚本发送消息执行判断逻辑，进而在需要的时候创建新标签页，结果虽然在一定程度上达到了预期效果，但是个别网站却会失效，具体原因不明<span class="github-emoji"><span>😑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。最终是参考了 <code>Don't Close Window With Last Tab</code> 这个插件的方式，通过预先在最左侧创建一个固定的空白标签页来阻止浏览器自动退出，最终才实现了上面演示的效果。</p></blockquote><h3 id="创建工程目录-amp-manifest-json"><a href="#创建工程目录-amp-manifest-json" class="headerlink" title="创建工程目录&amp;manifest.json"></a>创建工程目录&amp;manifest.json</h3><p>清单文件内容如下：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"NewTabBeforeClose"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"1.0"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"author"</span><span class="punctuation">:</span> <span class="string">"DebuggerX"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"当关闭最后一个Tab时打开一个新标签页而不是关闭浏览器"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"permissions"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">"tabs"</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"manifest_version"</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"background"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"service_worker"</span><span class="punctuation">:</span> <span class="string">"background.js"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>参考 <a href="https://developer.chrome.com/docs/extensions/mv3/intro/mv3-migration/">Migrating to Manifest V3</a> 和 <a href="https://developer.chrome.com/docs/extensions/mv3/migrating_to_service_workers/">Migrating from background pages to service workers</a>，新版插件需要将清单版本设为 <code>"manifest_version": 3</code>，并且后台服务脚本需要设为 <code>"service_worker": "background.js"</code>。因为要调用api对标签页进行增删改查操作，所以还需要加入 <code>tabs</code> 权限的声明。</p><h3 id="简单实现初版功能"><a href="#简单实现初版功能" class="headerlink" title="简单实现初版功能"></a>简单实现初版功能</h3><p>编辑 <code>background.js</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为chrome.tabs的onRemoved、onCreated和onUpdated事件设置监听</span></span><br><span class="line">[chrome.<span class="property">tabs</span>.<span class="property">onRemoved</span>, chrome.<span class="property">tabs</span>.<span class="property">onCreated</span>, chrome.<span class="property">tabs</span>.<span class="property">onUpdated</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">evt</span>) =&gt;</span> {</span><br><span class="line">  evt.<span class="title function_">addListener</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">// 加入延时函数是因为调试过程中发现，当标签页变化的事件触发回调时，如果立即进行 chrome.tabs.query，拿到的结果可能不是最新的</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="title function_">async</span> () =&gt; {</span><br><span class="line">      <span class="comment">// 使用该api可以查询出当前浏览器的所有标签页的信息数组，然后统计普通网页标签页的数量和以“chrome://”开头的系统标签页的数量</span></span><br><span class="line">      <span class="keyword">const</span> tabs = <span class="keyword">await</span> chrome.<span class="property">tabs</span>.<span class="title function_">query</span>({});</span><br><span class="line">      <span class="keyword">let</span> normalTabCount = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> chromeTabCount = <span class="number">0</span>;</span><br><span class="line">      tabs.<span class="title function_">forEach</span>(<span class="function"><span class="params">t</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (t.<span class="property">url</span>.<span class="title function_">startsWith</span>(<span class="string">'chrome://'</span>)) {</span><br><span class="line">          chromeTabCount++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">          normalTabCount++;</span><br><span class="line">        }</span><br><span class="line">      });</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (normalTabCount === <span class="number">1</span> &amp;&amp; chromeTabCount === <span class="number">0</span>) {</span><br><span class="line">        <span class="comment">// 如果没有系统标签页，并且只有一个普通标签页，那么就在最左侧创建一个固定的新标签页</span></span><br><span class="line">        chrome.<span class="property">tabs</span>.<span class="title function_">create</span>({ <span class="attr">pinned</span>: <span class="literal">true</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">active</span>: <span class="literal">false</span> });</span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (normalTabCount === <span class="number">0</span> &amp;&amp; chromeTabCount === <span class="number">1</span> &amp;&amp; tabs[<span class="number">0</span>].<span class="property">pinned</span>) {</span><br><span class="line">        <span class="comment">// 如果只有一个系统标签页，而且该标签页是固定状态，那么认为就是上面一种情况创建了固定新标签页，然后用户关闭了最后一个普通标签页</span></span><br><span class="line">        <span class="comment">// 此时将这个固定的新标签页更新，取消其固定状态，这样实现了关闭最后一个标签页时打开新标签页的效果</span></span><br><span class="line">        chrome.<span class="property">tabs</span>.<span class="title function_">update</span>(tabs[<span class="number">0</span>].<span class="property">id</span>, {</span><br><span class="line">          <span class="attr">pinned</span>: <span class="literal">false</span>,</span><br><span class="line">        });</span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (tabs[<span class="number">0</span>].<span class="property">pinned</span> &amp;&amp; (normalTabCount &gt; <span class="number">1</span> || chromeTabCount &gt; <span class="number">1</span> || (normalTabCount === <span class="number">0</span> &amp;&amp; tabs[<span class="number">1</span>].<span class="property">url</span>.<span class="title function_">startsWith</span>(<span class="string">'chrome://'</span>)))) {</span><br><span class="line">        <span class="comment">// 在不需要的时候移除用于防止浏览器关闭的固定标签页，比如用户打开了第二个普通页面，或者虽然没有普通页面，但其他页面都是系统标签页的时候</span></span><br><span class="line">        chrome.<span class="property">tabs</span>.<span class="title function_">remove</span>(tabs[<span class="number">0</span>].<span class="property">id</span>);</span><br><span class="line">      }</span><br><span class="line">    }, <span class="number">100</span>);</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这样就已经实现了最核心的需求，接下来再进行一些优化和特殊情况的处理。</p><h3 id="加入防抖机制"><a href="#加入防抖机制" class="headerlink" title="加入防抖机制"></a>加入防抖机制</h3><p>上面的代码虽然能够实现效果，但是在创建和删除固定标签页的时候会出现标签页闪现，或者连续创建多个便签页然后又消失的问题。<br>这是因为同时监听了tab的增删改三个操作，新打开页面的时候可能会同时触发多个事件，就导致了监听函数在短时间内多次执行，所以加个防抖即可解决这个问题：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleTabsChange</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; { ... }</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    }, delay);</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">[chrome.<span class="property">tabs</span>.<span class="property">onRemoved</span>, chrome.<span class="property">tabs</span>.<span class="property">onCreated</span>, chrome.<span class="property">tabs</span>.<span class="property">onUpdated</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">evt</span>) =&gt;</span> {</span><br><span class="line">  evt.<span class="title function_">addListener</span>(<span class="title function_">debounce</span>(handleTabsChange, <span class="number">100</span>));</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>和常规的防抖函数相比，这里我把用于判断延迟函数执行的 <code>timer</code> 变量放到了全局而不是闭包函数内部，是因为常规的防抖函数是限制当前那一行方法的抖动执行，而我这里是需要在任何情况下对 <code>handleTabsChange</code> 这个函数本身的执行进行限制。打个比方，利用常规的防抖函数对页面上的一个按钮进行处理，快速点击这个按钮三次，实际只会执行一次。但是如果是有三个按钮分别绑定了防抖后的函数，快速点击这三个按钮9次，实际会执行3次；而用我这个防抖函数，相同的情况下还是只会执行一次点击事件的回调。</p><h3 id="处理多窗口时的行为"><a href="#处理多窗口时的行为" class="headerlink" title="处理多窗口时的行为"></a>处理多窗口时的行为</h3><p>上面的代码在只有一个浏览器窗口的时候已经可以正常工作了，但是如果打开了多个浏览器窗口，那么新开的窗口还是无法实现保留最后一个标签页的效果，所以还需要对上面的代码进行改造，对获取到的每个标签页进行 <code>windowId</code> 的判断。<br>而为了处理拖动标签页而触发的新建/合并窗口行为，还需要加入对 <code>chrome.windows</code> 的 <code>onCreated</code>和<code>onRemoved</code> 的监听。<br>还有在拖动行为进行的过程中，虽然窗口事件已经触发，但是此时尝试获取标签页信息时会抛出 <code>Tabs cannot be queried right now (user may be dragging a tab).</code> 的错误，所以还需要加入事件处理的延迟重试机制。</p><p>最终的代码修改为：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TabCount</span> {</span><br><span class="line">  normalTabCount = <span class="number">0</span>;</span><br><span class="line">  chromeTabCount = <span class="number">0</span>;</span><br><span class="line">  tabs = [];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> justDragged = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleTabsChange</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">let</span> tabs;</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    tabs = <span class="keyword">await</span> chrome.<span class="property">tabs</span>.<span class="title function_">query</span>({});</span><br><span class="line">  } <span class="keyword">catch</span> (error) {</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">message</span>.<span class="title function_">includes</span>(<span class="string">'dragging'</span>)) {</span><br><span class="line">      <span class="title function_">debounce</span>(handleTabsChange, <span class="number">200</span>)();</span><br><span class="line">      justDragged = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tabs) {</span><br><span class="line">    <span class="keyword">if</span> (justDragged) {</span><br><span class="line">      justDragged = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">debounce</span>(handleTabsChange, <span class="number">200</span>)();</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">  justDragged = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> tabsCount = [];</span><br><span class="line">  tabs.<span class="title function_">forEach</span>(<span class="function"><span class="params">t</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (!tabsCount[t.<span class="property">windowId</span>]) {</span><br><span class="line">      tabsCount[t.<span class="property">windowId</span>] = <span class="keyword">new</span> <span class="title class_">TabCount</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (t.<span class="property">url</span>.<span class="title function_">startsWith</span>(<span class="string">'chrome://'</span>)) {</span><br><span class="line">      tabsCount[t.<span class="property">windowId</span>].<span class="property">chromeTabCount</span>++;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      tabsCount[t.<span class="property">windowId</span>].<span class="property">normalTabCount</span>++;</span><br><span class="line">    }</span><br><span class="line">    tabsCount[t.<span class="property">windowId</span>].<span class="property">tabs</span>[t.<span class="property">index</span>] = t;</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  tabsCount.<span class="title function_">forEach</span>(<span class="function"><span class="params">tabCount</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (tabCount.<span class="property">normalTabCount</span> === <span class="number">1</span> &amp;&amp; tabCount.<span class="property">chromeTabCount</span> === <span class="number">0</span>) {</span><br><span class="line">      chrome.<span class="property">tabs</span>.<span class="title function_">create</span>({</span><br><span class="line">        <span class="attr">pinned</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">index</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">active</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">windowId</span>: tabCount.<span class="property">tabs</span>[<span class="number">0</span>].<span class="property">windowId</span>,</span><br><span class="line">      });</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (tabCount.<span class="property">normalTabCount</span> === <span class="number">0</span> &amp;&amp; tabCount.<span class="property">chromeTabCount</span> === <span class="number">1</span> &amp;&amp; tabCount.<span class="property">tabs</span>[<span class="number">0</span>].<span class="property">pinned</span>) {</span><br><span class="line">      chrome.<span class="property">tabs</span>.<span class="title function_">update</span>(tabCount.<span class="property">tabs</span>[<span class="number">0</span>].<span class="property">id</span>, {</span><br><span class="line">        <span class="attr">pinned</span>: <span class="literal">false</span>,</span><br><span class="line">      });</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (tabCount.<span class="property">tabs</span>[<span class="number">0</span>].<span class="property">pinned</span></span><br><span class="line">      &amp;&amp; (tabCount.<span class="property">normalTabCount</span> &gt; <span class="number">1</span></span><br><span class="line">        || tabCount.<span class="property">chromeTabCount</span> &gt; <span class="number">1</span></span><br><span class="line">        || (tabCount.<span class="property">normalTabCount</span> === <span class="number">0</span> &amp;&amp; tabCount.<span class="property">tabs</span>[<span class="number">1</span>].<span class="property">url</span>.<span class="title function_">startsWith</span>(<span class="string">'chrome://'</span>))</span><br><span class="line">      )</span><br><span class="line">    ) {</span><br><span class="line">      chrome.<span class="property">tabs</span>.<span class="title function_">remove</span>(tabCount.<span class="property">tabs</span>[<span class="number">0</span>].<span class="property">id</span>);</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    }, delay);</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="property">onRemoved</span>,</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="property">onCreated</span>,</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="property">onUpdated</span>,</span><br><span class="line">  chrome.<span class="property">windows</span>.<span class="property">onCreated</span>,</span><br><span class="line">  chrome.<span class="property">windows</span>.<span class="property">onRemoved</span>,</span><br><span class="line">].<span class="title function_">forEach</span>(<span class="function">(<span class="params">evt</span>) =&gt;</span> {</span><br><span class="line">  evt.<span class="title function_">addListener</span>(<span class="title function_">debounce</span>(handleTabsChange, <span class="number">200</span>));</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>如此，想要实现的效果就全部实现了。</p><h1 id="更新（2022年8月29日）"><a href="#更新（2022年8月29日）" class="headerlink" title="更新（2022年8月29日）"></a>更新（2022年8月29日）</h1><p>更新新版本 Chrome(104) 以后，tab 发生变化时，空白标签页的创建和删除变得异常缓慢，经常要等十几秒才有反应。一开始以为是新版浏览器调整了 API 的行为，搜索无果后，调试发现是上面代码中有一处极其浪费性能的垃圾代码……<br>举例来说就是声明了 <code>const tabsCount = []</code>，然后用 <code>tabsCount[t.windowId] = new TabCount()</code> 的方式向这个数组中添加元素，最后 <code>tabsCount.forEach</code> 遍历使用。在之前版本的 Chrome 中，<code>windowId</code> 的值普遍较小，基本都是十位数以内，所以这样使用没有太大问题；但是更新新版以后， windowId 的生成方式可能发生了变化，其值变得很大，此时 <code>tabsCount</code> 就会变成一个包含大量 <code>Empty</code> 元素的超长的数组，对其遍历会变得非常耗时。所以对相关代码进行如下优化：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tabsCount = {};</span><br><span class="line"><span class="keyword">for</span> <span class="title function_">await</span> (<span class="keyword">const</span> t <span class="keyword">of</span> tabs) {</span><br><span class="line">  <span class="keyword">if</span> (!(t.<span class="property">windowId</span> <span class="keyword">in</span> tabsCount)) {</span><br><span class="line">    <span class="keyword">const</span> w = <span class="keyword">await</span> chrome.<span class="property">windows</span>.<span class="title function_">get</span>(t.<span class="property">windowId</span>);</span><br><span class="line">    <span class="keyword">if</span> (w.<span class="property">type</span> === <span class="string">'normal'</span>) {</span><br><span class="line">      tabsCount[t.<span class="property">windowId</span>] = <span class="keyword">new</span> <span class="title class_">TabCount</span>();</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      tabsCount[t.<span class="property">windowId</span>] = <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tabsCount[t.<span class="property">windowId</span>] === <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (t.<span class="property">url</span>.<span class="title function_">startsWith</span>(<span class="string">'chrome://'</span>)) {</span><br><span class="line">    tabsCount[t.<span class="property">windowId</span>].<span class="property">chromeTabCount</span>++;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    tabsCount[t.<span class="property">windowId</span>].<span class="property">normalTabCount</span>++;</span><br><span class="line">  }</span><br><span class="line">  tabsCount[t.<span class="property">windowId</span>].<span class="property">tabs</span>[t.<span class="property">index</span>] = t;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(tabsCount).<span class="title function_">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> e !== <span class="literal">null</span>).<span class="title function_">forEach</span>( ... );</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="插件-amp-源码地址"><a href="#插件-amp-源码地址" class="headerlink" title="插件&amp;源码地址"></a>插件&amp;源码地址</h1><p>GitHub: <a href="https://github.com/debuggerx01/new_tab_before_close">https://github.com/debuggerx01/new_tab_before_close</a><br>WebStore: <a href="https://chrome.google.com/webstore/detail/newtabbeforeclose/mcilckjkimbaidjnbhjnidfmijeheoml">NewTabBeforeClose</a></p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> web </tag>
            
            <tag> 编程 </tag>
            
            <tag> Chrome </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIB275中控加焊USB接口&amp;无线carplay</title>
      <link href="/2021/04/28/make-my-car-support-wireless-carplay/"/>
      <url>/2021/04/28/make-my-car-support-wireless-carplay/</url>
      
        <content type="html"><![CDATA[<h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/demo_1.webp" alt="demo_1"></p><blockquote><p>无线carplay，手机和中控都不用插线了，上车自动连接，wifi互联投屏</p></blockquote><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/demo_2.webp" alt="demo_2"></p><blockquote><p>carplay版高德地图，中控屏显示地图导航，手机显示简洁信息，可以随便放在挡风玻璃前当HUD用或者放在一边充电</p></blockquote><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/demo_3.webp" alt="demo_3"></p><blockquote><p>手机越狱以后还可以直接在大屏上看视频啥的</p></blockquote><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>我这辆车的中控主机型号是 MIB275，使用体验真的是一言难尽……优点是反应还算快，音质马马虎虎，但是除此之外，导航难看（刷高德定制版后是顺眼些了但是每次启动自动进入导航界面，而且要连手机热点才能用，还是很不爽），蓝牙音乐功能简陋（无法实现音乐列表和封面图），所以很长时间我都是使用carplay来进行导航和听音乐。<br>但是这款主机只有前面板一个usb口（包括2020款的车，虽然升级的275C主机更大更漂亮，但是仍然只有前面一个usb口），使用时必须插根线，首先每次上车要先插线很麻烦，而且很容易车子震动大的时候连接断开，副驾拿东西操作空调切歌的时候也很容易碰到，一根线拖老远看着也很不爽。另外还有一个问题，carplay连接的时候蓝牙音乐就不能用了，所以我手机通过carplay导航的时候，老婆大人在副驾想听自己手机里的歌我还得把carplay断开，手机用支架放空调口直接导航，总之就是各种不爽。<br>各种研究以后，发现解决插线问题只需要买一个无线carplay的盒子就行（注意区分，不要买成安卓车机专用的，必须买原车有线carplay升级无线的盒子，我买的是carlinkit家的）；而只有一个usb而且在主机前面使用不方便的问题，参考了这个帖子：<a href="https://club.autohome.com.cn/bbs/thread/d1c6313eb1a873f1/92935542-1.html">MIB275改装USB接口位置</a> ，只能拆开主机自己焊一个上去了……<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_1.webp" alt="step_1"><br>首先是拆……就是用撬棒用大力～～<br>说的简单，实际第一次拆起来花了好久，很多地方很紧，不知道用多大力……<br>注意应该先吧空调面板那块从右边撬起来，因为空调面板的下侧正好压住主机面板，然后再用力把主机的面板完全拆掉。</p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_2.webp" alt="step_2"><br>然后想要把主机抽出来必须用专用的拆机钥匙，就是图中插在主机上面的两个东西，淘宝搜索大众主机拆机钥匙就行，注意要买四个。有些帖子说可以自己剪银行卡做，我试过了不行，强度太低根本没法用，咱们这个主机的卡扣弹簧太硬了……</p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_3.webp" alt="step_3"><br>经过一番折腾，终于把主机拆出来了，到这一步就已经花了我几天的摸索时间了<span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>这里想把主机从下位机上拆下来还要用一种专门的六角梅花螺丝刀，我也是拆到这里才知道又去买了一套螺丝刀头，快递又是等了一天。。</p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_4.webp" alt="step_4"><br>拆回主机带回家准备手术～<span class="github-emoji"><span>🔧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f527.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>左边就是买的一套螺丝刀，还挺好用的</p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_5.webp" alt="step_5"><br>背面，还是用同一个型号的六角螺丝刀把所有螺丝拧下来，拿掉后盖</p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_6.webp" alt="step_6"><br>上电烙铁，开始加热<span class="github-emoji"><span>♨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2668.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>注意锡焊还是挺需要技巧和经验的，除非你很有自信，不然还是找修手机修电脑或者修其他电器的师傅来弄吧，不然很容易弄坏机子，或者短路啊脱焊啊什么的……这种原厂主机拿到外面很难修的，很多地方直接说修不了，弄坏了网上再买一个最少2000，还不一定好用，总之还是小心为上，三思而行吧</p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_7.webp" alt="step_7"><br>买一根质量好点的usb2.0延长线，在差不多1米出头的位置剪断，剥好导线，等下就要按现在这个 黑-绿-白-红 的顺序焊在左下角的焊点上。这里我在塑料外壳和线的对应位置都挖了个槽，等下正好可以卡住，又能盖上后盖还把线引出来</p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_8.webp" alt="step_8"><br>手残，锡焊水平捉急，焊了半天才弄好[糗大了]，对比下上面帖子里人家焊好的样子简直是惨不忍睹……<br>所以最好还是找师傅弄，人家专业的一分钟不要就能焊好，还要比我这半天弄的好看还结实<span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_9.webp" alt="step_9"><br>焊好以后以防万一，先拿万用表把每个针脚一一测试一遍连通性，确认没有没焊上的或者短路的地方</p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_10.webp" alt="step_10"><br>这就是焊好的成果了，后面就用拖出来的这个usb母口，面板上的usb口有空淘个防尘塞堵上就不用了，还更美观<span class="github-emoji"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_11.webp" alt="step_11"><br>装回车上测试，这里手机的线就是插在新焊的延长线上的了，一切正常[鼓掌]<br>把延长线通过主机后面的空间塞进去，再从变速器箱副驾侧护板那边拽出来，延长线就布置好了<br>然后就去淘宝下单无线carplay的盒子吧<span class="github-emoji"><span>📦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_12.webp" alt="step_12"><br>盒子到了，插上以后自动连接，再点主机界面上的carplay图标就进入了盒子的连接界面<br>上面显示的就是我的手机了，只要手机打开蓝牙和wifi，车子启动一给盒子通电就会自动连接，非常方便</p><p><img src="/2021/04/28/make-my-car-support-wireless-carplay/step_13.webp" alt="step_13"><br>从副驾那边把变速器箱侧面的护板撬开，盒子和延长线母口就在这边的空隙放好，把护板装好就大功告成了～<br>可惜行车记录仪的电源线还是要从这边引到点烟器，不然就更清爽利索了</p>]]></content>
      
      
      <categories>
          
          <category> 技术之外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSONFormat4Flutter v0.9 更新说明</title>
      <link href="/2021/04/20/jsonformat4flutter-v0-9-nullsafety/"/>
      <url>/2021/04/20/jsonformat4flutter-v0-9-nullsafety/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/debuggerx01/JSONFormat4Flutter">JSONFormat4Flutter</a> 是一个通过输入 json 字符串，生成可以在 Flutter 项目中使用（其实不止）的 dart 语言实体类代码的 GUI 工具。初版编写于2018年1月，由于当时还没有好用的同类工具，所以按照个人的偏好和理解以相对简单粗暴的方式编写了该工具，代码质量惨不忍睹，万万没想到会持续更新到今天。。。</p></blockquote><h1 id="迁移到空安全"><a href="#迁移到空安全" class="headerlink" title="迁移到空安全"></a>迁移到空安全</h1><p>参考 <a href="https://github.com/debuggerx01/JSONFormat4Flutter/issues/30">dart 2.9 打开空安全后全错了，有计划兼容嘛？ #30</a>，在 Flutter 升级到2.0之后，默认开启空安全语法检查（参考：<a href="/2021/03/07/migrate-flutter-project-to-null-safety/">迁移Flutter项目到空安全的血泪史</a>），这个工具生成的 json 代码全部都报错了，主要问题如下：</p><ol><li>实例的变量需要在声明时初始化，或者在类的构造方法中进行初始化；</li><li>类的工厂方法不允许返回 null；</li><li>复杂逻辑下的可达性分析和空安全类型提升并不完美(例如对数组字段生成的赋值代码，循环中的 list 对象逻辑上不会为 null，但是语法检查器还是会将其判定为不安全的)</li></ol><p>例如：<br><img src="/2021/04/20/jsonformat4flutter-v0-9-nullsafety/error.webp" alt="error"></p><p>针对第一个问题，修改后生成的代码所有字段的类型均设置为可空。为什么不是保持字段类型为非空呢，参考：<a href="https://dart.cn/null-safety/understanding-null-safety#the-map-index-operator-is-nullable">Map 的索引操作符是可空的</a>，由于从 json 对象中用索引操作符方式取值时，其返回值就是可空的，而且事实上由于我们无法保证 json 字符串输入的可靠性，字段为可空是更合理的设计，在使用时总应考虑字段为空时应该如何处理，这样才能避免由于后台接口传来的数据问题导致程序出错。</p><p>第二个问题让我头疼了很久。在最初的设计中，为了方便使用，我为生成的模板类添加了工厂构造函数，这样就可以直接将 json 字符串或 json 对象传递给其构造函数来快速创建实体对象，如：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> HTTP.<span class="keyword">get</span>(url);</span><br><span class="line"><span class="keyword">var</span> resp = BeanResp(response.body);</span><br></pre></td></tr></tbody></table></figure><p>通过在构造函数中对输入值的判断，如果输入为空（如null、’’、’null’）时，返回的 response 即为 null。但是新的空安全语法中，构造函数不允许返回 null，这就使得设计变得不可行（参考：<a href="https://dart.cn/null-safety/faq#how-should-i-migrate-a-factory-that-can-return-null">我应该如何迁移可能返回 null 的工厂方法？</a>）。最终我是新增了 parse(jsonStr) 静态方法，用于替代之前的工厂构造函数，推荐在项目中优先使用该方法进行解析，也就是说上面的代码可以写成：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> HTTP.<span class="keyword">get</span>(url);</span><br><span class="line"><span class="keyword">var</span> resp = BeanResp.parse(response.body);</span><br></pre></td></tr></tbody></table></figure><p>而且这样以来也有一个好处，就是在对网络请求框架进行封装的时候，参考我在<a href="https://juejin.cn/post/6844903639832608775">在Flutter开发过程中快速生成json解析模板类的工具 | 掘金技术征文</a>中给出的示例，解析处的代码需要写成：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> HTTP.<span class="keyword">get</span>(url);</span><br><span class="line">Person data = BaseResp&lt;Person&gt;(response.body, (res) =&gt; Person.fromJson(res)).data;</span><br><span class="line"><span class="comment">///<span class="language-markdown">或者</span></span></span><br><span class="line">Phone data = BaseResp&lt;Phone&gt;(response.body, (res) =&gt; Phone.fromJson(res)).data;</span><br></pre></td></tr></tbody></table></figure><p>现在在基类代码基本不变的情况下，代码可以写成：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span> <span class="keyword">show</span> json;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseResp</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">  <span class="built_in">int?</span> code;</span><br><span class="line">  <span class="built_in">String?</span> msg;</span><br><span class="line">  T? data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> BaseResp(jsonStr, <span class="built_in">Function</span> buildFun) =&gt;</span><br><span class="line">      jsonStr <span class="keyword">is</span> <span class="built_in">String</span> ? BaseResp.fromJson(json.decode(jsonStr), buildFun) : BaseResp.fromJson(jsonStr, buildFun);</span><br><span class="line"></span><br><span class="line">  BaseResp.fromJson(jsonRes, <span class="built_in">Function</span> buildFun) {</span><br><span class="line">    code = jsonRes[<span class="string">'code'</span>];</span><br><span class="line">    msg = jsonRes[<span class="string">'msg'</span>];</span><br><span class="line">    <span class="comment">/// <span class="language-markdown">这里可以做code和msg的处理逻辑</span></span></span><br><span class="line">    data = buildFun(jsonRes[<span class="string">'data'</span>]);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>解析处的代码可以写成：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> HTTP.<span class="keyword">get</span>(url);</span><br><span class="line">Person data = BaseResp&lt;Person&gt;(response.body, Person.parse).data;</span><br><span class="line"><span class="comment">///<span class="language-markdown">或者</span></span></span><br><span class="line">Phone data = BaseResp&lt;Phone&gt;(response.body, Phone.parse).data;</span><br></pre></td></tr></tbody></table></figure><p>代码相对精简了一点</p><p>使用新版本生成的上面报错类的代码如下：<br><img src="/2021/04/20/jsonformat4flutter-v0-9-nullsafety/ok.webp" alt="ok"></p><h1 id="使用-nuitka3-打包-Linux-下的二进制程序为-AppImage"><a href="#使用-nuitka3-打包-Linux-下的二进制程序为-AppImage" class="headerlink" title="使用 nuitka3 打包 Linux 下的二进制程序为 AppImage"></a>使用 nuitka3 打包 Linux 下的二进制程序为 AppImage</h1><blockquote><p>参看：<a href="https://github.com/debuggerx01/JSONFormat4Flutter/issues/29">0.8无linux版本下载 #29</a>，一开始选择使用 PyQt 写这个工具，就是看中它的跨平台能力，可以方便地使用 Pyinstaller 进行三个桌面平台打包发布（当然如果是现在，可能 Electron 或者 Flutter for Desktop 会是更好的选择）。但是后面发现，使用 Pyinstaller 打包的方案在 Windows 和 MacOS 上表现还算良好，而在 Linux 平台下，不光打出的包要大很多，而且兼容性很有问题，在比较新的系统上进行打包，放到相对老一点的系统大概率打不开。</p></blockquote><p>于是现在在 Linux 平台下改用 nuitka3 打包为 AppImage 格式。在我的 Deepin Linux 下安装配置和打包的操作如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 nuitka3</span></span><br><span class="line">pip3 install nuitka3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装编译所需的依赖</span></span><br><span class="line">sudo apt install clang python3-dev chrpath</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包为 AppImage</span></span><br><span class="line">nuitka3 --clang --standalone --windows-disable-console --linux-onefile-icon=logo.png --output-dir=output --show-progress --plugin-enable=qt-plugins --onefile formatter.py</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="https://www.nuitka.net/posts/nuitka-release-0610.html">Nuitka Release 0.6.10</a></p><blockquote><p>Added experimental support for Onefile mode with –onefile that uses AppImage on Linux and our own bootstrap binary on Windows. Other platforms are not supported at this time. With this, the standalone folder is packed into a single binary. The Windows variant currently doesn’t yet do any compression yet, but the Linux one does.</p></blockquote><p>这个版本开始可以通过加入 <code>--onefile</code> 参数，在 Linux 平台下使用 AppImage 打包～</p><h1 id="全平台都可以直接双击运行工具了-clap"><a href="#全平台都可以直接双击运行工具了-clap" class="headerlink" title="全平台都可以直接双击运行工具了:clap:"></a>全平台都可以直接双击运行工具了<span class="github-emoji"><span>👏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><p>得益于多数 Linux 桌面对 AppImage 的支持，再来本人前段时间不得已订阅了 Apple 开发者账号，现在三个桌面平台运行程序都不用再输入命令了：<br>linux:<br>直接双击运行 formatter_linux.AppImage</p><p>mac：<br>双击解压 formatter_mac.zip 后即可双击 formatter.app</p><p>windows：<br>直接双击运行 formatter_win.exe</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> flutter </tag>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迁移Flutter项目到空安全的血泪史——有血、有泪、有💩</title>
      <link href="/2021/03/07/migrate-flutter-project-to-null-safety/"/>
      <url>/2021/03/07/migrate-flutter-project-to-null-safety/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2021年3月4日，Flutter正式发布2.0版本——这一天，我回想起了，被脱发支配的恐怖……发际线再次失守的屈辱……</p></blockquote><h1 id="升级后的错误修复"><a href="#升级后的错误修复" class="headerlink" title="升级后的错误修复"></a>升级后的错误修复</h1><p>如果升级后打开已有项目，还能够正常通过编译，那么恭喜你，这说明你拥有作为 IT 人的最强技能——强运，且敏捷属性点满自带回避 BUG 和异常的效果 <span class="github-emoji"><span>👍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><blockquote><p>然而其实除非项目规模太小，就没引入几个依赖包，大概率此时会因为依赖冲突或者其他插件包内的错误导致编译失败的 <span class="github-emoji"><span>😑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 。比如我在做的公司项目，引入了接近 40 个依赖和插件，结果自然是原地爆炸 <span class="github-emoji"><span>😒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>……下面就以我的情况为例，介绍一下几种常见情况的处理方法。</p></blockquote><h2 id="charts-flutter-与-flutter-localizations-冲突"><a href="#charts-flutter-与-flutter-localizations-冲突" class="headerlink" title="charts_flutter 与 flutter_localizations 冲突"></a>charts_flutter 与 flutter_localizations 冲突</h2><p>我的项目中使用了 <a href="https://pub.flutter-io.cn/packages/charts_flutter">charts_flutter</a> 这个库用于图表的显示，升级 SDK 后执行 <code>flutter pub get</code> 安装依赖时第一个报出的错误就是：<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/error1.webp" alt="error1"><br>根据报错信息得知，charts_flutter 这个库指定了其引用的 intl 库版本小于 0.17.0，而更新后 flutter SDK 中引用的 intl 库版本正好就是 0.17.0，所以引发了冲突。<br>碰到这种库中的依赖与 SDK 中的引用冲突的情况，应该优先去库的 issue 区看看有没有相关的讨论，比如：<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/issue1.webp" alt="issue1.webp"><br>然后可以找到这样一个谈论：<a href="https://github.com/google/charts/issues/579">Add null safety #579</a>，其中提到了两种解决方案：</p><h3 id="依赖版本覆盖法-dependency-overrides"><a href="#依赖版本覆盖法-dependency-overrides" class="headerlink" title="依赖版本覆盖法 dependency_overrides"></a>依赖版本覆盖法 dependency_overrides</h3><p>这是一种相对比较直接粗暴的方法，既然问题处在一个A包要求引用的C包小于某个版本，而B包要求引用的C包恰好大于等于这个版本，那么如果实际上A包实际上也能正常使用高版本的C包，只是因为依赖关系还没来得及更新，那么可以在我们项目的<code>pubspec.yaml</code>中加上类似这样的一段：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependency_overrides:</span></span><br><span class="line">  <span class="attr">intl:</span> <span class="string">^0.17.0</span></span><br></pre></td></tr></tbody></table></figure><p>这样 <code>flutter pub get</code> 时就会忽略上面的错误，尝试使用高版本的包进行依赖分析和下载。</p><h3 id="修改依赖法-通过-git-方式引用修改过的库"><a href="#修改依赖法-通过-git-方式引用修改过的库" class="headerlink" title="修改依赖法 通过 git 方式引用修改过的库"></a>修改依赖法 通过 git 方式引用修改过的库</h3><p>上面的修改完成后，这个包就可以通过依赖检查和编译了。但是当我升级了另外一个包时，又出现冲突，这次显示的是 charts_flutter 所以引用的 flutter_svg 这个库的版本和其他库有冲突。<br>这个问题在上面的 issue 中也有人提到，一种方法是继续增加 dependency_overrides：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependency_overrides:</span></span><br><span class="line">  <span class="attr">intl:</span> <span class="string">^0.17.0</span></span><br><span class="line">  <span class="attr">flutter_svg:</span> <span class="string">^0.19.3</span></span><br></pre></td></tr></tbody></table></figure><p>这样会导致这个覆盖列表越来越长，后面会忘记每条覆盖都是为了解决哪个库的冲突，所以还可以用另一种方式，将原本<code>pubspec.yaml</code>中的依赖从：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="string">……</span></span><br><span class="line">  <span class="attr">charts_flutter:</span> <span class="string">^0.9.0</span></span><br><span class="line">  <span class="string">……</span></span><br></pre></td></tr></tbody></table></figure><p>改为：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="string">……</span></span><br><span class="line">  <span class="attr">charts_flutter:</span></span><br><span class="line">    <span class="attr">git:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">charts_flutter</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://github.com/ahammer/charts.git</span></span><br><span class="line">  <span class="string">……</span></span><br></pre></td></tr></tbody></table></figure><p>这样的形式，也就是让<code>flutter pub get</code>解决下载依赖包时从制定的 git 仓库获取，而不是 pub 仓库。上面地址中的 charts_flutter 的依赖已经被仓库所有者更改过，避免了之前碰到的冲突。等到库的原作者更新了版本解决了问题，只要把这里的 git 依赖删掉，重新改为指定版本的形式，就可以切换回从 pub 仓库下载依赖，而不用去管 dependency_overrides 的问题了。</p><h2 id="device-preview-编译错误"><a href="#device-preview-编译错误" class="headerlink" title="device_preview 编译错误"></a>device_preview 编译错误</h2><blockquote><p><a href="https://pub.flutter-io.cn/packages/device_preview">device_preview</a> 是一个非常神奇且实用的工具包，参考这个在线 demo ：<a href="https://flutter-device-preview.firebaseapp.com/#/starter">device-preview-starter</a>，它可以让我们在开发时在同一个界面上模拟查看 app 在各种平台和设备上的运行显示效果，非常适合做页面适配时的预览。除此之外，它还提供了快速切换语言、明暗主题、屏幕方向等功能。</p></blockquote><p>当解决了各种依赖冲突之后，终于能够执行 <code>flutter run</code>编译项目，然而却报错了：<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/error2.webp" alt="error2.webp"><br>还是老样子，根据报错，确定是 <code>device_preview</code> 这个包的错误，那么去翻一下 issue，然后可以找到这个讨论：<a href="https://github.com/aloisdeniel/flutter_device_preview/issues/91">No named parameter with the name ‘nullOk’ #91</a> ：<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/issue2.webp" alt="issue2.webp"><br>也就是说出错的原因是包中使用的一个flutter API发生了变化，所以只能升级包的版本：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="string">……</span></span><br><span class="line">  <span class="attr">device_preview:</span> <span class="string">^0.6.2-beta</span></span><br><span class="line">  <span class="string">……</span></span><br></pre></td></tr></tbody></table></figure><p>这样就能编译通过了。</p><h1 id="迁移至空安全"><a href="#迁移至空安全" class="headerlink" title="迁移至空安全"></a>迁移至空安全</h1><blockquote><p>关于空安全是什么，有什么好处，主要可以看看下面的文章和视频：</p></blockquote><ul><li><a href="https://dart.cn/null-safety">dart-doc : 健全的空安全</a></li><li><a href="https://dart.cn/null-safety/understanding-null-safety">dart-doc : 深入理解空安全</a></li></ul><iframe id="bili1" width="100%" src="//player.bilibili.com/player.html?aid=711531376&amp;bvid=BV1TD4y1U7ST&amp;cid=218839091&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili1 = document.querySelector('#bili1');    var container = document.querySelector('#article-container');    bili1.height = (container.clientWidth * 3 / 4) + 'px';</script><p>或许你在以往的开发过程中早就苦于各种“空异常（NPE）”久矣，或者看了上面的资料后中对现代化语言中关于“空安全”的讨论后，应该能够理解将整个项目迁移到空安全语法中可以大大降低程序出错的概率，从而节省了debug的时间提高了开发效率。然而迁移已有工程到空安全并不是一件容易的事……</p><p>关于迁移的官方建议和演示可以参考：</p><ul><li><a href="https://dart.cn/null-safety/migration-guide">dart-doc : 迁移至空安全</a></li></ul><iframe id="bili2" width="100%" src="//player.bilibili.com/player.html?aid=799460080&amp;bvid=BV1sy4y1a7SA&amp;cid=305745798&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili2 = document.querySelector('#bili2');    var container = document.querySelector('#article-container');    bili2.height = (container.clientWidth * 3 / 4) + 'px';</script><blockquote><p>官方推荐的迁移流程是：<br>    1. 等待项目依赖的所有软件包迁移完成。<br>    2. 迁移项目代码，最好使用交互式的迁移工具。<br>    3. 确保静态分析所有问题已被解决（IDE不再有报错）。<br>    4. 运行代码，测试程序运行。<br>    然而我觉得这有些过于理想不太现实……<br>    首先，我的项目中的包相对比较多，相当一部分的包还没有迁移到空安全：<br>    <img src="/2021/03/07/migrate-flutter-project-to-null-safety/outdate.webp" alt="outdate.webp"><br>    而且其中有些包年久失修，想要等它们全部自己更新不知还要多久……另外官方推荐的那个交互式迁移工具感觉也不是很好用。</p></blockquote><p>所以我的建议是，为了趁早获得空安全语法对后续开发的效率提升，可以先手工迁移项目中的源码，然后看情况更新一部分依赖包为 nullsafety 版本，并将项目的编译模式改为<code>非健全的空安全混合模式</code>，之后持续更新依赖包，并视情况手动更新一些升级无望的小众依赖包。</p><h2 id="更新项目代码"><a href="#更新项目代码" class="headerlink" title="更新项目代码"></a>更新项目代码</h2><p>做好心理准备，如果项目已经具有相当规模，接下来的修改将会是一场持久战（我花了大约5个多小时 <span class="github-emoji"><span>💀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f480.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</p><h3 id="修改项目配置，激活空安全检查"><a href="#修改项目配置，激活空安全检查" class="headerlink" title="修改项目配置，激活空安全检查"></a>修改项目配置，激活空安全检查</h3><p><img src="/2021/03/07/migrate-flutter-project-to-null-safety/migrate1.webp" alt="migrate1.webp"><br>如图，先修改项目的<code>pubspec.yaml</code>文件，将最低 SDK 版本设置到 2.12.0：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">sdk:</span> <span class="string">'&gt;=2.12.0 &lt;3.0.0'</span></span><br></pre></td></tr></tbody></table></figure><p>然后执行<code>dart pub get</code>命令重新生成软件包的配置文件，点击 IDE 中 dart 静态分析器的刷新按钮，之后将看到分析出的项目中不符合空安全语法的错误：<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/migrate2.webp" alt="migrate2.webp"></p><h3 id="善用-IDE-提示功能及自动修正功能-逐个修复所有问题"><a href="#善用-IDE-提示功能及自动修正功能-逐个修复所有问题" class="headerlink" title="善用 IDE 提示功能及自动修正功能 逐个修复所有问题"></a>善用 IDE 提示功能及自动修正功能 逐个修复所有问题</h3><p>这一步就是大量的重复工作，简单来说是按需添加 ?、!、required 以及 late 来消除静态错误，但具体应该用哪个，实际上还是比较考验对 dart 语言的精通程度以及对 flutter 框架的理解的。举几个例子：</p><ol><li><p>‘?’ 还是 ‘!’<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/migrate3.webp" alt="migrate3.webp"><br>在上图所示的问题处，IDE给我们的提示是，由于 <code>addPostFrameCallback</code> 方法可能作用于 ‘null’，所以需要在 <code>WidgetsBinding.instance</code> 的后面加上 ‘?’ 或者 ‘!’。如果只是为了修复语法错误，两者都是可以的，但实际上效果却完全不同：</p><ol><li>如果使用了 ‘?’ ，那么运行时 runtime 还是会对<code>WidgetsBinding.instance</code>进行null检查，如果为空则不继续调用<code>addPostFrameCallback</code> 方法，从而避免了NPE异常，但缺点是非空检查会带来额外的性能开销；</li><li>如果使用了’!’，那么运行时 runtime 就不会对<code>WidgetsBinding.instance</code>进行null检查，可能会导致运行时的 NPE 空异常。</li></ol><p>查看<code>WidgetsBinding.instance</code>的源码如下：<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/migrate4.webp" alt="migrate4.webp"><br>可以得知，如果是在执行<code>runApp</code>之前调用此属性，那么需要先执行<code>WidgetsFlutterBinding.ensureInitialized()</code>方法确保其不为空，也就是说，只要是在<code>runApp</code>之后的代码里<code>WidgetsBinding.instance</code>都不会为 ‘null’ 的——查看<code>runApp</code>的源码如下：<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/migrate5.webp" alt="migrate5.webp"><br>可以看到该方法内已经执行了<code>WidgetsFlutterBinding.ensureInitialized()</code>。<br>由于我们的 App 都是以<code>runApp</code>作为入口开始的界面显示和事件循环，所以是可以保证<code>WidgetsBinding.instance</code>不为 ‘null’ 的，那么为了提高效率，项目中所有类似的错误都是可以放心大胆地使用 ‘!’ 来进行空安全语法的修复的。</p></li><li><p>‘required’ 和 ‘@required’<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/migrate6.webp" alt="migrate6.webp"><br>如上图的错误所示，在之前的语法中，函数定义中的命名参数默认是可选的，而调用时必填的参数则用 <code>@required</code> 修饰。而在新的空安全语法中，命名参数只允许有三种情况：</p><ol><li>使用 ‘required’ 前缀修饰符，表示其调用时必须传入非空的值；</li><li>使用 ‘?’ 修饰其类型，表示调用时可以传入空值或不指明；</li><li>给该参数设置非空默认值。</li></ol><p>由于之前项目代码里所有用 ‘@required’ 修饰的代码都符合第一种情况，所以可以利用 IDE 的全局替换功能，直接把项目代码中所有的 ‘@required’ 批量替换成 ‘required’，节省一部分手工修改的工作量。</p></li><li><p>‘dynamic’ 和 ‘Object’<br>项目中有些页面包含了相似的组件，比如一列按钮，这时会有类似这样的代码：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    <span class="keyword">final</span> options = [</span><br><span class="line">      [</span><br><span class="line">        context.s.settings_label_upgrade,</span><br><span class="line">        () =&gt; context.n.pushNamed(SettingPagesRouter.upgrade),</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        context.s.settings_label_app_setting,</span><br><span class="line">        () =&gt; context.n.pushNamed(SettingPagesRouter.appSettings),</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        context.s.settings_label_share,</span><br><span class="line">        H.voidFunc,</span><br><span class="line">      ],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: options</span><br><span class="line">          .map((e) =&gt; GestureDetector(</span><br><span class="line">                onTap: e[<span class="number">1</span>],</span><br><span class="line">                child: Text(e[<span class="number">0</span>]),</span><br><span class="line">              ))</span><br><span class="line">          .toList(),</span><br><span class="line">    );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>也就是将这些组件的一些属性提取出来作为数组，在代码中循环动态生成组件并应用这些属性。上面的代码在之前的语法中是正常的，因为<code>options.map((e) =&gt; ...)</code>这里的 e 的类型会被当作 <code>List&lt;dynamic&gt;</code>，也就是 e 中的元素都是任意类型，传入到需要 <code>String</code> 类型的地方它就会被当作字符串使用，传入需要函数的位置它就会被当作是函数使用，语法检查器不会报错。<br>但是新语法下，会报如下错误：<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/migrate7.webp" alt="migrate7.webp"><br>也就是说现在如果以字面量方式声明一个 var 类型的数组，而且数组内的类型不止一种，那么语法检查器会认为数组的类型为<code>List&lt;Object&gt;</code>而不是<code>List&lt;dynamic&gt;</code>，Object 虽然是所有非空类型的父类，但是和 dynamic 不同，不能自动隐式转换为所需类型。所以这里有三种改法：</p><ol><li>使用 as 显式转换类型： <figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Column(</span><br><span class="line">    children: options</span><br><span class="line">        .map((e) =&gt; GestureDetector(</span><br><span class="line">              onTap: e[<span class="number">1</span>] <span class="keyword">as</span> GestureTapCallback,</span><br><span class="line">              child: Text(e[<span class="number">0</span>] <span class="keyword">as</span> <span class="built_in">String</span>),</span><br><span class="line">            ))</span><br><span class="line">        .toList(),</span><br><span class="line">  );</span><br></pre></td></tr></tbody></table></figure></li><li>指定数组类型为<code>List&lt;dynamic&gt;</code>： <figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt;&gt; options = [ …… ];</span><br></pre></td></tr></tbody></table></figure></li><li>不用数组，改为定义class：<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/migrate8.webp" alt="migrate8.webp"></li></ol></li></ol><blockquote><p>其他还有一些迁移中容易碰到的问题，建议阅读：<a href="https://dart.cn/null-safety/faq">空安全：常见问题</a></p></blockquote><h2 id="运行混合版本的代码"><a href="#运行混合版本的代码" class="headerlink" title="运行混合版本的代码"></a>运行混合版本的代码</h2><p>迁移完成之后，即使语法检查全部通过，IDE 不再报错，此时运行项目还是会报如下错误：<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/migrate9.webp" alt="migrate9.webp"></p><p>参考：<a href="https://dart.cn/null-safety/unsound-null-safety">dart-doc : 非健全的空安全</a>，最简单实用的方法还是在<code>lib/main.dart</code>的第一行加入<code>// @dart=2.9</code>：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @dart=2.9</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'src/my_app.dart'</span>;</span><br><span class="line"></span><br><span class="line">main() {</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样在开发编写代码时，可以享受空安全语法检查带来的体验提升，而在编译时使用混合模式，不强制所有的依赖包都完全迁移到了空安全。</p><h2 id="逐步迁移依赖库"><a href="#逐步迁移依赖库" class="headerlink" title="逐步迁移依赖库"></a>逐步迁移依赖库</h2><p>为了最终可以实现整个项目<code>健全的空安全</code>模式，还是需要一步步迁移依赖库的。首先还是运行<code>dart pub outdated --mode=null-safety</code>命令，根据提示将已经发布了 nullsafety 版本的库的版本更新，然后运行<code>flutter pub get</code>看看是否存在依赖冲突，如果有的话用上面的方法尝试解决，不行的话则将对应的包的版本回退，优先确保项目能够正常运行。<br>之后每隔一段时间，比如一周左右，重复上面的操作，直至所有的依赖包不再冲突，全部升级为 nullsafety 版本后，删除<code>lib/main.dart</code>第一行的<code>// @dart=2.9</code>注释，使整个项目运行于健全的空安全模式。</p><h2 id="手动修改部分依赖包"><a href="#手动修改部分依赖包" class="headerlink" title="手动修改部分依赖包"></a>手动修改部分依赖包</h2><p>而对于某些小众的、升级无望的依赖包，可以尝试用本地引用的方式加入项目代码库，然后手动升级为 nullsafety 版本。<br>以我在 <a href="/2021/02/18/qrs-detector-for-flutter-in-dart/">qrs_detector——Flutter应用中的心电心率识别</a> 中提到的 <a href="https://pub.flutter-io.cn/packages/iirjdart">iirjdart</a> 这个库为例，它是一个很小众的用于信号滤波的库，从 2020-05-01 上传 0.0.1 版本以来没有过任何更新，仓库的 issue 区也没有任何活动，所以很可能作者不会主动去更新为 nullsafety 版本了。而且使用到现在，这个库本身的逻辑工作得相当稳定，也没有依赖其他什么包，所以很适合自己手工移植。</p><h3 id="复制库源码至项目目录下"><a href="#复制库源码至项目目录下" class="headerlink" title="复制库源码至项目目录下"></a>复制库源码至项目目录下</h3><blockquote><p>为了便于管理，我在项目根目录下创建了名为<code>3rd_party</code>的目录，将所有需要修改的第三方库的源码放在这个目录下</p></blockquote><p>首先找到依赖库的源码，可以从本地缓存目录中复制，利用 IDE 快速找到缓存的源码位置方法如下：<br><img src="/2021/03/07/migrate-flutter-project-to-null-safety/migrate10.webp" alt="migrate10.webp"></p><p>或者也可以从 GitHub 上下载源码。<br>之后把整个源码目录去掉版本号，复制到创建的<code>3rd_party</code>目录下，删除源码内包括<code>example</code>在内等无用的代码和资源。</p><h3 id="修改项目的pubspec-yaml，改为路径引用的方式："><a href="#修改项目的pubspec-yaml，改为路径引用的方式：" class="headerlink" title="修改项目的pubspec.yaml，改为路径引用的方式："></a>修改项目的<code>pubspec.yaml</code>，改为路径引用的方式：</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="string">……</span></span><br><span class="line">  <span class="attr">iirjdart:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">3rd_party/iirjdart</span></span><br><span class="line">  <span class="string">……</span></span><br></pre></td></tr></tbody></table></figure><h3 id="将库改为支持-nullsafety-语法"><a href="#将库改为支持-nullsafety-语法" class="headerlink" title="将库改为支持 nullsafety 语法"></a>将库改为支持 nullsafety 语法</h3><p>修改<code>3rd_party</code>下库源码中的<code>pubspec.yaml</code>，和前面的操作一样，改为</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">sdk:</span> <span class="string">'&gt;=2.12.0 &lt;3.0.0'</span></span><br></pre></td></tr></tbody></table></figure><p>然后执行<code>dart pub get</code>命令重新生成软件包的配置文件，此时 IDE 即会显示该库的语法错误，用之前使用的各种技巧修改源码，使其通过语法检查。</p><blockquote><p>有时候改完库的源码后，由于对外暴露的 API 也发生了变更，可能还需要回过头来改项目中调用位置的代码，需要注意一下</p></blockquote><h3 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h3><p>这样修改之后，需要尽量进行全面的测试，确保没有给库带来意外的问题。如果确定修改成功，则可以在补完其<code>example</code>之后，通过提交 pr 的方式向库的原仓库贡献。这样一旦原作者接受 pr ，其他使用这个库的用户就可以方便的使用你修改的版本，而且项目中的依赖方式也可以不用再使用路径引用的方式，可以及时获得后续的更新。</p><blockquote><p>写到这里，本次 Flutter 更新后项目代码修改移植的经历和经验就差不多完成了……但是实际上和 nullsafety 有关的尝试和折腾还远没有结束。。。后面几篇文章还会记录一下，我将自己三年前编写的、用于在 Flutter 开发中生成 json 解析模板类的工具更新到支持 nullsafety 语法的过程，以及我解决由于版本更新后，Flutter 的 Android Studio 多语言本地化插件不能正常工作的方法～</p></blockquote><h1 id="更新（2021-5-14）"><a href="#更新（2021-5-14）" class="headerlink" title="更新（2021-5-14）"></a>更新（2021-5-14）</h1><p>终于、终于，项目的全部依赖都已迁移至空安全<span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。这么长时间以来，项目中只剩三个钉子户一直没能更新，现在分别记录下：</p><h3 id="scidart"><a href="#scidart" class="headerlink" title="scidart"></a>scidart</h3><p>这是个科学计算的库，用项目中实时心率识别的算法。在我的“反复催促”下最终由作者更新： <a href="https://github.com/scidart/scidart/issues/24">Migrate to null safety #24</a></p><h3 id="flutter-custom-dialog"><a href="#flutter-custom-dialog" class="headerlink" title="flutter_custom_dialog"></a>flutter_custom_dialog</h3><p>这是一个用于弹出自定义对话框的库，还是很好用的，但是已经很久没有维护了。最终有位大兄弟 fork 了一份，更新为空安全后上传至了 pub 仓库为 <a href="https://pub.flutter-io.cn/packages/flutter_custom_dialog_tv">flutter_custom_dialog_tv</a>，所以将依赖更新为： <code>flutter_custom_dialog_tv: ^1.0.20-nullsafety</code> 即可。</p><h3 id="charts-flutter"><a href="#charts-flutter" class="headerlink" title="charts_flutter"></a>charts_flutter</h3><p>这是一个由谷歌员工上传的图表库，拥有极高的使用量和人气，但是原作者同样很久没有及时更新，而且由于该库的实现相当“学术派”，很难自己修改迁移为空安全……在长期关注了 <a href="https://github.com/google/charts/issues/579">Add null safety #579</a> 这个讨论无果后，最终我决定将其替换为 <a href="https://pub.flutter-io.cn/packages/fl_chart">fl_chart</a> 这个库，并重新实现相关的项目代码……</p><p>至此，终于可以移除 <code>lib/main.dart</code>中的<code>// @dart=2.9</code>标记，项目完全运行在健全的空安全模式了 <span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> flutter </tag>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一个由护手霜引发的BUG</title>
      <link href="/2021/02/23/a-app-bug-caused-by-hand-cream/"/>
      <url>/2021/02/23/a-app-bug-caused-by-hand-cream/</url>
      
        <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>前段时间，忽然注意到在做的 Flutter 项目的日志收集系统中出现了几个异常的用户，他们的日志中出现了大量错误，报错数量多达几千甚至上万：<br><img src="/2021/02/23/a-app-bug-caused-by-hand-cream/debugger_log.webp" alt="debugger_log.webp"></p><p>而且是同一个错误在一段时间内频繁触发，间隔不过十几毫秒：<br><img src="/2021/02/23/a-app-bug-caused-by-hand-cream/log.webp" alt="log.webp"></p><p>其具体的错误堆栈信息为：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">│ ⛔ Null check operator used on a null value</span><br><span class="line">│ ⛔ #0      _AndroidMotionEventConverter.toAndroidMotionEvent.&lt;anonymous closure&gt; (package:flutter/src/services/platform_views.dart:601)</span><br><span class="line">│ ⛔ #1      MappedIterable.elementAt (dart:_internal/iterable.dart:374)</span><br><span class="line">│ ⛔ #2      ListIterator.moveNext (dart:_internal/iterable.dart:343)</span><br><span class="line">│ ⛔ #3      new List.from (dart:core-patch/array_patch.dart:38)</span><br><span class="line">│ ⛔ #4      new List.of (dart:core-patch/array_patch.dart:68)</span><br><span class="line">│ ⛔ #5      SetMixin.toList (dart:collection/set.dart:102)</span><br><span class="line">│ ⛔ #6      _AndroidMotionEventConverter.toAndroidMotionEvent (package:flutter/src/services/platform_views.dart:602)</span><br><span class="line">│ ⛔ #7      AndroidViewController.dispatchPointerEvent (package:flutter/src/services/platform_views.dart:864)</span><br><span class="line">│ ⛔ #8      _PlatformViewGestureRecognizer.handleEvent (package:flutter/src/rendering/platform_view.dart:535)</span><br><span class="line">│ ⛔ #9      PointerRouter._dispatch (package:flutter/src/gestures/pointer_router.dart:77)</span><br><span class="line">│ ⛔ #10     PointerRouter._dispatchEventToRoutes.&lt;anonymous closure&gt; (package:flutter/src/gestures/pointer_router.dart:122)</span><br><span class="line">│ ⛔ #11     _LinkedHashMapMixin.forEach (dart:collection-patch/compact_hash.dart:377)</span><br><span class="line">│ ⛔ #12     PointerRouter._dispatchEventToRoutes (package:flutter/src/gestures/pointer_router.dart:120)</span><br><span class="line">│ ⛔ #13     PointerRouter.route (package:flutter/src/gestures/pointer_router.dart:106)</span><br><span class="line">│ ⛔ #14     GestureBinding.handleEvent (package:flutter/src/gestures/binding.dart:358)</span><br><span class="line">│ ⛔ #15     GestureBinding.dispatchEvent (package:flutter/src/gestures/binding.dart:338)</span><br><span class="line">│ ⛔ #16     RendererBinding.dispatchEvent (package:flutter/src/rendering/binding.dart:267)</span><br><span class="line">│ ⛔ #17     GestureBinding._handlePointerEvent (package:flutter/src/gestures/binding.dart:295)</span><br><span class="line">│ ⛔ #18     GestureBinding._flushPointerEventQueue (package:flutter/src/gestures/binding.dart:240)</span><br><span class="line">│ ⛔ #19     GestureBinding._handlePointerDataPacket (package:flutter/src/gestures/binding.dart:213)</span><br><span class="line">│ ⛔ #20     _rootRunUnary (dart:async/zone.dart:1206)</span><br><span class="line">│ ⛔ #21     _CustomZone.runUnary (dart:async/zone.dart:1100)</span><br><span class="line">│ ⛔ #22     _CustomZone.runUnaryGuarded (dart:async/zone.dart:1005)</span><br><span class="line">│ ⛔ #23     _invoke1 (dart:ui/hooks.dart:265)</span><br><span class="line">│ ⛔ #24     _dispatchPointerDataPacket (dart:ui/hooks.dart:174)</span><br><span class="line">│ ⛔ </span><br></pre></td></tr></tbody></table></figure><p>可以看到错误的调用栈完全在 SDK 层，不包含我写的业务逻辑代码，而且凭我对 Flutter 架构的了解，看到错误来自 <code>/services/platform_views.dart</code>，基本可以确定这是项目里引入的 <a href="https://pub.flutter-io.cn/packages/webview_flutter">WebView</a> 插件抛出的异常。</p><p>但奇怪的是，与 WebView 相关的代码已经很久没有动过了，简单回忆一下最近的项目的所有更新，也不像是会有导致这样问题的更改，感觉很是懵逼……</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>好在这个问题并不难查，直接以错误堆栈第一行的 <code>_AndroidMotionEventConverter.toAndroidMotionEvent</code> 作为关键词在 flutter 的 GitHub issue 区搜索，就查到了这两个讨论： <a href="https://github.com/flutter/flutter/issues/75165">[google_maps_flutter] Unhandled Exception: Null check operator used on a null value</a>  <a href="https://github.com/flutter/flutter/issues/69431">[google_maps_flutter] Three (or more) finger gestures make the app unusable</a>。</p><p>虽然这个讨论里说的是 <a href="https://pub.flutter-io.cn/packages/google_maps_flutter">google_maps_flutter</a> 这个包，但是因为 google_maps_flutter 和 webview_flutter 这两个包在实现 Android 端的平台显示时都引用了 SDK 中的 <code>AndroidView</code>，所以本质上是同一个问题。大致问题就是，当用户用三指或更多的多点触摸操作诸如 google_maps_flutter 、webview_flutter 这样使用了 AndroidView 的组件，就会引发程序异常，而且这个异常一旦抛出，之后正常的单指和双指操作也会持续引发错误，直到程序重启，这个描述与我错误日志的表现完全一致。</p><p>然后我用自己手机试了一下，在 APP 中使用了 WebView 的页面尝试三指操作，果然也触发了异常，而且整个页面也完全卡住了，可以想象，用户操作此时肯定是要对着屏幕一通点按划，希望应用能有点反应，结果就是抛出了一大堆的错误 <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。</p><p>问题几乎可以确认了，但是为什么这个问题会忽然大量出现呢？看 Issue 讨论和 SDK 中代码的提交记录，这个官方 BUG 存在至少一年以上了，根据讨论 <a href="https://github.com/flutter/flutter/issues/69431#issuecomment-745901458">Sunbreak 的评论</a>，他认为是 MIUI 上有一个三指下滑截屏的系统手势，可能会让很多人由此触发本 BUG，但我总觉得可能不是这个原因……</p><p>又看了看日志中异常的用户，大部分用户的昵称都像是女性，以我钢铁直<span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/godmode.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 对非男性的认识，猜测会不会是这些用户化妆之后用沾了化妆品的手去操作手机，然后手机屏幕很油，导致的屏幕触摸识别出错？虽然这个猜测一样解释不了为何最近异常数突增的问题，但结果来说居然猜得八九不离十 <span class="github-emoji"><span>😹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f639.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h1 id="问询"><a href="#问询" class="headerlink" title="问询"></a>问询</h1><p>异常用户中有一些是作为内部测试的公司同事，虽然因为岗位不同平时不怎么有机会能碰得到，几天后终于碰巧碰到一位，我就问了下她的情况 —— </p><blockquote><p>Hi，xxx，请问一下，最近你用我们的 APP 的时候是不是经常出现页面完全卡死，怎么操作都没反应的情况啊？<br>—— 嗯，是啊，好几次了，我都不知道怎么突然就卡死了，我怎么试都不行，最后关了应用重开才能再用&amp;×%￥&amp;×（#%@……<br>emmm，其实我这边能看到那些错误的，根据错误提示，可能是因为你用三根以上的手指操作手机了？<br>—— 没有没有！不可能的！！我都是正常使用的！！！<br>额……我不是说你肯定是那样操作才……<br>—— 真的没有！我都是一根手指这样点～～连滑动都不敢划……&amp;￥……&amp;×（……%&amp;@……！@#&amp;×<br>………………<br>………………<br>行行行我知道了，让我看下你的手机吧 <span class="github-emoji"><span>😑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><p>然后，她就递给我一个油腻得疑似是手机的物体 <span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>然后又询问了一下，原来是她们团队那边最近准备做一款护手霜的代理推广，所以内部同事都在测试效果，经常是涂了护手霜后又来用 APP，而这款护手霜看上去就是这么的“油”…… 我想我大概是已经破案了。。。</p><p>然后我问她们要来了一点同款护手霜，简单做了下测试：</p><iframe id="bili1" width="100%" src="//player.bilibili.com/player.html?aid=331838948&amp;bvid=BV11A411M7sU&amp;cid=301907225&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili1 = document.querySelector('#bili1');    var container = document.querySelector('#article-container');    bili1.height = (container.clientWidth * 3 / 4) + 'px';</script><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>参看：<a href="https://github.com/flutter/flutter/pull/72611">PR: Fix crash when do three finger gesture</a>，这个问题在 2020 年年底就有人尝试解决了，我根据他的修改 <a href="https://github.com/flutter/flutter/pull/72611/files">packages/flutter/lib/src/services/platform_views.dart</a> 手动更新了一下本机的 Flutter SDK，确实解决了问题 <span class="github-emoji"><span>👏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 但是这个 PR 却迟迟没能合并进主线分支，因为这个 PR 的作者不太清楚怎么给新加的代码写测试，所以没能通过 Flutter 官方设置的自动测试（但是看测试的失败报告，是只在 MacOS 平台上的 build 失败了，那其实并不影响 Android 和 iOS 的），而且即使合并进了主线，以 Flutter 的版本发布策略和频率，这个修复应用到稳定分支可能最少还要数月的时间，所以目前只能自己处理。</p><p>由于要修改的代码在 SDK 源码中，而不是项目仓库中的代码，而且我的项目接入了基于 docker 的 GitLab CI，每次构建时编译环境都会重置，所以必须把这个修复用自动化的方式实现。</p><p>所以我写了 python 脚本：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Filename :   flutter_patch.py</span></span><br><span class="line"><span class="comment"># @Date     :   2021/2/3 下午3:51</span></span><br><span class="line"><span class="comment"># @Author   :   DebuggerX</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">patch_platform_views</span>(<span class="params">flutter_sdk_path</span>):</span><br><span class="line">    origin_content = <span class="string">r'''</span></span><br><span class="line"><span class="string">    if (event.platformData == kPointerDataFlagBatched ||</span></span><br><span class="line"><span class="string">        (isSinglePointerAction(event) &amp;&amp; pointerIdx &lt; numPointers - 1)) {</span></span><br><span class="line"><span class="string">      return null;</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    int action;</span></span><br><span class="line"><span class="string">    '''</span>.strip()</span><br><span class="line"></span><br><span class="line">    replace_content = <span class="string">r'''</span></span><br><span class="line"><span class="string">    if (event.platformData == kPointerDataFlagBatched ||</span></span><br><span class="line"><span class="string">        (isSinglePointerAction(event) &amp;&amp; pointerIdx &lt; numPointers - 1)) {</span></span><br><span class="line"><span class="string">      return null;</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (pointers.length != pointerProperties.length ||</span></span><br><span class="line"><span class="string">        pointers.length != pointerPositions.length) {</span></span><br><span class="line"><span class="string">      return null;</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    int action;</span></span><br><span class="line"><span class="string">    '''</span>.strip()</span><br><span class="line"></span><br><span class="line">    file_path = os.path.join(flutter_sdk_path, <span class="string">'packages/flutter/lib/src/services/platform_views.dart'</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, mode=<span class="string">'r'</span>) <span class="keyword">as</span> inp:</span><br><span class="line">        content = inp.read()</span><br><span class="line">        <span class="comment"># 只在 SDK 中源码还没有修复时进行 patch</span></span><br><span class="line">        <span class="keyword">if</span> origin_content <span class="keyword">in</span> content:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, mode=<span class="string">'w'</span>) <span class="keyword">as</span> out:</span><br><span class="line">                out.write(content.replace(origin_content, replace_content))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'Patched !!!\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'No change !!!\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 利用 command -v flutter 命令找到当前环境中 flutter sdk所在的路径</span></span><br><span class="line">    flutter_path = os.popen(<span class="string">'command -v flutter'</span>).read().strip()</span><br><span class="line">    <span class="keyword">if</span> flutter_path.endswith(<span class="string">'bin/flutter'</span>):</span><br><span class="line">        flutter_path = flutter_path[<span class="number">0</span>: flutter_path.index(<span class="string">'bin/flutter'</span>)]</span><br><span class="line">        patch_platform_views(flutter_path)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>然后加入到 <a href="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/">GitLab CI/CD (一) ：自动打包部署Flutter项目</a> 中所示的 <code>.gitlab-ci.yml</code> 中：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">    - python3 flutter_patch.py</span><br><span class="line">    - flutter -v build apk --no-shrink --target-platform=android-arm</span><br><span class="line">……</span><br></pre></td></tr></tbody></table></figure><p>这样，每次发布时通过 GitLab CI 编译产生的 apk 就是修复过 SDK 的版本了：</p><p><img src="/2021/02/23/a-app-bug-caused-by-hand-cream/patched.webp" alt="patched.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> bug </tag>
            
            <tag> flutter </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qrs_detector——Flutter应用中的心电心率识别</title>
      <link href="/2021/02/18/qrs-detector-for-flutter-in-dart/"/>
      <url>/2021/02/18/qrs-detector-for-flutter-in-dart/</url>
      
        <content type="html"><![CDATA[<blockquote><p>公司的纯 Flutter 应用近期要添加一个根据 BLE 心电设备采集到信息实时显示使用者心率的功能，简单研究后发现需要实现一个 <a href="https://baike.baidu.com/item/QRS%E6%B3%A2%E7%BE%A4">QRS波</a>检测算法，记录下研究和实现的过程。</p></blockquote><script>    window.onload = function () {        document.querySelectorAll('.hide_code').forEach(function (div) {            var is = div.querySelectorAll('i');            is[0].click();        });    }</script><h1 id="DEMO效果演示"><a href="#DEMO效果演示" class="headerlink" title="DEMO效果演示"></a>DEMO效果演示</h1><p><span id="jump0"></span></p><iframe id="bili1" width="100%" src="//player.bilibili.com/player.html?aid=501810320&amp;bvid=BV1fN411X7Sa&amp;cid=300913386&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili1 = document.querySelector('#bili1');    var container = document.querySelector('#article-container');    bili1.height = (container.clientWidth * 3 / 4) + 'px';</script><h1 id="前期调查"><a href="#前期调查" class="headerlink" title="前期调查"></a>前期调查</h1><ol><li><p>由于 App 已经实现了实时 <a href="https://baike.baidu.com/item/%E5%BF%83%E7%94%B5%E5%9B%BE/399200">ECG</a> 数据的采集和图形绘制：<br><img src="/2021/02/18/qrs-detector-for-flutter-in-dart/ecg.webp" alt="ecg.webp"><br>所以最早的想法是每隔一段时间，将之前采集到的一段时间内的数据进行一次波峰识别，从而得到某几次心跳的总间隔，再计算得出平均的心率（BPM）。<br>于是关于波峰识别，主要查看了下面两篇文章：</p><ul><li><a href="https://www.cnblogs.com/bethansy/p/10560341.html">序列数据波峰识别以及波峰形状识别</a></li><li><a href="https://www.zealseeker.com/archives/find-peak/">波峰识别算法介绍</a></li></ul><p>看完后感觉这两种算法并不能很好地识别 ECG 心电波形</p></li><li><p>反编译了设备供应商提供的安卓 SDK 后，发现其用于实时心率计算的功能是利用一个名为 <code>QRSDetUtil</code> 的工具类调用 jni 实现的，并有如下参数定义：<br><img src="/2021/02/18/qrs-detector-for-flutter-in-dart/sdk.webp" alt="sdk.webp"><br>猜测 <code>QRSDet</code> 的全称应该是 <code>qrs detect</code>，通过搜索得知 <code>QRS波识别</code> 是心电信号处理的通用方法，并找到前辈的总结：<br><a href="https://blog.csdn.net/weixin_44191286/article/details/103881979">QRS波检测算法集锦(含源代码)</a><br>但是这里总结的算法给出的源码大多数都是 MATLAB 实现的，不是很能看得懂，而且手里也没有现成的环境，不想花费过多精力在这上面 <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></li><li><p>再以 <code>qrs detector</code> 为关键词在 GitHub 上进行搜索，找到了如下项目：<br><a href="https://github.com/c-labpl/qrs_detector">Python Online and Offline ECG QRS Detector based on the Pan-Tomkins algorithm</a><br>该项目是基于最经典的<code>Pan-Tomkins</code>算法实现的，分为离线分析和实时分析两个部分，用的语言也是我还算比较熟悉的 python，如果判断可用的话用 dart 语言移植到 Flutter 上相对来说更有把握，所以下面开始尝试基于这个项目和我们 App 实际采集到的 ECG 数据进行测试。</p></li></ol><h1 id="测试-qrs-detector-项目"><a href="#测试-qrs-detector-项目" class="headerlink" title="测试 qrs_detector 项目"></a>测试 qrs_detector 项目</h1><h2 id="运行项目自带例子"><a href="#运行项目自带例子" class="headerlink" title="运行项目自带例子"></a>运行项目自带例子</h2><h3 id="克隆项目源码，安装依赖"><a href="#克隆项目源码，安装依赖" class="headerlink" title="克隆项目源码，安装依赖"></a>克隆项目源码，安装依赖</h3><p>项目中 <code>requirements.txt</code> 配置的某些依赖版本过旧可能已经无法安装，需要手动处理一下，最终实际安装的项目依赖版本如下：<br><img src="/2021/02/18/qrs-detector-for-flutter-in-dart/requirements.webp" alt="requirements.webp"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>依赖安装完成后运行应该是会报错的：<br><img src="/2021/02/18/qrs-detector-for-flutter-in-dart/error.webp" alt="error.webp"><br>报错提醒来自 <code>scipy</code> 包下的 “滤波器设计” 函数，提示参数 <code>Wn</code> 的值应该大于 0 小于 1，猜测是 scipy 包版本升级后新增的限制。跟踪调用栈，得知应修改如下位置的参数定义：<br><img src="/2021/02/18/qrs-detector-for-flutter-in-dart/error_fix_1.webp" alt="error_fix_1.webp"><br>将上图中 <code>self.filter_lowcut</code> 的值从 <code>0.0</code> 改为 <code>0.001</code>，再次运行代码即可得到结果，图中黑色的标记点即为算法识别出的波峰：<br><img src="/2021/02/18/qrs-detector-for-flutter-in-dart/demo1.webp" alt="demo1.webp"></p><blockquote><p>P.S. 该问题后来在<a href="https://blog.csdn.net/fjssharpsword/article/details/104656188">ECG-QRS检测参考代码</a>这篇博客中也见到了一样的 fix <span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><h2 id="测试公司数据"><a href="#测试公司数据" class="headerlink" title="测试公司数据"></a>测试公司数据</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>参考项目中 <code>ecg_data/ecg_data_1.csv</code> 的数据格式，截取公司产品采集到的 ECG 数据创建 <code>ecg_data_3.csv</code>，运行后得到如下结果：<br><img src="/2021/02/18/qrs-detector-for-flutter-in-dart/demo2.webp" alt="demo2.webp"><br>可以看到程序运行正常，但没能识别出任何一个波峰 <span class="github-emoji"><span>😨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f628.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="修复问题"><a href="#修复问题" class="headerlink" title="修复问题"></a>修复问题</h3><p>猜测这个问题可能和程序中预设的某个或某些参数有关。经过一段时间的分析和尝试，对比上面两张图的倒数第二个波形示意，发现项目自带数据形成的处理后的波峰的峰值都在 0.6 以上，而我们数据经过相同的处理，最大峰值不超过 0.07，再配合源码分析和 debugger 跟踪，发现 “寻找波峰” 的方法中有如下判断：<br><img src="/2021/02/18/qrs-detector-for-flutter-in-dart/findpeaks_limit.webp" alt="findpeaks_limit.webp"><br>只有峰值大于给定限制的波峰才会被识别出来，而源码中预设的阈值 <code>findpeaks_limit</code> 为 <code>0.35</code>，大约为多数波峰峰值的一半，于是这里根据我们数据的情况，将这个限制值改为 <code>0.04</code>，再次运行程序即可得到预期的结果：<br><img src="/2021/02/18/qrs-detector-for-flutter-in-dart/demo3.webp" alt="demo3.webp"></p><blockquote><p>至此，足以判断该项目的方法确实可以用于我们产品的心率识别需求 <span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><h2 id="修改在线版本"><a href="#修改在线版本" class="headerlink" title="修改在线版本"></a>修改在线版本</h2><p>根据离线分析版本的经验，修改 <code>QRSDetectorOnline.py</code>。原项目的在线版本需要通过数据线连接指定的 ECG 设备，这里我将相关代码移除，并通过读取由我们公司设备采集得来的 <code>data.txt</code>来模拟数据输入，完成了实时分析版本代码的测试，后续即根据这个版本的代码进行移植工作。</p><blockquote><p>以上的所有修改可以参考该仓库：<a href="https://github.com/debuggerx01/qrs_detector">debuggerx01/qrs_detector</a></p></blockquote><h1 id="代码移植"><a href="#代码移植" class="headerlink" title="代码移植"></a>代码移植</h1><h2 id="搭建测试-DEMO"><a href="#搭建测试-DEMO" class="headerlink" title="搭建测试 DEMO"></a>搭建测试 DEMO</h2><p>为了方便开发调试和直观地看到效果，我先用 dart 自带的 WebSocket server 实现了一个简单的、连接后自动间隔向客户端发送 ECG 数据的服务器（代码参考：<a href="https://api.dart.dev/stable/2.10.5/dart-io/dart-io-library.html">dart:io library</a>）；然后用 <a href="https://echarts.apache.org/zh/index.html">ECharts</a> 写了个简单的静态页面作为客户端，页面打开时连接本机已经打开的 ECG 数据模拟发送服务器，并实时将接收到的数据以图表形式绘制出来。<br>关键代码：</p><div class="hide_code"><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">FileName: main.dart</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:io'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">设置 ECG 数据的采样率</span></span></span><br><span class="line"><span class="keyword">const</span> SAMPLING_RATE = <span class="number">250</span>;</span><br><span class="line"></span><br><span class="line">Future sendData(WebSocket webSocket) {</span><br><span class="line">  <span class="keyword">var</span> file = File(<span class="string">'data.txt'</span>);</span><br><span class="line">  <span class="keyword">var</span> lineIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> file.readAsLines().then((value) {</span><br><span class="line">    <span class="comment">/// <span class="language-markdown">根据采样率算出ECG数据发送的时间间隔，定时向客户端发送数据</span></span></span><br><span class="line">    Timer.periodic(<span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span> ~/ SAMPLING_RATE), (timer) {</span><br><span class="line">      <span class="keyword">if</span> (webSocket.closeCode != <span class="keyword">null</span> || lineIndex &gt;= value.length)</span><br><span class="line">        <span class="keyword">return</span> timer.cancel();</span><br><span class="line">      webSocket.add(value[lineIndex]);</span><br><span class="line">      lineIndex++;</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">main() <span class="keyword">async</span> {</span><br><span class="line">  <span class="comment">/// <span class="language-markdown">监听本机9988端口，创建WebSocket服务器</span></span></span><br><span class="line">  HttpServer server = <span class="keyword">await</span> HttpServer.bind(<span class="string">'127.0.0.1'</span>, <span class="number">9988</span>);</span><br><span class="line">  server</span><br><span class="line">      .transform(<span class="keyword">new</span> WebSocketTransformer())</span><br><span class="line">      .listen((WebSocket webSocket) <span class="keyword">async</span> {</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'WebSocket opened.'</span>);</span><br><span class="line">    webSocket.listen(<span class="built_in">print</span>, onDone: () {</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'WebSocket closed.'</span>);</span><br><span class="line">    });</span><br><span class="line">    <span class="comment">/// <span class="language-markdown">向客户端发送模拟ECG数据</span></span></span><br><span class="line">    sendData(webSocket);</span><br><span class="line">  });</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Listening..'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><div class="hide_code"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--FileName: ecg_viewer/index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ECG Viewer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80vw</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">60vw</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置图表显示心电图的最大数据量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> showLength = <span class="number">1000</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化 echarts</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'container'</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> myChart = echarts.<span class="title function_">init</span>(container);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> _data = [];</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化 echarts 的数据源</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; showLength; i++) {</span></span><br><span class="line"><span class="language-javascript">        _data[i] = [i, <span class="literal">null</span>];</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> option = {</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: {</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">text</span>: <span class="string">'ECG Viewer'</span></span></span><br><span class="line"><span class="language-javascript">        },</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">xAxis</span>: {</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">"value"</span>,</span></span><br><span class="line"><span class="language-javascript">        },</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">yAxis</span>: {</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">"value"</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">max</span>: -<span class="number">3.5</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">min</span>: -<span class="number">7</span>,</span></span><br><span class="line"><span class="language-javascript">        },</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">series</span>: [{</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">'line'</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: _data,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">smooth</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">showSymbol</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">itemStyle</span>: {</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">normal</span>: {</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">color</span>: <span class="string">"black"</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">label</span>:</span></span><br><span class="line"><span class="language-javascript">                        {</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">show</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                        },</span></span><br><span class="line"><span class="language-javascript">                },</span></span><br><span class="line"><span class="language-javascript">            },</span></span><br><span class="line"><span class="language-javascript">        }]</span></span><br><span class="line"><span class="language-javascript">    };</span></span><br><span class="line"><span class="language-javascript">    myChart.<span class="title function_">setOption</span>(option);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> _index = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">'ws://127.0.0.1:9988'</span>);</span></span><br><span class="line"><span class="language-javascript">    ws.<span class="property">onmessage</span> = <span class="function"><span class="params">ev</span> =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        _data[_index] = [_index, ev.<span class="property">data</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> __index;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将当前接受到点的后面20个数据设置为null，模拟刷新显示的效果</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++) {</span></span><br><span class="line"><span class="language-javascript">            __index = (_index + i) % showLength;</span></span><br><span class="line"><span class="language-javascript">            _data[__index] = [__index, <span class="literal">null</span>];</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">        _index++;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当显示满时重置数据源下标，实现重复从头绘制的效果</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (_index &gt;= showLength - <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            _index = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 每接收到三次数据进行一次重绘，降低资源占用，提高显示流畅度</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (_index % <span class="number">3</span> === <span class="number">0</span>) {</span></span><br><span class="line"><span class="language-javascript">            option.<span class="property">series</span>.<span class="property">data</span> = _data;</span></span><br><span class="line"><span class="language-javascript">            myChart.<span class="title function_">setOption</span>(option)</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onresize</span> = myChart.<span class="property">resize</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div><h2 id="创建-qrs-detector-dart"><a href="#创建-qrs-detector-dart" class="headerlink" title="创建 qrs_detector.dart"></a>创建 qrs_detector.dart</h2><p>参照 python 项目的模式，定义一个 QRSDetector 类：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QRSDetector</span> </span>{</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> signalFrequency;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> findPeaksLimit;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Function</span> handleDetection;</span><br><span class="line"></span><br><span class="line">  QRSDetector({</span><br><span class="line">    <span class="keyword">this</span>.signalFrequency = <span class="number">250</span>,</span><br><span class="line">    <span class="keyword">this</span>.findPeaksLimit = <span class="number">0.04</span>,</span><br><span class="line">    <span class="keyword">this</span>.handleDetection,</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> addPoint(<span class="built_in">int</span> timeStamp, <span class="built_in">double</span> point) {</span><br><span class="line">    ...</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>构造函数可以设置 ECG 数据的采样率，波峰识别时用于判断的 <code>findPeaksLimit</code>，以及当识别到波峰时的回调函数 <code>handleDetection</code>；QRSDetector 的实例对象只对外暴露一个 <code>void addPoint(int timeStamp, double point)</code> 方法，用于接收实时心电数据。</p><p>接着就是根据 python 代码的逻辑，实现这个 QRSDetector 的具体功能。</p><h2 id="移植过程的关键点-amp-难点"><a href="#移植过程的关键点-amp-难点" class="headerlink" title="移植过程的关键点&amp;难点"></a>移植过程的关键点&amp;难点</h2><h3 id="双端队列deque"><a href="#双端队列deque" class="headerlink" title="双端队列deque"></a>双端队列deque</h3><p>  python 算法中的第一步就是将新添加的数据加入到名为 <code>self.most_recent_measurements</code> 的 <a href="https://www.cnblogs.com/ranzhong/p/12438841.html">deque</a> 中，然后用包括当前数据在内和其之前的 <code>self.number_of_samples_stored</code> 个数据进行各种计算，来判断是否存在波峰。<br> 来自 python 标准库的 deque 可以设置一个长度，当添加的数据大于其长度时会将头部的数据 “挤出”，所以非常适合这里的需要；而且由于其实现原理，它具有很低时间和空间复杂度。<br> 但是 dart 的标准库中就没有这么方便的结构了，所以只能用 <a href="https://api.dart.dev/stable/2.10.5/dart-collection/Queue-class.html">Queue</a> 来代替，并自行处理以上的逻辑：<br> </p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;<span class="built_in">double</span>&gt; _mostRecentMeasurements = Queue();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _addToMostRecentMeasurements(<span class="built_in">double</span> val) {</span><br><span class="line">  _mostRecentMeasurements.add(val);</span><br><span class="line">  <span class="keyword">if</span> (_mostRecentMeasurements.length &gt; NUMBER_OF_SAMPLES_STORED)</span><br><span class="line">    _mostRecentMeasurements.removeFirst();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br> 使用时不要直接向 <code>_mostRecentMeasurements</code> 中插入数据，而是用 <code>_addToMostRecentMeasurements</code> 方法即可<p></p><h3 id="带通滤波器-bandpass-filter-的移植"><a href="#带通滤波器-bandpass-filter-的移植" class="headerlink" title="带通滤波器 bandpass_filter 的移植"></a>带通滤波器 bandpass_filter 的移植</h3><p>算法中数据添加进队列后，第一个操作就是对当前队列内的数据进行一次滤波处理：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.signal <span class="keyword">import</span> butter, lfilter</span><br><span class="line">……</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bandpass_filter</span>(<span class="params">self, data, lowcut, highcut, signal_freq, filter_order</span>):</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Method responsible for creating and applying Butterworth filter.</span></span><br><span class="line"><span class="string">:param deque data: raw data</span></span><br><span class="line"><span class="string">:param float lowcut: filter lowcut frequency value</span></span><br><span class="line"><span class="string">:param float highcut: filter highcut frequency value</span></span><br><span class="line"><span class="string">:param int signal_freq: signal frequency in samples per second (Hz)</span></span><br><span class="line"><span class="string">:param int filter_order: filter order</span></span><br><span class="line"><span class="string">:return array: filtered data</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""Constructs signal filter and uses it to given data set."""</span></span><br><span class="line">nyquist_freq = <span class="number">0.5</span> * signal_freq</span><br><span class="line">low = lowcut / nyquist_freq</span><br><span class="line">high = highcut / nyquist_freq</span><br><span class="line">b, a = butter(filter_order, [low, high], btype=<span class="string">"band"</span>)</span><br><span class="line">y = lfilter(b, a, data)</span><br><span class="line"><span class="keyword">return</span> y</span><br></pre></td></tr></tbody></table></figure><p>来自 <code>scipy.signal</code> 巴特沃斯滤波器实现，先用 <code>butter</code> 进行滤波器生成滤波器系数，可以看到这里的类型 <code>btype="band"</code> 是一个带通滤波器，然后调用 <code>lfilter</code> 对数据序列进行 <code>IIR</code>滤波处理，相关文档参考这里：<a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lfilter.html">docs.scipy.org: scipy.signal.lfilter</a></p><p>简单看了下 <code>scipy.signal</code> 的滤波器实现源码，复杂到没信心移植，所以尝试找 dart 中的替代库。以<code>IIR filter</code>为关键词在 <a href="https://pub.flutter-io.cn/packages?q=IIR+filter">pub仓库</a> 上搜索，发现有且只有这么一个库：<br><img src="/2021/02/18/qrs-detector-for-flutter-in-dart/pub1.webp" alt="pub1.webp"><br>看介绍倒确实是实现了 IIR 的<code>bandpass</code>带通滤波，于是加入项目尝试使用。但是发现一个问题：参考<a href="https://pub.flutter-io.cn/packages/iirjdart">文档</a>，这个库中<code>bandpass</code> 的函数签名为：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">butterworth.bandPass(order,Samplingfreq,Center freq,Width <span class="keyword">in</span> frequ);</span><br></pre></td></tr></tbody></table></figure><p>参数用法和 python 项目中的完全不同，python 中的参数给的是带通滤波器的上下阈值（与采样率有关），而这里却要分别传入 <code>Samplingfreq</code>、<code>Center freq</code>、<code>Width in frequ</code> 三个参数，也就是说不能直接移植 python 的程序写法直接替换这个库的实现。</p><p>在查阅了许多资料后，也只得知 python 中 <code>scipy.signal.butter</code> 的设计和 Matlab 中同名函数的用法一致（<a href="https://www.mathworks.com/help/signal/ref/butter.html">Butterworth filter design</a>），但实在找不到上面 <code>iirjdart</code> 库中那样定义的方法该如何使用，以及每个参数的含义……直到回过头来再读库的介绍，发现这样一段：</p><ul><li>This library is a porting in Dart of the <a href="https://github.com/berndporr/iirj">famous iirj library by berndporr</a>.</li></ul><p>得知原来这个库本身就是对一个 java 库的移植；然后在 <a href="https://github.com/berndporr/iirj">berndporr/iirj</a> 这个库的 GitHub 中以 <code>bandpass</code> 为关键词搜索 Issue，发现这样一个讨论：<a href="https://github.com/berndporr/iirj/issues/8">#issue8</a>：<br><img src="/2021/02/18/qrs-detector-for-flutter-in-dart/issue1.webp" alt="issue1.webp"></p><p>提问者的情况和我类似，他是想把一段和我上面差不多的 Matlab 的代码翻译成 java 代码，不知道如何转换这些参数，而库的作者给出的解决方案是，不要直接用 <code>bandpass</code> 这个方法，而是将一对高通和低通滤波器串联，得到一样的效果。根据这个Issue，我将 dart 代码实现为：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; _bandPassFilter() {</span><br><span class="line">  <span class="built_in">double</span> nyquistFreq = signalFrequency / <span class="number">2</span>;</span><br><span class="line">  Butterworth butter = Butterworth();</span><br><span class="line">  butter.lowPass(<span class="number">1</span>, <span class="number">2</span>, FILTER_LOW_CUT / nyquistFreq);</span><br><span class="line">  butter.highPass(<span class="number">1</span>, <span class="number">2</span>, FILTER_HIGH_CUT / nyquistFreq);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">List</span>.generate(_mostRecentMeasurements.length,</span><br><span class="line">      (index) =&gt; butter.filter(_mostRecentMeasurements.elementAt(index)));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>终于解决了这个问题 <span class="github-emoji"><span>😖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f616.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="numpy-ediff1d-连续差分-的实现"><a href="#numpy-ediff1d-连续差分-的实现" class="headerlink" title="numpy.ediff1d (连续差分) 的实现"></a>numpy.ediff1d (连续差分) 的实现</h3><p>滤波后的下一个处理是对数据序列进行差分计算，获取两个连续元素之间的一维差异数组，具体的含义可以参考这个文章：<a href="https://vimsky.com/examples/usage/python-numpy-np-ediff1d-method.html">Python Numpy np.ediff1d()用法及代码示例</a></p><p>这个函数来自 python 著名强大的数字处理库 <code>numpy</code>，dart 中可能也有类似的库，但是引用的话可能还要花功夫去学习其使用方法。这里在理解了连续差分函数 ediff1d 的作用之后，我直接用 dart 便准库中 List.generate 这个数组的工厂构造方法来实现类似的功能：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; differentiatedEcgMeasurements = <span class="built_in">List</span>.generate(</span><br><span class="line">    <span class="comment">/// <span class="language-markdown">由于是计算每两个数字的差值，最终生成的数组的长度就将会是原始数组的长度 -1</span></span></span><br><span class="line">    filteredEcgMeasurements.length - <span class="number">1</span>,</span><br><span class="line">    (index) =&gt;</span><br><span class="line">        filteredEcgMeasurements[index + <span class="number">1</span>] -</span><br><span class="line">        filteredEcgMeasurements[index]);</span><br></pre></td></tr></tbody></table></figure><h3 id="数组平方"><a href="#数组平方" class="headerlink" title="数组平方"></a>数组平方</h3><p>下一个处理的 python 代码是：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Squaring - intensifies values received in derivative.</span></span><br><span class="line">squared_ecg_measurements = differentiated_ecg_measurements ** <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p>python 中有一个非常方便的操作符 <code>**</code> ，可以快速实现乘方操作，这在我知道的大部分常用语言中都是没有的，基本都要通过语言内置的数学库里的 <code>pow</code> 函数实现。但是经过上面的代码可以得知 <code>differentiated_ecg_measurements</code> 是一个数值序列，对于这样一个类似数组的结构进行平方操作的结果是什么呢？猜测是对其中的每个数值进行乘方，但是并不能确定，简单跟下源码：<br><a href="https://github.com/numpy/numpy/blob/fb215c76967739268de71aa4bda55dd1b062bc2e/numpy/lib/scimath.py#L434">https://github.com/numpy/numpy/blob/fb215c76967739268de71aa4bda55dd1b062bc2e/numpy/lib/scimath.py#L434</a><br>确定确实和猜测一样，那么根据含义进行移植就很简单了</p><h3 id="计算卷积和移动平均数"><a href="#计算卷积和移动平均数" class="headerlink" title="计算卷积和移动平均数"></a>计算卷积和移动平均数</h3><p>再下一个操作是用 <code>移动窗口积分器</code> 对平方后的序列进行处理：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Moving-window integration.</span></span><br><span class="line">integrated_ecg_measurements = np.convolve(squared_ecg_measurements, np.ones(<span class="variable language_">self</span>.integration_window))</span><br></pre></td></tr></tbody></table></figure><p>这里 <code>np.convolve</code>(移动平均数) 和 <code>np.ones</code>(计算卷积) 两个函数同样来自 numpy库，但是这两个函数就不像 <code>numpy.ediff1d</code> 那么容易实现了……好在用 <code>dart convolve</code> 作为关键词在 Google 上搜索后，发现了 <a href="https://pub.flutter-io.cn/packages/scidart">scidart</a> 这个库，用完全一样的方式实现了这两个函数，直接引用替换即可 <span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="findpeaks-的实现移植"><a href="#findpeaks-的实现移植" class="headerlink" title="findpeaks 的实现移植"></a>findpeaks 的实现移植</h3><p>经过如上的各种处理，终于来到了关键的峰值识别部分，这里的 python 实现是：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findpeaks</span>(<span class="params">self, data, spacing=<span class="number">1</span>, limit=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Janko Slavic peak detection algorithm and implementation.</span></span><br><span class="line"><span class="string">    https://github.com/jankoslavic/py-tools/tree/master/findpeaks</span></span><br><span class="line"><span class="string">    Finds peaks in `data` which are of `spacing` width and &gt;=`limit`.</span></span><br><span class="line"><span class="string">    :param ndarray data: data</span></span><br><span class="line"><span class="string">    :param float spacing: minimum spacing to the next peak (should be 1 or more)</span></span><br><span class="line"><span class="string">    :param float limit: peaks should have value greater or equal</span></span><br><span class="line"><span class="string">    :return array: detected peaks indexes array</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="built_in">len</span> = data.size</span><br><span class="line">    x = np.zeros(<span class="built_in">len</span> + <span class="number">2</span> * spacing)</span><br><span class="line">    x[:spacing] = data[<span class="number">0</span>] - <span class="number">1.e-6</span></span><br><span class="line">    x[-spacing:] = data[-<span class="number">1</span>] - <span class="number">1.e-6</span></span><br><span class="line">    x[spacing:spacing + <span class="built_in">len</span>] = data</span><br><span class="line">    peak_candidate = np.zeros(<span class="built_in">len</span>)</span><br><span class="line">    peak_candidate[:] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(spacing):</span><br><span class="line">        start = spacing - s - <span class="number">1</span></span><br><span class="line">        h_b = x[start: start + <span class="built_in">len</span>]  <span class="comment"># before</span></span><br><span class="line">        start = spacing</span><br><span class="line">        h_c = x[start: start + <span class="built_in">len</span>]  <span class="comment"># central</span></span><br><span class="line">        start = spacing + s + <span class="number">1</span></span><br><span class="line">        h_a = x[start: start + <span class="built_in">len</span>]  <span class="comment"># after</span></span><br><span class="line">        peak_candidate = np.logical_and(peak_candidate, np.logical_and(h_c &gt; h_b, h_c &gt; h_a))</span><br><span class="line"></span><br><span class="line">    ind = np.argwhere(peak_candidate)</span><br><span class="line">    ind = ind.reshape(ind.size)</span><br><span class="line">    <span class="keyword">if</span> limit <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        ind = ind[data[ind] &gt; limit]</span><br><span class="line">    <span class="keyword">return</span> ind</span><br></pre></td></tr></tbody></table></figure><p>这里的重点主要是：</p><ul><li><p>11～16行：<br>  对于输入序列，生成一个数组，其前 <code>spacing</code> 个数据是 <code>输入序列第一个元素的值 - 1.e-6</code>，后 <code>spacing</code> 个数据是 <code>输入序列最后一个元素的值 - 1.e-6</code>，中间则是原始输入序列的元素。</p></li><li><p>21～28行：<br>  对 <code>spacing</code>  做 fori 循环，每次根据下标取新数组的三个部分，然后对这三部分的值逐个进行比较，实际就是找出比前后都大的值，也就是峰值，通过 <code>logical_and(逻辑与)</code> 对数组进行操作，将得到一个数组，其中为峰值的位置的值为 <code>True</code>，其余为 <code>False</code>。</p></li><li><p>30～33行：<br>  找出所有波峰所在位置的下标，然后判断该波峰的值是否大于 <code>limit</code>，大于的话则加入结果数组，最终返回所有找到的峰值的下标。</p></li></ul><p>基于以上的理解，实现的 dart 代码如下：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; _findPeaks(Array data) {</span><br><span class="line">  <span class="built_in">int</span> len = data.length;</span><br><span class="line">  <span class="comment">/// <span class="language-markdown">这里还是利用 List.generate，在构造方法中利用下标判断返回不同的值，从而巧妙实现上面 11～16行的逻辑</span></span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; x = <span class="built_in">List</span>.generate(len + <span class="number">2</span> * FIND_PEAKS_SPACING, (index) {</span><br><span class="line">    <span class="keyword">if</span> (index &lt; FIND_PEAKS_SPACING) <span class="keyword">return</span> data.first - <span class="number">1e-6</span>;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= len + FIND_PEAKS_SPACING) <span class="keyword">return</span> data.last - <span class="number">1e-6</span>;</span><br><span class="line">    <span class="keyword">return</span> data[index - FIND_PEAKS_SPACING];</span><br><span class="line">  });</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">bool</span>&gt; peakCandidate = <span class="built_in">List</span>.filled(len, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; ind = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> s = <span class="number">0</span>; s &lt; FIND_PEAKS_SPACING; s++) {</span><br><span class="line">    <span class="keyword">var</span> start = FIND_PEAKS_SPACING - s - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> hb = x.getRange(start, start + len);</span><br><span class="line">    start = FIND_PEAKS_SPACING;</span><br><span class="line">    <span class="keyword">var</span> hc = x.getRange(start, start + len);</span><br><span class="line">    start = FIND_PEAKS_SPACING + s + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> ha = x.getRange(start, start + len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// <span class="language-markdown">由于缺少 pythons 那样直接逐个比较两个数组所有值的大小返回List<span class="language-xml"><span class="tag">&lt;<span class="name">bool</span>&gt;</span></span>的方法，这里只能用循环自己比较</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">      peakCandidate[i] = peakCandidate[i] &amp;&amp;</span><br><span class="line">          (hc.elementAt(i) &gt; hb.elementAt(i)) &amp;&amp;</span><br><span class="line">          (hc.elementAt(i) &gt; ha.elementAt(i));</span><br><span class="line">      <span class="keyword">if</span> (s == FIND_PEAKS_SPACING - <span class="number">1</span> &amp;&amp;</span><br><span class="line">          peakCandidate[i] &amp;&amp;</span><br><span class="line">          data[i] &gt; findPeaksLimit) {</span><br><span class="line">        ind.add(i);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> ind;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>到此为止，大部分算法逻辑的移植就差不多完成了，后面的代码相对都比较简单，无脑移植即可。识别出了每个波峰，也就得到了每次心跳发生的时间，经过简单的计算即可得到用户的实时心率了～</p></blockquote><h2 id="加入-DEMO-进行测试"><a href="#加入-DEMO-进行测试" class="headerlink" title="加入 DEMO 进行测试"></a>加入 DEMO 进行测试</h2><p><code>QRSDetector</code> 的算法逻辑实现时候，就可以添加到 DEMO 中测试效果了。将原本向客户端发送数据的方法改为：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Future sendData(WebSocket webSocket) {</span><br><span class="line">  <span class="comment">/// <span class="language-markdown">使用指定参数创建 detector，当算法识别到波峰时向客户端发送 "beat" 信号</span></span></span><br><span class="line">  QRSDetector detector = QRSDetector(</span><br><span class="line">      signalFrequency: SAMPLING_RATE,</span><br><span class="line">      handleDetection: () {</span><br><span class="line">        webSocket.add(<span class="string">"beat"</span>);</span><br><span class="line">      });</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> file = File(<span class="string">'data.txt'</span>);</span><br><span class="line">  <span class="keyword">var</span> timeStamp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> file.readAsLines().then((value) {</span><br><span class="line">    <span class="keyword">return</span> value.forEach((ele) {</span><br><span class="line">      webSocket.add(ele);</span><br><span class="line">      timeStamp += <span class="number">4000</span>;</span><br><span class="line">      <span class="comment">/// <span class="language-markdown">将数据通过 addPoint 方法加入识别器 detector</span></span></span><br><span class="line">      detector.addPoint(timeStamp, <span class="built_in">double</span>.tryParse(ele));</span><br><span class="line">      sleep(<span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span> ~/ SAMPLING_RATE));</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样就实现了一开始演示的效果：<a href="#jump0">回到视频</a></p><p>源码地址：<a href="https://github.com/debuggerx01/ecg_viewer_dart_with_qrs_detector">debuggerx01/ecg_viewer_dart_with_qrs_detector</a></p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>由于原始 python 工程的代码更多地是学习研究的目的，所以每一步代码都只做一个操作，而且生成了大量的中间临时对象和数组。而实际上某些操作是可以简化合并的，很多临时变量也可以不必创建，虽然会降低代码可读性，但可以提高执行效率：<br><a href="https://github.com/debuggerx01/ecg_viewer_dart_with_qrs_detector/blob/performance/qrs_detector.dart">https://github.com/debuggerx01/ecg_viewer_dart_with_qrs_detector/blob/performance/qrs_detector.dart</a><br>经过对比测试，这些修改大致可以使算法比没有优化前快约30%，而且在我机器上测试每次计算的耗时大约都在 0.5 毫秒以内，不得不说 dart 语言本身的性能还是相当不错的。</p>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> flutter </tag>
            
            <tag> QRS波检测算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量转换图片为webp格式</title>
      <link href="/2021/01/13/batch-convert-pictures-to-webp-format/"/>
      <url>/2021/01/13/batch-convert-pictures-to-webp-format/</url>
      
        <content type="html"><![CDATA[<blockquote><p>愈发感受 webp 格式的强大，在博客里大部分用例下使用 webp 可以使图片占用的空间降低一个数量级，所以目前所有的图片资源都要转成 webp 后使用，一个一个转换效率太低，于是写了个脚本，可以批量将本目录下的常见格式图片转换为 webp 格式。</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建备份文件夹</span></span><br><span class="line">mkdir "bak"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用<span class="built_in">ls</span>和正则获取当前目录下的所有图片路径存入数组</span></span><br><span class="line">images=$(ls *.{png,jpg})</span><br><span class="line"></span><br><span class="line">for image in $images</span><br><span class="line">do</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">-q 90 指定转换质量，经试验这个值效果和压缩率都不错</span></span><br><span class="line">  cwebp $image -q 90 -o ${image%.*}.webp</span><br><span class="line">  mv $image ./bak/$image</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><h1 id="更新（2023-07-04）"><a href="#更新（2023-07-04）" class="headerlink" title="更新（2023-07-04）"></a>更新（2023-07-04）</h1><blockquote><p>下面的脚本可以实现当原始图片尺寸超出指定大小时，自动对其进行缩放</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置宽高的最大值</span></span><br><span class="line">MAXWH=2160</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建备份文件夹</span></span><br><span class="line">mkdir "bak"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用<span class="built_in">ls</span>和正则获取当前目录下的所有图片路径存入数组</span></span><br><span class="line">images=$(ls *.{png,jpg})</span><br><span class="line"></span><br><span class="line">for image in $images</span><br><span class="line">do</span><br><span class="line">  size=$(identify $image | awk '{print $3}')</span><br><span class="line">  wh=(${size//x/ })</span><br><span class="line">  w=${wh[0]}</span><br><span class="line">  h=${wh[1]}</span><br><span class="line">  </span><br><span class="line">  resize=''</span><br><span class="line"></span><br><span class="line">  if [ $w -gt $h ]</span><br><span class="line">  then</span><br><span class="line">    if [ $w -gt $MAXWH ]</span><br><span class="line">    then resize="-resize ${MAXWH} 0"</span><br><span class="line">    fi</span><br><span class="line">  else</span><br><span class="line">    if [ $h -gt $MAXWH ]</span><br><span class="line">    then resize="-resize 0 ${MAXWH}"</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">-q 90 指定转换质量，经试验这个值效果和压缩率都不错</span></span><br><span class="line">  cwebp $image -q 90 $resize -o ${image%.*}.webp</span><br><span class="line">  mv $image ./bak/$image</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不满新版深度终端的动画速度，动手修改编译一个版本</title>
      <link href="/2021/01/10/make-deepin-terminal-quake-mode-faster/"/>
      <url>/2021/01/10/make-deepin-terminal-quake-mode-faster/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作为 <a href="https://www.deepin.com/">Deepin Linux</a> 的老用户，一直重度依赖老王的深度终端，尤其钟爱其系统级别随时可以一个快捷键从屏幕顶端呼出下拉式终端的所谓<code>雷神模式</code>。最近更新了新版终端，给雷神模式的显示加入了一个长得离谱的动画，非常不爽：<a href="https://bbs.deepin.org/post/209537">目前终端的雷神模式动画有点太慢了吧</a> ,找到源码对应位置之后决定自己编译一个自用</p></blockquote><iframe width="100%" id="bili1" src="//player.bilibili.com/player.html?aid=416075892&amp;bvid=BV1KV411t7zX&amp;cid=280434569&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili1 = document.querySelector('#bili1');    var container = document.querySelector('#article-container');    bili1.height = (container.clientWidth * 5 / 8) + 'px';</script><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="可选-安装虚拟机"><a href="#可选-安装虚拟机" class="headerlink" title="(可选)安装虚拟机"></a>(可选)安装虚拟机</h2><blockquote><p>因为不想在日常使用的机器上安装过多无用的开发依赖包，所以使用最新deepin镜像安装了一个全新的虚拟机，具体方法可以参考我之前的这篇<a href="/2020/11/29/suggest-Linux-users-to-try-kvm-virtual-machine/">建议Linux用户尝试下kvm虚拟机</a></p></blockquote><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>新版本终端的源码位置在：<a href="https://github.com/linuxdeepin/deepin-terminal">linuxdeepin / deepin-terminal</a></p><p>查看当前系统的终端版本：<br><img src="/2021/01/10/make-deepin-terminal-quake-mode-faster/version.webp" alt="version"></p><p>所以就 clone 这个版本：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/linuxdeepin/deepin-terminal.git --branch 5.4.0.6</span><br></pre></td></tr></tbody></table></figure><h2 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h2><h3 id="动画时长"><a href="#动画时长" class="headerlink" title="动画时长"></a>动画时长</h3><p>经过搜索，定义了动画时长的代码位置在<code>/src/main/mainwindow.h</code>:<br><img src="/2021/01/10/make-deepin-terminal-quake-mode-faster/code.webp" alt="code"><br>将源码中定义的时长分别从300、150改为100、50，这样原本最长长达450ms的动画就只会有150ms了。</p><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>编译后终端版本号的定义在<code>src/environments.h.in</code>这个文件中，我将其中的<code>#define VERSION        "@VERSION@"</code>改为了<code>#define VERSION        "5.4.0.6_by_debuggerx"</code></p><h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><p>参考项目<a href="https://github.com/linuxdeepin/deepin-terminal#debian-based-distro-for-lazy-guy">README</a>，依次执行：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/the/source/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动安装编译所需依赖</span></span><br><span class="line">sudo apt build-dep .</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></tbody></table></figure><p>在我的虚拟中编译了大约15分钟后，终于在<code>build</code>目录下生成了最终的可执行文件</p><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>利用scp将编译好的终端从虚拟机中复制到宿主机：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp build/deepin-terminal debuggerx@10.0.2.2:/home/debuggerx/Desktop/deepin-terminal</span><br></pre></td></tr></tbody></table></figure><p>然后在宿主机上，使用下面的命令替换现有终端：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /usr/bin/deepin-terminal /usr/bin/.deepin-terminal-bak</span><br><span class="line">sudo mv ~/Desktop/deepin-terminal /usr/bin/deepin-terminal</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面完成了替换，还需要先杀死系统正在运行的老终端才能生效</span></span><br><span class="line">killall deepin-terminal</span><br></pre></td></tr></tbody></table></figure><p>现在再打开终端，试一下雷神模式，动画就非常干脆利索没那么拖沓了 <span class="github-emoji"><span>😝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>最后检查一下版本号：</p><p><img src="/2021/01/10/make-deepin-terminal-quake-mode-faster/cover.webp" alt="new_version"></p>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重译《百恋歌》</title>
      <link href="/2021/01/03/retranslated-a-hundred-love-songs/"/>
      <url>/2021/01/03/retranslated-a-hundred-love-songs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一首很喜欢的歌。但是不很满意所有现有的歌词翻译，这么多年了一直心存芥蒂。今次趁着想给博客撸一个歌词显示组件的功夫，终于决定试着自己翻一版 <span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><div class="aplayer" id="aplayer"></div><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"></script><script src="https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js"></script><script src="player.js"></script><p><em>注：点击下面的开关按钮可以控制对应歌词面板的显示与隐藏</em></p><style>    .lrc {        height: 5em;        display: flex;        flex-direction: column;        align-items: center;        background: repeating-linear-gradient(45deg, black, transparent 100px);        border-radius: .5em;    }        .lrc_line {        display: block;        line-height: 1rem;    }        .lrc_line:empty:before {        content: "\200b"; // unicode zero width space character    }    .current {        font-size: 1.05rem;        line-height: 1.5rem;        color: mediumpurple;        min-inline-size: max-content;    }            .tg-list {        text-align: center;        display: -webkit-box;        display: -webkit-flex;        display: -ms-flexbox;        display: flex;        -webkit-box-align: center;        -webkit-align-items: center;        -ms-flex-align: center;        align-items: center;        padding: 0;    }    .tg-list-item {        margin: 0 2em;        display: inline;    }    .tgl {        display: none;    }    .tgl, .tgl:after, .tgl:before, .tgl *, .tgl *:after, .tgl *:before, .tgl + .tgl-btn {        -webkit-box-sizing: border-box;        -moz-box-sizing: border-box;        box-sizing: border-box;    }    .tgl::-moz-selection, .tgl:after::-moz-selection, .tgl:before::-moz-selection, .tgl *::-moz-selection, .tgl *:after::-moz-selection, .tgl *:before::-moz-selection, .tgl + .tgl-btn::-moz-selection {        background: none;    }    .tgl::selection, .tgl:after::selection, .tgl:before::selection, .tgl *::selection, .tgl *:after::selection, .tgl *:before::selection, .tgl + .tgl-btn::selection {        background: none;    }        .tgl + .tgl-btn {        outline: 0;        display: block;        width: 4em;        height: 2em;        position: relative;        cursor: pointer;    }        .tgl + .tgl-btn:after, .tgl + .tgl-btn:before {        position: relative;        display: block;        content: "";        width: 50%;        height: 100%;    }        .tgl + .tgl-btn:after {        left: 0;    }        .tgl + .tgl-btn:before {        display: none;    }        .tgl:checked + .tgl-btn:after {        left: 50%;    }    .tgl-skewed + .tgl-btn {        overflow: hidden;        -webkit-transform: skew(-10deg);        -ms-transform: skew(-10deg);        transform: skew(-10deg);        -webkit-backface-visibility: hidden;        -ms-backface-visibility: hidden;        backface-visibility: hidden;        -webkit-transition: all .2s ease;        transition: all .2s ease;        font-family: sans-serif;        background: #888;    }        .tgl-skewed + .tgl-btn:after, .tgl-skewed + .tgl-btn:before {        -webkit-transform: skew(10deg);        -ms-transform: skew(10deg);        transform: skew(10deg);        display: inline-block;        -webkit-transition: all .2s ease;        transition: all .2s ease;        width: 100%;        text-align: center;        position: absolute;        line-height: 2em;        font-weight: bold;        color: #fff;        text-shadow: 0 1px 0 rgba(0, 0, 0, 0.4);    }        .tgl-skewed + .tgl-btn:after {        left: 100%;        content: attr(data-tg-on);    }        .tgl-skewed + .tgl-btn:before {        left: 0;        content: attr(data-tg-off);    }        .tgl-skewed + .tgl-btn:active {        background: #888;    }        .tgl-skewed + .tgl-btn:active:before {        left: -10%;    }        .tgl-skewed:checked + .tgl-btn {        background: mediumpurple;    }        .tgl-skewed:checked + .tgl-btn:before {        left: -100%;    }        .tgl-skewed:checked + .tgl-btn:after {        left: 0;    }        .tgl-skewed:checked + .tgl-btn:active:after {        left: 10%;    }</style><ul class="tg-list">    <li class="tg-list-item">        <h4>重译版</h4>        <input class="tgl tgl-skewed" id="cb0" type="checkbox" checked="checked" onchange="showOrHideLrc(this.id, this.checked)">        <label class="tgl-btn" data-tg-off="OFF" data-tg-on="ON" for="cb0"></label>    </li>    <li class="tg-list-item">        <h4>原文</h4>        <input class="tgl tgl-skewed" id="cb1" type="checkbox" checked="checked" onchange="showOrHideLrc(this.id, this.checked)">        <label class="tgl-btn" data-tg-off="OFF" data-tg-on="ON" for="cb1"></label>    </li>    <li class="tg-list-item">        <h4>版本一</h4>        <input class="tgl tgl-skewed" id="cb2" type="checkbox" checked="checked" onchange="showOrHideLrc(this.id, this.checked)">        <label class="tgl-btn" data-tg-off="OFF" data-tg-on="ON" for="cb2"></label>    </li>    <li class="tg-list-item">        <h4>版本二</h4>        <input class="tgl tgl-skewed" id="cb3" type="checkbox" checked="checked" onchange="showOrHideLrc(this.id, this.checked)">        <label class="tgl-btn" data-tg-off="OFF" data-tg-on="ON" for="cb3"></label>    </li>    <li class="tg-list-item">        <h4>古风版</h4>        <input class="tgl tgl-skewed" id="cb4" type="checkbox" checked="checked" onchange="showOrHideLrc(this.id, this.checked)">        <label class="tgl-btn" data-tg-off="OFF" data-tg-on="ON" for="cb4"></label>    </li></ul><p id="lrc0" class="lrc">    <span class="lrc_line pre"></span>    <span class="lrc_line current"></span>    <span class="lrc_line next"></span></p><p id="lrc1" class="lrc">    <span class="lrc_line pre"></span>    <span class="lrc_line current"></span>    <span class="lrc_line next"></span></p><p id="lrc2" class="lrc">    <span class="lrc_line pre"></span>    <span class="lrc_line current"></span>    <span class="lrc_line next"></span></p><p id="lrc3" class="lrc">    <span class="lrc_line pre"></span>    <span class="lrc_line current"></span>    <span class="lrc_line next"></span></p><p id="lrc4" class="lrc">    <span class="lrc_line pre"></span>    <span class="lrc_line current"></span>    <span class="lrc_line next"></span></p><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><blockquote><p>  最近看新闻，郭小四又出来浪了，然后双被锤了，叒拍电影了，叕翻车了，不一样的是这次居然承认抄袭还他妈道歉了<span class="github-emoji"><span>😦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f626.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，顿时有种信仰崩塌的感觉 —— 作为也曾装模作样地追了《最小说》长达五个月的伪文青，初中时的我就一直坚信小四是无辜的，每次有同样懵懂文字的少男少女跟我吐槽郭敬明抄袭，我都会正色言道：“不准侮辱我的偶像，小四是我心目中全中国最好的翻译家 <span class="github-emoji"><span>😤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f624.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>”。玩笑归玩笑，真要说郭敬明写的东西，早期的文字还是可以算得上独具风格，至于后面的，讲的文雅一点，就是尼玛坟头狗屎又臭又硬。十好几年过去了，现在还记得的当初《最》里的故事就两个，一个是苏小懒的《全世爱》，一个就是《小时代1.0》 —— 但是记得它不是因为故事好，而是其扭曲到惊悚的三观给我生吞狗屎般的体验实在久久不能忘怀<span class="github-emoji"><span>😒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 。<br>  再说回翻译这回事儿，都说翻译讲求个“信、达、雅”，但是这首歌的几版翻译里，只有版本二感觉还算不错，版本一不光差些意思，甚至还有明显的错误。而那个看上去挺唬人的低仿诗经古风版，只能说是狗屁不通似是而非、牵强附会哗众取宠 —— 偏偏很多人还最中意这一版，可甚是叫人“泪水涟涟 无语凝噎”<span class="github-emoji"><span>😑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 。这次重译的版本除了一点点的私货，是力求优先贴近原文，然后再考虑通顺流畅和用词的美感，可能不是别人眼里的“更好”吧，但是我尽力了。反正，我喜欢。<br>  想来每天写程序不也就是一种“翻译”么 —— 如果说编译器(compiler)是把程序员才懂的源代码(source code)翻译成机器懂的二进制(bindery)，那写代码的过程不就是把正常人类的想法翻译成作为非正常人类·程序员所使用的语言么。所以这样想来“信、达、雅”也是讲得通的，要同时具备标准人类的想法和非人类的思维，两者都要融会贯通，编码时优先忠实地翻译现实“意图”，然后再追求所谓架构和程序的美感。见了太多为了设计而做的设计，通篇奇技淫巧的所谓高级编程却和实际相去甚远，就和如今的古风圈一样令人叹惋。</p></blockquote><h1 id="细考"><a href="#细考" class="headerlink" title="细考"></a>细考</h1><h3 id="「恋」与「愛」"><a href="#「恋」与「愛」" class="headerlink" title="「恋」与「愛」"></a>「恋」与「愛」</h3><p>有这样一种说法：<a href="http://www.coffeejp.com/article/cihui/2008-09-24/1729.html">恋は下心、愛は真心。</a></p><ul><li>解释：恋字中的心是在下面，而愛字中的心在中间。</li><li>下心/したこころ在日文中是指对异性的本能冲动；而真心在现代日语中不常用，因为日文愛字正中有心所以才说爱是真ん中の心(正中间的心)。</li></ul><p>恋は求めること、愛は与えること —— 恋是索取的欲望，爱是给予的奉献。</p><p>所以歌词前后两部分的第一句里非别用了「恋」与「愛」这两个单字，我认为是不一样的，而版本一的翻译中使用的是「恋爱」与「爱情」，感觉就不是很有区分。相反的。古风版里分别用的「情窦初开」和「情深意重」，区分是区分开了，但是意思完全变了 —— 初开的就只能是「恋」么？</p><h3 id="夕立ち"><a href="#夕立ち" class="headerlink" title="夕立ち"></a>夕立ち</h3><p><a href="https://ja.wikipedia.org/wiki/%E5%A4%95%E7%AB%8B">夕立ち</a>，教材和中文网站一般都将其解释为「夏天的午后出现的骤雨、雷阵雨」，但是参考日文维基百科的解释，「古語としては、雨に限らず、風・波・雲などが夕方に起こり立つことを動詞で「夕立つ（ゆふだつ）」と呼んだ。その名詞形が「夕立（ゆふだち）」である。」，意思是说不仅限于下雨，傍晚时出现的风、云现象，都可以叫做「夕立ち」。维基上还配了一张图「夕立の雲」：<br><img src="/2021/01/03/retranslated-a-hundred-love-songs/yuudachi.webp" alt="夕立の雲"></p><p>所以考虑到后面一句蝉鸣渐远的叙述连贯性，这里我没有选择版本二的意思，而是倾向于版本一的说法。</p><h3 id="蝉时雨（せみしぐれ）"><a href="#蝉时雨（せみしぐれ）" class="headerlink" title="蝉时雨（せみしぐれ）"></a>蝉时雨（せみしぐれ）</h3><p>其实「蝉時雨」并不是指下雨，而是说夏天蝉鸣的声音如阵雨一样。<br>曾经在大陆七八十年代风靡的电影《人证》的原著作者森村诚一写过俳句：相闻歌离蝉时雨。<br>「相闻歌」是日本古代诗歌总集《万叶集》中的一种题材，是亲友、恋人间互相问候的诗歌。可以想象犹如雨一般的蝉鸣和人心中的爱慕、思念形成对比，一静一动，意境就出来了。 </p><p style="text-align: right;"><a href="https://zhuanlan.zhihu.com/p/234753154?utm_source=wechat_session">—— 日语里有哪些美到令人窒息的词汇？</a> </p><p></p><h3 id="迷い桜"><a href="#迷い桜" class="headerlink" title="迷い桜"></a>迷い桜</h3><p><a href="https://dictionary.goo.ne.jp/word/%E8%BF%B7%E3%81%84/#jn-209707">迷い</a>，用雅虎搜了一下「迷い桜」的图片，我理解为纷繁迷醉的样子。<br><img src="/2021/01/03/retranslated-a-hundred-love-songs/sakura.webp" alt="迷い桜"></p><h3 id="影法師"><a href="#影法師" class="headerlink" title="影法師"></a>影法師</h3><p><a href="https://oshiete.goo.ne.jp/qa/970717.html">影法師</a>，简单来说就是人影，是对影子的一种拟人化表达。</p><h3 id="見上げる星空は万華鏡"><a href="#見上げる星空は万華鏡" class="headerlink" title="見上げる星空は万華鏡"></a>見上げる星空は万華鏡</h3><p>最想翻译的就是这一句，原因如下(<a href="https://www.zhihu.com/question/29255072/answer/43863800">你见过哪些外语歌曲如诗般的神级翻译？</a>)：</p><p><img src="/2021/01/03/retranslated-a-hundred-love-songs/zhihu.webp" alt="zhihu"></p><p>第一次听这歌看到这句歌词，意会到的就是图中表达的意境，然而并没有发现任何作证的蛛丝马迹。。<br>反正我就这么理解，毕竟ab双鱼，没人比我更懂 namida (懂王手势)：</p><iframe id="bili1" width="100%" src="//player.bilibili.com/player.html?aid=925012656&amp;bvid=BV13T4y157AD&amp;cid=173796822&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili1 = document.querySelector('#bili1');    var container = document.querySelector('#article-container');    bili1.height = (container.clientWidth * 5 / 8) + 'px';</script>]]></content>
      
      
      <categories>
          
          <category> 技术之外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安利向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅地管理国际化资源——i18n-manager</title>
      <link href="/2020/12/31/manage-i18n-resources-gracefully/"/>
      <url>/2020/12/31/manage-i18n-resources-gracefully/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目开发中国际化多语言的需求非常常见，最近这两年工作项目中都是人工手动管理翻译文件的方式，感觉非常麻烦且容易出错。做 Android 开发的时候，Android Studio 中有一个非常好用的 <a href="https://developer.android.google.cn/studio/write/translations-editor">Translations Editor</a>，那么有没有一个类似的通用工具呢？<br>然后，我找到了 <a href="https://github.com/debuggerx01/i18n-manager">i18n-manager</a> 这个项目</p></blockquote><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><iframe id="bili1" width="100%" src="//player.bilibili.com/player.html?aid=755876889&amp;bvid=BV1g64y1Z79w&amp;cid=276252283&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili1 = document.querySelector('#bili1');    var container = document.querySelector('#article-container');    bili1.height = (container.clientWidth * 5 / 8) + 'px';</script><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>下面是我加入了免费翻译 API 的版本：<br><a href="https://github.com/debuggerx01/i18n-manager/releases/tag/free_translate">https://github.com/debuggerx01/i18n-manager/releases/tag/free_translate</a><br>Feel free ~</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> 前端 </tag>
            
            <tag> flutter </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这些年，我与Flutter……</title>
      <link href="/2020/12/29/these-years-about-flutter-and-me/"/>
      <url>/2020/12/29/these-years-about-flutter-and-me/</url>
      
        <content type="html"><![CDATA[<h1 id="2017年"><a href="#2017年" class="headerlink" title="2017年"></a>2017年</h1><h2 id="12月"><a href="#12月" class="headerlink" title="12月"></a>12月</h2><ul><li>为公司规划中的新项目调研跨平台方案可行性，在尝试了包括<a href="https://reactnative.cn/">React Native</a>、 <a href="https://ionicframework.com/">ionic</a>、 <a href="http://cordova.axuer.com/">Cordova</a>、 <a href="http://cordova.axuer.com/">Cordova</a>、 <a href="https://weex.apache.org/zh/guide/introduction.html">Weex</a> 等在内几乎当时所有流行的方案之后，竟没有一个能够让人满意的。直到发现了当时还在 alpha 版的 Flutter，被其优秀的开发体验、精妙的架构设计和惊艳的流畅度表现所折服，于是开始正式研究该框架。</li></ul><h1 id="2018年"><a href="#2018年" class="headerlink" title="2018年"></a>2018年</h1><h2 id="1月"><a href="#1月" class="headerlink" title="1月"></a>1月</h2><ul><li>加入了当时(直至今日仍是)人数最多的 Flutter 技术交流群（Flutter 中文用户组 qq:482462550）。</li><li>发现当时没有用于将 json 解析生成数据类模板代码的工具，于是在<a href="https://github.com/zzz40500/GsonFormat">GsonFormat</a>的启发下，用3天时间撸出了<a href="https://github.com/debuggerx01/JSONFormat4Flutter">JSONFormat4Flutter</a>的第一版，并分享在交流群内供群友使用，获得了最初的好评。<blockquote><p>该工具也成为了目前我 GitHub 上 Star 数最多的项目，虽然在易用性上我确实花了一些心思，但是就代码质量而言这就是一坨<span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，能够获得这么多的关注更多的是因为当时没有更好的选择，俗话说“来的早不如来的巧”，这个工具就是出现的时机又早又巧，占了大便宜<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote></li></ul><h2 id="2月"><a href="#2月" class="headerlink" title="2月"></a>2月</h2><ul><li>开始尝试编写公司项目的 demo —— 多语言的小说阅读器。</li><li>Flutter beta 版发布，开始在网络上安利此技术（e.g. <a href="https://v2ex.com/t/433423">Flutter 终于 beta 了，似乎没什么关注度啊，我来刷一波</a>）：<br><img src="/2020/12/29/these-years-about-flutter-and-me/discus.webp" alt="disc"></li></ul><h2 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h2><ul><li>加入 Flutter中文开发者·翻译组，贡献了几篇英文官网文档的翻译（e.g: <a href="https://github.com/flutter-dev/website/blob/zh-cn/android-release-build.md">https://github.com/flutter-dev/website/blob/zh-cn/android-release-build.md</a>）</li><li>被交流群群主大佬<a href="https://zqlxtt.cn/">番茄沙司</a>邀请，成为群管理，参与日常群管理工作、回答群友问题，并在之后的一段时间和包括<em>血心</em>、<em>低调</em>、<em>法的空间</em>等在内的很多大佬交流讨论了很多问题。</li></ul><h2 id="4月"><a href="#4月" class="headerlink" title="4月"></a>4月</h2><ul><li>为了解决 Flutter 项目引入图片资源需要手动编写资源配置文件的麻烦，写了一个自用的 dart 脚本用于自动遍历指定的目录，将其中的文件自动添加到配置中，获得好评后将这个脚本通过Flutter中文开发者<a href="https://github.com/flutter-dev/asset_generator">flutter-dev</a>开源分享，启发了许多朋友用同样的思路实现了更为方便的工具和插件，丰富了 Flutter 尤其是在国内的生态。</li><li>编写阅读器 demo 自定义背景颜色功能的过程中发现，Flutter SDK 中对颜色格式转换的代码存在严重 BUG，于是第一次尝试为开源项目提交PR：<a href="https://github.com/flutter/flutter/pull/16872">Fix hue to 0.0 when red == green == blue</a>。<br><img src="/2020/12/29/these-years-about-flutter-and-me/pr.webp" alt="pr"></li><li>发现基础组件 TabBarView 的状态保持存在严重 BUG：<a href="https://github.com/flutter/flutter/issues/16502">Use TabBarView with AutomaticKeepAliveClientMixin and with 4 or more pages will cause error</a></li></ul><h2 id="5月"><a href="#5月" class="headerlink" title="5月"></a>5月</h2><ul><li>开源并发布了小说阅读器 demo 中编写的电量指示器插件：<a href="https://pub.flutter-io.cn/packages/battery_indicator">battery_indicator</a>。</li><li>开源并发布了小说阅读器 demo 中编写的动态获取组件大小和位置插件：<a href="https://pub.flutter-io.cn/packages/rect_getter">rect_getter</a>。</li><li>阅读器 demo 成型，实现了包括开页特效、自制排版引擎、分页算法等许多功能：</li></ul><p><video id="video1" alt="reader_demo" src="https://www.debuggerx.com/raw_assets/video/flutter_reader_demo.mp4" controls="controls"></video></p><style>    #video1 {        height: 70vh;    }</style><script>    window.setVideoOpts = function(videoEle, startTime) {      videoEle.addEventListener("loadedmetadata", function () {        this.currentTime = startTime;        this.pause();      });      var node = videoEle.parentElement;      var maxLoop = 10;      while (maxLoop > 0 && node.tagName !== 'P') {        node = node.parentNode;        maxLoop--;      }      node.style.display = 'grid';      node.style.placeItems = 'center';    }</script><script>    var v1 = document.querySelector('#video1');    setVideoOpts(v1, 0);</script><h2 id="6月"><a href="#6月" class="headerlink" title="6月"></a>6月</h2><ul><li>团队内推广 Flutter 失败，领导的理由是不能接受冒险采用尚未正式发布的新技术。考虑到团队技术氛围问题和公司运营情况，最终决定辞职。</li><li>离职后休息期内，继续玩 Flutter。</li></ul><h2 id="7月"><a href="#7月" class="headerlink" title="7月"></a>7月</h2><ul><li>利用B站开源的<a href="https://github.com/bilibili/ijkplayer">ijkplayer</a>，实现了一个增强版的视频播放器插件demo，支持多种格式以及流媒体直播：</li></ul><p><video id="video2" alt="ijkplayer_demo" src="https://www.debuggerx.com/raw_assets/video/flutter_ijkplayer_demo.mp4" controls="controls"></video></p><style>    #video2 {        height: 70vh;    }</style><script>    var v2 = document.querySelector('#video2');    setVideoOpts(v2, 0);</script><ul><li><p>受时任<a href="https://juejin.cn/">掘金</a>编辑程六金大佬之邀，向<a href="https://zhuanlan.zhihu.com/p/39499082">从0到1：我的 Flutter 技术实践 | 掘金技术征文</a>活动投稿：</p><ul><li><p><a href="https://juejin.cn/post/6844903639832608775">在Flutter开发过程中快速生成json解析模板类的工具 </a></p></li><li><p><a href="https://juejin.cn/post/6844903650737782792">利用RectGetter组件获取控件位置尺寸实现的几个高级效果和功能</a></p><h2 id="8月"><a href="#8月" class="headerlink" title="8月"></a>8月</h2></li></ul></li><li><p>参与社区讨论：<a href="https://github.com/flutter/flutter/issues/12319">Provide method and/or config to programmatically scroll to ListView index</a>，通过 gist 分享的解决方案获得了合计 37 Star：<br>  <a href="https://gist.github.com/debuggerx01/49f108d68ed903458e9478b4f0c186f4">debuggerx01 / visible_items_of_listview.dart</a><br>  <a href="https://gist.github.com/debuggerx01/b8ef756ee02b3eb82ec3702f14ba94e6">debuggerx01 / JumpToIndexDemo.dart</a></p></li><li><p>为解决 Dart 解码图片资源效率过低问题，验证了由原生侧进行图片解码并生成缩略图，再传输至 Flutter 侧显示的思路可行性。</p></li></ul><h2 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h2><ul><li>凭借 Flutter 经验入职新公司。但后续因公司业务规划变更，实际是写了一年半的 Node.js 和 React……但是由于得以深入接触 React 及 Taro 等前端方案，对 Flutter 的理解也更加深入。</li></ul><h1 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h1><h2 id="5月-1"><a href="#5月-1" class="headerlink" title="5月"></a>5月</h2><ul><li>公司受疫情影响过于严重，于是再次凭 Flutter 经验入职一家专注于心电检测的大健康公司，使用 Flutter\Next.js 开发双端应用。</li></ul><h2 id="6月-1"><a href="#6月-1" class="headerlink" title="6月"></a>6月</h2><ul><li>实现了一个可以在 Flutter 项目编译前后执行自定义脚本的工具，并默认简单实现了一套类似C语言中条件编译的标记语法，可以实现同一套代码库根据编译时是 debug/release 模式或者传入的渠道名而编译出不同的产物，待生产验证后开源分享。</li></ul><h2 id="11月"><a href="#11月" class="headerlink" title="11月"></a>11月</h2><ul><li>使用体验&amp;吐槽：<a href="https://v2ex.com/t/727537">Flutter 的开发体验真的是很好</a><br><img src="/2020/12/29/these-years-about-flutter-and-me/tsukkomi1.webp" alt="tsukkomi1"><br><img src="/2020/12/29/these-years-about-flutter-and-me/tsukkomi2.webp" alt="tsukkomi2"></li></ul><h2 id="12月-1"><a href="#12月-1" class="headerlink" title="12月"></a>12月</h2><ul><li>第一阶段开发接近完成，达成成就：不写一行原生代码实现完整的商业应用。</li><li>利用 GitLab 的 CI/CD 实现了项目的分版本自动化打包，规范了项目交付、测试、推送更新提醒的过程，极大提高了工作效率：<a href="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/">GitLab CI/CD (一) ：自动打包部署Flutter项目</a></li></ul><h1 id="2021年"><a href="#2021年" class="headerlink" title="2021年"></a>2021年</h1><h2 id="2月-1"><a href="#2月-1" class="headerlink" title="2月"></a>2月</h2><ul><li>春节期间通过研究实现重要突破，在app中使用纯dart语言实现了高效的<a href="/2021/02/18/qrs-detector-for-flutter-in-dart/">实时QRS波心率识别算法</a>，极大提高了app的使用体验和专业度</li></ul><h2 id="3月-1"><a href="#3月-1" class="headerlink" title="3月"></a>3月</h2><ul><li>完成公司项目的空安全迁移，并将迁移过程的心得记录为博客，收获了不错的搜索引擎权重和阅读量：<a href="/2021/03/07/migrate-flutter-project-to-null-safety/">迁移Flutter项目到空安全的血泪史——有血、有泪、有<span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></a>。</li></ul><h2 id="4月-1"><a href="#4月-1" class="headerlink" title="4月"></a>4月</h2><ul><li>更新 <a href="https://github.com/debuggerx01/JSONFormat4Flutter">JSONFormat4Flutter</a> 以支持最新的空安全语法：<a href="/2021/04/20/jsonformat4flutter-v0-9-nullsafety/">JSONFormat4Flutter v0.9 更新说明</a></li></ul><h2 id="6月-2"><a href="#6月-2" class="headerlink" title="6月"></a>6月</h2><ul><li>公司项目app正式上架AppStore：<a href="https://apps.apple.com/cn/app/id1561137754?platform=iphone">App Store 上的“百二健康”</a></li></ul><h2 id="9月-1"><a href="#9月-1" class="headerlink" title="9月"></a>9月</h2><ul><li>公司项目app正式上架Google Play：<a href="https://play.google.com/store/apps/details?id=com.xiinhealthtech.live120_tw">百二健康Live120 - Google Play 上的应用</a></li><li>开始个人开源项目 <a href="https://github.com/debuggerx01/dde_gesture_manager">DDE 手势管理器</a> 的功能规划和界面设计，决定使用 flutter desktop 方案开发</li></ul><h2 id="11月-1"><a href="#11月-1" class="headerlink" title="11月"></a>11月</h2><ul><li>为 <a href="https://github.com/debuggerx01/dde_gesture_manager">DDE 手势管理器</a> 的后端框架选型为 dart 语言的 <a href="https://angel3-framework.web.app/">Angel3</a>，并参与社区开发，为该项目贡献了一些新功能和错误修复，贡献度仅次于作者：<a href="https://github.com/dukefirehawk/angel/graphs/contributors?from=2021-10-30&amp;to=2022-03-10&amp;type=c">Contributors to dukefirehawk/angel</a></li></ul><h1 id="2022年"><a href="#2022年" class="headerlink" title="2022年"></a>2022年</h1><h2 id="2月-2"><a href="#2月-2" class="headerlink" title="2月"></a>2月</h2><p><a href="https://github.com/debuggerx01/dde_gesture_manager">DDE 手势管理器</a> 初版开发完成正式上线，并成功上架 deepin/UOS 应用商店：<br><img src="/2020/12/29/these-years-about-flutter-and-me/store.webp" alt="store"></p><h2 id="4月-2"><a href="#4月-2" class="headerlink" title="4月"></a>4月</h2><p>从医疗健康公司离职，并入职一家AI领域、做虚拟人社交产品的公司，使用 Flutter 做出海项目。</p><p>作为一款主要受众是欧美市场年轻用户群体的 To C 产品，项目里有很多酷炫的设计和动效，比如：</p><p><video id="video3" alt="ijkplayer_demo" src="https://www.debuggerx.com/raw_assets/video/twin_page.mp4" controls="controls"></video><video id="video4" alt="ijkplayer_demo" src="https://www.debuggerx.com/raw_assets/video/ai_twin.mp4" controls="controls"></video></p><style>    #video3 {        width: 43%;    }    #video4 {        width: 52%;        float: right;    }</style><p>项目期间有如下积累：</p><ul><li>入职编码测试demo：<a href="https://www.debuggerx.com/flutter_chat_demo">Chat Demo</a> ，有基本聊天界面、文字和图片发送、消息点赞等功能</li><li>群聊测试demo：<a href="http://www.debuggerx.com/flutter_group_chat_demo">Group Chat Demo</a> ，主要是实现了群聊场景下的“爬楼”功能</li><li>通用气泡提醒组件demo：<a href="https://www.debuggerx.com/flutter_bubble_demo">Bubble Demo</a> ，一个智能的为任意组件添加提醒气泡的小组件</li></ul><h1 id="2023年"><a href="#2023年" class="headerlink" title="2023年"></a>2023年</h1><h2 id="4月-3"><a href="#4月-3" class="headerlink" title="4月"></a>4月</h2><p>根据 Deepin 论坛用户的需求，花了2、3天做了个 Linux 桌面二维码识别工具，并上架深度应用商店：<br><a href="https://bbs.deepin.org/post/255638">[应用分享] 识别屏幕二维码的APP上架了</a></p><h2 id="6月-3"><a href="#6月-3" class="headerlink" title="6月"></a>6月</h2><p>历时一年半，终于把 <a href="/2023/06/20/conditional-compilation-using-source-gen-in-flutter-3">在 flutter 中利用 source_gen 实现条件编译</a> 的上中下三篇教程写完了<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="7月-1"><a href="#7月-1" class="headerlink" title="7月"></a>7月</h2><p>完成个人项目：<a href="/2023/07/18/remote-system-monitor/">远程监视器——使用Flutter/Dart开发的Linux系统状态监视APP</a></p>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab CI/CD (二) ：自动编译部署Web项目</title>
      <link href="/2020/12/26/modern-development-workflow-gitlab-ci-cd-2/"/>
      <url>/2020/12/26/modern-development-workflow-gitlab-ci-cd-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>书接上文《<a href="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/">GitLab CI/CD (一) ：自动打包部署Flutter项目</a>》，这次继续记录用 GitLab CI/CD 自动部署项目中 H5 部分到测试环境的方法。</p></blockquote><h1 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h1><p>这个 H5 的项目主要是作为上篇中 Flutter 项目的补充存在的，因为 APP 中有些页面有复杂图表、动态更新，后续还有可能需要能够方便地分享到主流社交平台进行引流的需求，所以这部分选择用 Web 的方式实现。具体技术选型是 <a href="https://nextjs.org/">Next.js</a> + TypeScript + <a href="https://material-ui.com/zh/">Material-UI</a>，通过 Next.js 自带的 Node.js 服务服务器部署，并使用 <a href="https://www.npmjs.com/package/pm2">pm2</a> 做进程管理。</p><h1 id="注册-Runner"><a href="#注册-Runner" class="headerlink" title="注册 Runner"></a>注册 Runner</h1><p>安装方法参考上篇，这次以 shell 作为执行器注册 Runner，如下图：<br><img src="/2020/12/26/modern-development-workflow-gitlab-ci-cd-2/shell.webp" alt="shell"><br>配置方法很简单，只要在输入 executor 时输入 shell 即可，其他选项也都和上篇中的一样。</p><h1 id="编写-CI-配置文件"><a href="#编写-CI-配置文件" class="headerlink" title="编写 CI 配置文件"></a>编写 CI 配置文件</h1><p>配置如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_project:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">GIT_STRATEGY:</span> <span class="string">none</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">/root/heart_health_h5</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">pull</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cnpm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cnpm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pm2</span> <span class="string">restart</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nextjs</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>script 执行命令的部分很简单，就是进入项目目录，更新源码，安装依赖，执行编译并重启 pm2 管理的服务器进程。需要说明的是通过 variables 指定的 <code>GIT_STRATEGY: none</code>，参考 <a href="https://docs.gitlab.com/ee/ci/yaml/README.html">https://docs.gitlab.com/ee/ci/yaml/README.html</a>， 这是为了跳过 Runner 自动执行的 Git 相关操作，因为 shell 环境不像上篇的 docker 那样每次运行都是新的，所以并不需要 CI 自动下载更新代码，完全可以在命令中更方便灵活地处理。</p></blockquote><h2 id="处理-git-pull-需要输入用户名密码的问题"><a href="#处理-git-pull-需要输入用户名密码的问题" class="headerlink" title="处理 git pull 需要输入用户名密码的问题"></a>处理 git pull 需要输入用户名密码的问题</h2><p>因为是内部的测试服务器，所以简单粗暴得使其执行 git 操作时记住帐号密码即可。<br>在项目目录下执行：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></tbody></table></figure><p>然后执行一次 <code>git pull</code>，输入的帐号和密码就会被自动存储，之后再操作就不要输入了</p><h2 id="指定-Runner-运行-shell-所使用的用户"><a href="#指定-Runner-运行-shell-所使用的用户" class="headerlink" title="指定 Runner 运行 shell 所使用的用户"></a>指定 Runner 运行 shell 所使用的用户</h2><p>第一次注册好 Runner 后测试 CI 任务，结果提示权限不足，才想起来这台服务器上 H5 项目是使用 root 帐号运行的，而 Runner 是在普通用户下安装的，所以需要重新安装并指定以 root 用户执行：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先卸载</span></span><br><span class="line">gitlab-runner uninstall</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再安装，同时指定工作目录和使用的用户</span></span><br><span class="line">gitlab-runner install --working-directory /root --user root</span><br><span class="line"></span><br><span class="line">sudo service gitlab-runner restart</span><br></pre></td></tr></tbody></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>每次向 master 分支提交代码时，都会自动触发 CI 流水线：<br><img src="/2020/12/26/modern-development-workflow-gitlab-ci-cd-2/jobs.webp" alt="jobs"><br><img src="/2020/12/26/modern-development-workflow-gitlab-ci-cd-2/result.webp" alt="result"></p><p>再也不用改完代码还要再去登陆服务器手动更新部署啦<span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学院派Academia：赛博已来——控制论革命的残酷真相</title>
      <link href="/2020/12/20/Academia-The-cruel-truth-of-cybernetic-revolution/"/>
      <url>/2020/12/20/Academia-The-cruel-truth-of-cybernetic-revolution/</url>
      
        <content type="html"><![CDATA[<span hidden="">针对赛博朋克文化的讨论，大量的解析内容仍然停留在赛博朋克所呈现的五光十色的文化符号和美学表征之上，或仅是浅尝辄止地将赛博朋克视为某种纯粹的“未来幻想”或者“文学体裁”，而无意识地削弱了这个题材的历史性和现实性。这种去深度的、空虚的文化拟像矩阵轰炸，在泛商品化的消费社会，已经模糊了批判文学的焦点，哪怕《赛博朋克2077》这样的作品已经及其有意识地将赛博朋克世界表述为一个不值得向往的反乌托邦，玩家仍然将这个世界看作一个类迪士尼的游乐场，而其中尖锐的深刻性也被暗暗消解了</span><p><span id="jump0"></span></p><iframe id="bili1" width="100%" src="//player.bilibili.com/player.html?aid=885560009&amp;bvid=BV1NK4y1L7gw&amp;cid=265621273&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili1 = document.querySelector('#bili1');    var container = document.querySelector('#article-container');    bili1.height = (container.clientWidth * 3 / 4) + 'px';</script><h1 id="观看指南"><a href="#观看指南" class="headerlink" title="观看指南"></a>观看指南</h1><p>为节省您的时间，以及获得更佳的观看体验，建议先阅读以下内容——下面<code>视频主题</code>一节的内容来自视频的开头，如果阅读后对其所述内容感有兴趣，并能接受其学术化的表达方式，再继续阅读之后的章节或观看视频，否则推荐您移步 <a href="/videos/deyunshe/">视频·德云社</a> 页面轻松一下<span class="github-emoji"><span>😘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="视频主题"><a href="#视频主题" class="headerlink" title="视频主题"></a>视频主题</h2><blockquote><p>针对赛博朋克文化的讨论，大量的解析内容仍然停留在赛博朋克所呈现的五光十色的文化符号和美学表征之上，或仅是浅尝辄止地将赛博朋克视为某种纯粹的“未来幻想”或者“文学体裁”，而无意识地削弱了这个题材的历史性和现实性。这种去深度的、空虚的文化拟像矩阵轰炸，在泛商品化的消费社会，已经模糊了批判文学的焦点，哪怕《赛博朋克2077》这样的作品已经及其有意识地将赛博朋克世界表述为一个不值得向往的反乌托邦，玩家仍然将这个世界看作一个类迪士尼的游乐场，而其中尖锐的深刻性也被暗暗消解了。于是乎，很少有人会认真分析赛博朋克背后所承载的现实社会议题和哲学意涵，例如：对晚期控制论资本主义制度下，基于无国界全球企业精英阶层的权利崇拜，对表现为无限义体增值的新自由主义商品拜物教，以及基于信息和科技革命下的人类的彻底商品化和去生产化。事实上，这种“文化消费品”对这种现实问题的系统性忽略，正是马克思哲学和社科的最大支流“法兰克福学派”和“文化研究学派”所提出的，<strong>资本主义对大众文化和激进文化的低俗化收编</strong>。一旦这种收编彻底完成，类似赛博朋克这样具有进步革命意义的题材将彻底沦为资本主义的意识形态工具和压迫工具。本文将跳过对赛博朋克文化的基础科普，直接进入其所反应的整个战后控制论资本主义的历史流变，以及统治逻辑这个根本性的问题上，为大家揭示，为什么我们早就身处其中而不自知。</p></blockquote><p>传送门：<a href="#jump0">回到视频</a></p><p>后面的章节请视情况选择：</p><h3 id="赛博朋克是什么"><a href="#赛博朋克是什么" class="headerlink" title="赛博朋克是什么"></a>赛博朋克是什么</h3><ul><li><a href="#jump1">99%的人不了解的赛博朋克</a></li><li><a href="#jump2">赛博朋克终极视觉指南</a></li></ul><h3 id="关于游戏《赛博朋克2077》"><a href="#关于游戏《赛博朋克2077》" class="headerlink" title="关于游戏《赛博朋克2077》"></a>关于游戏《赛博朋克2077》</h3><ul><li><a href="https://new.qq.com/omn/20201218/20201218A0EYX400.html">大火的《赛博朋克2077》，到底是什么</a></li></ul><h3 id="关于视频作者"><a href="#关于视频作者" class="headerlink" title="关于视频作者"></a>关于视频作者</h3><ul><li><a href="#jump3">关于学院派Academia</a></li></ul><p><span id="jump1"></span></p><h1 id="99-的人不了解的赛博朋克"><a href="#99-的人不了解的赛博朋克" class="headerlink" title="99%的人不了解的赛博朋克"></a>99%的人不了解的赛博朋克</h1><iframe id="bili2" width="100%" src="//player.bilibili.com/player.html?aid=66128569&amp;bvid=BV1X4411273j&amp;cid=257480478&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili2 = document.querySelector('#bili2');    var container = document.querySelector('#article-container');    bili2.height = (container.clientWidth * 3 / 4) + 'px';</script><p><span id="jump2"></span></p><h1 id="赛博朋克终极视觉指南"><a href="#赛博朋克终极视觉指南" class="headerlink" title="赛博朋克终极视觉指南"></a>赛博朋克终极视觉指南</h1><iframe id="bili3" width="100%" src="//player.bilibili.com/player.html?aid=928046244&amp;bvid=BV1wT4y1M7tu&amp;cid=267222757&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><script>    var bili3 = document.querySelector('#bili3');    var container = document.querySelector('#article-container');    bili3.height = (container.clientWidth * 3 / 4) + 'px';</script><p><span id="jump3"></span></p><h1 id="学院派Academia"><a href="#学院派Academia" class="headerlink" title="学院派Academia"></a>学院派Academia</h1><p>学院派Academia，bilibili 知名科普UP主，B站主页：<a href="https://space.bilibili.com/96639395">学院派Academia</a>，口号是：<br><code>把世界顶尖大学的硬核知识漂洋过海带给你 【美国TOP20大学在读/和教授一起做超长学术视频/拒绝碎片化知识短视频】</code><br>其实是两位美国著名大学的留学生(情侣<span class="github-emoji"><span>🍋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)，视频内容常以动漫游戏等作为幌子，实际表达的是过于硬核的社会科学及人文研究领域，涉猎领域和纵深都很牛逼。</p><p>更多评价和讨论：<a href="https://www.zhihu.com/question/402340611">如何评价B站up主学院派Academia？</a></p><p>是我个人目前在B站知识区见到难得在课题深度和思想表达力两方面都足够优秀的视频作者。</p><ul><li>其他安利作品：<ol><li><a href="https://www.bilibili.com/video/BV18z4y1C7rX">【硬核社会学】996、内卷、打工人：马克思为什么是对的</a></li><li><a href="https://www.bilibili.com/video/BV1bv411B7bG">【游戏社会学】GTA5最深度解析：荒诞世界的罪与罚</a></li><li><a href="https://www.bilibili.com/video/BV15Z4y1G7qy">【硬核社会学】消费资本主义：控制世界的新宗教</a></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术之外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安利向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab CI/CD (一) ：自动打包部署Flutter项目</title>
      <link href="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/"/>
      <url>/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在做的项目最近终于接近了第一个<a href="https://baike.so.com/doc/5651042-5863687.html">里程碑</a> ，挤了些时间把一直没做的 CI/CD 利用现有的资源和 GitLab 实现了，记录下大概的过程。</p></blockquote><h1 id="CI-CD-是什么，为什么需要-CI-CD"><a href="#CI-CD-是什么，为什么需要-CI-CD" class="headerlink" title="CI/CD 是什么，为什么需要 CI/CD"></a>CI/CD 是什么，为什么需要 CI/CD</h1><p><a href="https://www.jianshu.com/p/735306fe5794">什么是 CI/CD ？持续集成与持续交付</a><br>上面这篇文章已经总结得不错了，我这边主要也是利用 CI/CD 确保每次 push 的代码都是完整可编译的，从而减少错误的发生，同时自动部署，免去手动发布 APP 测试版本和登陆测服人工部署网站更新的麻烦，提高工作效率。</p><blockquote><p>相比于原始的编写自动化脚本（shell/python等），yaml 格式的 CI/CD 配置方式简化了流程，提供了很多便捷的功能。但是相对应的，需要查阅相关配置文档，而且需要更强的 shell 命令编写能力</p></blockquote><h1 id="Flutter-项目（目前仅限-Android-端）"><a href="#Flutter-项目（目前仅限-Android-端）" class="headerlink" title="Flutter 项目（目前仅限 Android 端）"></a>Flutter 项目（目前仅限 Android 端）</h1><h2 id="安装-GitLab-Runner"><a href="#安装-GitLab-Runner" class="headerlink" title="安装 GitLab Runner"></a>安装 GitLab Runner</h2><p><img src="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/install_runner.webp" alt="install_runner"><br>如上图，进入项目的 GitLab 主页，导航至[设置]-[CI/CD]-展开[Runner]选项卡，可以看到简易教程.</p><blockquote><p>这里我他妈被误导了<span class="github-emoji"><span>😤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f624.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，看到那个大大蓝底的“在 Kubernetes 上安装 Runner”按钮，以为是 Runner 必须安装在 K8s上呢，结果浪费了时间去搭建 K8s 还没搭成功……其实这里表述的真实含义是在 K8s 集群上或者某台服务器上安装 Runner 都是可以的，二选一。。。<span class="github-emoji"><span>😑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><p>手动安装 GitLab Runner 的教程在： <a href="https://docs.gitlab.com/runner/install/">https://docs.gitlab.com/runner/install/</a></p><blockquote><p>由于 Flutter 项目环境相对比较难配，为了以后可以方便地在多台设备上配置 Runner， 所以我选择基于 docker 环境用以项目编译。恰好内网中有一台之前创建好专门用于运行 docker 的 debian 服务器，所以这次就把项目需要的 Runner 直接安装在这台服务器上了。</p></blockquote><p>在服务器上执行安装命令（参考：<a href="https://docs.gitlab.com/runner/install/linux-repository.html">Install GitLab Runner using the official GitLab repositories</a>）：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh" | sudo bash</span><br><span class="line">export GITLAB_RUNNER_DISABLE_SKEL=true; sudo -E apt-get install gitlab-runner</span><br></pre></td></tr></tbody></table></figure><h2 id="注册-Runner"><a href="#注册-Runner" class="headerlink" title="注册 Runner"></a>注册 Runner</h2><p>安装好后运行注册命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ci-multi-runner register</span><br></pre></td></tr></tbody></table></figure><p>配置如下：</p><p><img src="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/runner_register.webp" alt="register"></p><ol><li>设置 GitLab 服务器的地址，用于 Runner 定时查询 GitLab server 是否有新的作业；</li><li>设置 Token（注册令牌）；</li><li>设置 Runner 的描述，用语在 GitLab 管理页面区分不同的 Runner 实例；</li><li>设置 tag，和项目通过 <code>.gitlab-ci.yml</code> 文件定义流水线时指定的 tag 匹配；</li><li>选择执行器，这里输入 <code>docker</code>；</li><li>由于上一步选择了 docker，这一步需要指定默认的 Docker image，这里提供的是 flutter 官方的镜像。</li></ol><blockquote><p>建议此时预先 pull 好所需的镜像，这样第一次作业执行时就不用花时间 pull 镜像了：<br>    </p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull cirrusci/flutter:latest</span><br></pre></td></tr></tbody></table></figure><p></p></blockquote><p>这样一来就注册完成了，可以在下面的页面看到新注册的 Runner：<br><img src="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/runners.webp" alt="runners"></p><h2 id="编写-CI-配置文件"><a href="#编写-CI-配置文件" class="headerlink" title="编写 CI 配置文件"></a>编写 CI 配置文件</h2><p><img src="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/enable_ci_cd.webp" alt="enable_ci_cd"></p><p>回到项目主页，点击 <code>配置 CI/CD</code> 按钮，开始编写 CI 流水线配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="comment"># 作业执行时会依次执行下面列出的 stage，为了方便，这里只设置了一个stage</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line"></span><br><span class="line"><span class="attr">release_project:</span></span><br><span class="line">  <span class="comment"># 如果省略，则会使用 Runner 注册时配置的镜像，否则会使用这里指定的镜像</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">cirrusci/flutter:latest</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">release</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="comment"># 为了在国内网络下加速 flutter 项目依赖的下载速度，先配置 pub 仓库的中国镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">PUB_HOSTED_URL=https://pub.flutter-io.cn</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span></span><br><span class="line">    <span class="comment"># 由于Android系统App升级时要求下载的新版本apk文件内的版本号大于已安装的版本号</span></span><br><span class="line">    <span class="comment"># 所以这里将作业ID写入flutter的版本号配置，用于实现Android客户端正常的版本更新</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/\(version.\+\)[0-9]+\([0-9]\)/\1${CI_JOB_ID}+${CI_JOB_ID}/"</span> <span class="string">pubspec.yaml</span></span><br><span class="line">    <span class="comment"># 打release包所需的签名文件和key.properties用如下方式在流水线中动态添加，参考问题如下：</span></span><br><span class="line">    <span class="comment"># https://stackoverflow.com/questions/51725339/how-to-manage-signing-keystore-in-gitlab-ci-for-android</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">${FLUTTER_BUILD_APK_KEY}</span> <span class="string">|</span> <span class="string">base64</span> <span class="string">-d</span> <span class="string">&gt;</span> <span class="string">key.jks</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">storePassword=${FLUTTER_BUILD_APK_KEY_PASSWD}</span> <span class="string">&gt;</span> <span class="string">android/key.properties</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">keyPassword=${FLUTTER_BUILD_APK_KEY_PASSWD}</span> <span class="string">&gt;&gt;</span> <span class="string">android/key.properties</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">keyAlias=key</span> <span class="string">&gt;&gt;</span> <span class="string">android/key.properties</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">storeFile=${CI_PROJECT_DIR}/key.jks</span> <span class="string">&gt;&gt;</span> <span class="string">android/key.properties</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">pub</span> <span class="string">get</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">clean</span></span><br><span class="line">    <span class="comment"># - flutter doctor --android-licenses</span></span><br><span class="line">    <span class="comment"># 由于项目中使用了intl_utils用于生成多语言资源，所以需要执行下面两句生成i8n代码</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">pub</span> <span class="string">global</span> <span class="string">activate</span> <span class="string">intl_utils</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">--no-color</span> <span class="string">pub</span> <span class="string">global</span> <span class="string">run</span> <span class="string">intl_utils:generate</span></span><br><span class="line">    <span class="comment"># 替换项目默认的仓库为阿里云的maven仓库用于加速android项目的构建速度</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/google()/maven { url 'https:\/\/maven.aliyun.com\/repository\/google' }/g"</span> <span class="string">android/build.gradle</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/jcenter()/maven { url 'https:\/\/maven.aliyun.com\/repository\/jcenter' }/g"</span> <span class="string">android/build.gradle</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/google()/maven { url 'https:\/\/maven.aliyun.com\/repository\/google' }/g"</span> <span class="string">${FLUTTER_HOME}/packages/flutter_tools/gradle/flutter.gradle</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/jcenter()/maven { url 'https:\/\/maven.aliyun.com\/repository\/jcenter' }/g"</span> <span class="string">${FLUTTER_HOME}/packages/flutter_tools/gradle/flutter.gradle</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/https:\/\/storage.googleapis.com/https:\/\/storage.flutter-io.cn\/download.flutter.io/g"</span> <span class="string">${FLUTTER_HOME}/packages/flutter_tools/gradle/flutter.gradle</span></span><br><span class="line">    <span class="comment"># 执行flutter编译apk的指令，指定仅编译arm指令的apk，并且禁用代码压缩以避免某些原生插件的异常行为</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span> <span class="string">-v</span> <span class="string">build</span> <span class="string">apk</span> <span class="string">--no-shrink</span> <span class="string">--target-platform=android-arm</span></span><br><span class="line">    <span class="comment"># 将编译生成的最终产物先移动到根目录下，否则通过下载得到的作业产物将有非常深的目录层级</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mv</span> <span class="string">build/app/outputs/apk/release/app-release.apk</span> <span class="string">app-release.apk</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"build success, uploading..."</span></span><br><span class="line">    <span class="comment"># 利用curl和python脚本将编译产物、git提交信息、apk的md5值等信息发送到app后台服务器，实现自动发布新测试版</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">curl</span> <span class="string">-X</span> <span class="string">'POST'</span> <span class="string">-F</span> <span class="string">"file=@app-release.apk"</span> <span class="string">http://xxx.xxx.xxx.xx/debugger_api/upload/`md5sum</span> <span class="string">app-release.apk</span> <span class="string">|</span> <span class="string">awk</span> <span class="string">'{print $1}'</span><span class="string">`.apk</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3</span> <span class="string">deploy.py</span> <span class="string">`md5sum</span> <span class="string">app-release.apk</span> <span class="string">|</span> <span class="string">awk</span> <span class="string">'{print $1}'</span><span class="string">`</span> <span class="string">${CI_JOB_ID}</span> <span class="string">"${CI_COMMIT_MESSAGE}"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"uploaded, start release..."</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="comment"># 这里指定的是作业结束后保留的作业产物，由于上面已经复制到了根目录，所以可以直接给出文件名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">app-release.apk</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">flutter</span></span><br></pre></td></tr></tbody></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>每次向 master 分支提交代码时，都会自动触发 CI 流水线：</p><p><img src="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/jobs.webp" alt="jobs"></p><p>可以在作业详情页面查看流水线的日志、下载作业产物等：</p><p><img src="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/job_result.webp" alt="job_result"></p><p>作业执行完后自动将apk上传服务器发版，app侧可以检测到版本更新：</p><p><img src="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/app_update.webp" alt="app_update"></p><h2 id="加速构建速度"><a href="#加速构建速度" class="headerlink" title="加速构建速度"></a>加速构建速度</h2><blockquote><p>刚配置好的流水线运行时间长达接近一个小时，原因在于每次执行 job 时都会基于 docker base image 开始重新构建环境，需要重新下载 <code>gradle</code>、flutter插件、android build tools、android 依赖等大量资源，即使配置了镜像加速，重新下载这些东西还是要花费大量时间。</p></blockquote><p>解决办法就是配置这些路径为 docker 的 volume 以持久化数据，防止重复下载。<br>修改 Runner 服务器的 <code>/etc/gitlab-runner/config.toml</code>：</p><p><img src="/2020/12/13/modern-development-workflow-gitlab-ci-cd-1/volume.webp" alt="volume"></p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《现代CSS布局 —— Grid》 by Una from Google</title>
      <link href="/2020/12/01/one-line-layouts-by-una/"/>
      <url>/2020/12/01/one-line-layouts-by-una/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CSS 布局发生了很大的变化。 现在，具有适用于所有现代浏览器的 CSS Grid 交互操作性工具，让开发能力变得更强大。 本次将由来自 Google 的 Una 分享一些 CSS Grid 建议和技巧，将复杂的布局仅需几行代码即可完成。</p></blockquote><iframe id="bili" src="//player.bilibili.com/player.html?aid=330367795&amp;bvid=BV1vA411x7Vp&amp;cid=255459045&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"></iframe><iframe id="iframe" src="https://1linelayouts.glitch.me/" width="100%" scrolling="no" height="100%" frameborder="0"></iframe><script>function reLayout() {    document.querySelector('html').dataset.theme = "light";    var iframe = document.querySelector('#iframe');    var bili = document.querySelector('#bili');    var container = document.querySelector('#article-container');    bili.height = (container.clientWidth * 3 / 4) + 'px';    if (window.innerWidth < 600) {        iframe.height = '10200px';    } else {        iframe.height = '5830px';    }}reLayout();var originOnResize = window.onresize;window.onresize = function (ev) {    originOnResize(ev);    reLayout();}</script>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这本轻小说真厉害！——『凉宫春日系列』</title>
      <link href="/2020/11/30/ko-no-light-novel-ga-su-goi-suzumiya-series/"/>
      <url>/2020/11/30/ko-no-light-novel-ga-su-goi-suzumiya-series/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  老实说，要到几岁才开始不相信圣诞老人的存在……这类无聊的话题对我而言，根本不痛不痒的。不过，讲到我从几岁起开始不相信圣诞老人就是那个穿着红衣服的老公公时，我能确定地说，我根本打从一开始就不相信。<br>  我知道幼稚园圣诞节庆祝会时出现的圣诞老人是假的，回溯记忆，还能记起周围的幼稚园小朋友都一脸不信任地望着假扮圣诞老人的园长老师。<br>  即使没有撞见老妈正在亲吻圣诞老公公，机灵的我也老早就怀疑只在圣诞节工作的老爷爷是否真的存在了。不过，我却是过了很久以后，才发现外星人、幽灵、妖怪、超能力者以及特摄、动画里头，那些与邪恶组织战斗的英雄们并不存在这世上。<br>  不，说不定我早就发现了，只不过一直不想承认而已。因为，在我的内心深处，是十分渴望那些外星人、幽灵、妖怪、超能力者以及邪恶组织突然出现在眼前的。<br>  和我生活的这个普通世界相比，特摄、动画里头所描绘的世界，反而更有魅力。<br>  我也想活在那种世界里！<br>  不过，现实却是意外地残酷。<br>  现实的生活中，并没有半个转学生转来我班上，我也没看过UFO……就算去了地方上常出现幽灵或妖怪的灵异地点也连个鬼影都没有……花了两小时盯着桌上的铅笔，它却连一微米都没移动……上课时死盯着前座同学的头，却怎么样也无法读出他在想什么。<br>  我就这样边惊叹世界物理法则经常出现的现象，边不停自嘲，不知从何时起，我就开始不看电视上的UFO特别节目或灵异节目了。因为不可能会有那种东西……不过后来我也成长到仅对那方面的事情存有一丝留恋的程度。<br>  国中毕业之后，我便从那孩提时代的梦想毕业，逐渐习惯这个世界的平凡。而让我还有一缕期待的一九九九年也没有发生什么事。进入二十一世纪后，人类依旧无法迈出月球到其他星球去。看这情况，在我还活着的时候，想从地球当天往返阿尔法人马座（AlphaCenauri）似乎是不太可能的。<br>  我脑海中时而幻想着这些事，终于也没啥感慨地成为高中生——直到遇到了凉宫春日。 <br> </p><p style="text-align: right;">—— 『凉宫春日的忧郁 - 序曲』 </p><p></p></blockquote><p><em>如果要说喜欢『凉宫春日系列』的理由，第一点或许就是，记忆中，除去成功学和迷信邪教一类的设计攻心，阅读过的作品里再没有一例能够从开篇序章就能让我产生如此强烈的共鸣</em> <span class="github-emoji"><span>👼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>煞有介事的开头结束，遏制住心中迫不及待口嗨的神经病患者，姑且还是需要先 <strong>reader-friendly</strong> 地解释一下——</p><h1 id="『凉宫春日系列』是个嘛"><a href="#『凉宫春日系列』是个嘛" class="headerlink" title="『凉宫春日系列』是个嘛"></a>『凉宫春日系列』是个嘛</h1><h2 id="坑王谷川流创作的轻小说系列"><a href="#坑王谷川流创作的轻小说系列" class="headerlink" title="坑王谷川流创作的轻小说系列"></a>坑王谷川流创作的轻小说系列</h2><p>首先，《<a href="https://baike.baidu.com/item/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5%E7%B3%BB%E5%88%97/2725153">凉宫</a>》是一套 <ruby>轻小说<rp>(</rp><rt>Light Novel</rt><rp>)</rp></ruby> (所谓<a href="https://baike.baidu.com/item/%E8%BD%BB%E5%B0%8F%E8%AF%B4/69636">轻小说</a>是一种盛行于日本，具有高效地将故事内容传达给读者的通俗的写作手法、通常使用漫画风格的插画的一种娱乐性大众文学和通俗文学体裁)，最早一卷《凉宫春日的忧郁》发售于 2003 年 6 月，作者<a href="https://zh.moegirl.org.cn/%E8%B0%B7%E5%B7%9D%E6%B5%81">谷川流</a>。谷川流出道即巅峰，凭借第一册的《凉宫春日的忧郁》获得2003年第八届“Sneaker”大赏的殊荣，并在宝岛社举办的轻小说<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #fff;color: #FF7242">业界权威  </button><span class="hide-content">业界权威(业界权威？值得商榷，尤其最近几年的高排名作品都是什么鬼……相比下Sneaker大赏还是有节操的多了，没有拿得出手的作品宁愿把大赏的位置空着也不滥竽充数) </span></span>评选活动“这本轻小说真厉害！”中，一举夺得2005年度人气作品的第一名，且同系列作品在接下来的2006至2008年度评选中上榜，创下了2005年以来连续四年上榜前十的纪录。小说以普通人类(？)<a href="https://zh.moegirl.org.cn/%E9%98%BF%E8%99%9A">阿虚</a>的口吻，讲述了以伟大领袖<a href="https://zh.moegirl.org.cn/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5">凉宫春日</a>为中心的<a href="https://zh.moegirl.org.cn/SOS%E5%9B%A2">SOS团</a>及成员的<a href="https://baike.baidu.com/item/SF/8243042">SF</a>向冒险故事。</p><ul><li><p>单行本发行信息</p><table><thead><tr><th>卷数</th><th>中文标题</th><th>日文标题</th><th>发售日</th></tr></thead><tbody><tr><td>1</td><td>凉宫春日的忧郁</td><td>涼宮ハルヒの忧郁</td><td>2003年06月10日</td></tr><tr><td>2</td><td>凉宫春日的叹息</td><td>涼宮ハルヒの溜息</td><td>2003年10月01日</td></tr><tr><td>3</td><td>凉宫春日的烦闷</td><td>涼宮ハルヒの退屈</td><td>2004年01月01日</td></tr><tr><td>4</td><td>凉宫春日的消失</td><td>涼宮ハルヒの消失</td><td>2004年08月01日</td></tr><tr><td>5</td><td>凉宫春日的暴走</td><td>涼宮ハルヒの暴走</td><td>2004年10月01日</td></tr><tr><td>6</td><td>凉宫春日的动摇</td><td>涼宮ハルヒの动摇</td><td>2005年04月01日</td></tr><tr><td>7</td><td>凉宫春日的阴谋</td><td>涼宮ハルヒの阴谋</td><td>2005年09月01日</td></tr><tr><td>8</td><td>凉宫春日的愤慨</td><td>涼宮ハルヒの愤慨</td><td>2006年05月01日</td></tr><tr><td>9</td><td>凉宫春日的分裂</td><td>涼宮ハルヒの分裂</td><td>2007年04月01日</td></tr><tr><td>10</td><td>凉宫春日的惊愕(前)</td><td>涼宮ハルヒの惊愕(前)</td><td>2011年5月25日</td></tr><tr><td>11</td><td>凉宫春日的惊愕(后)</td><td>涼宮ハルヒの惊愕(後)</td><td>2011年5月25日</td></tr><tr><td>12</td><td>凉宫春日的直观</td><td>涼宮ハルヒの直観</td><td>2020年11月25日</td></tr></tbody></table><blockquote><p>所以《分裂》到《惊愕(前/后)》隔了4年，再到最新的《直观》更是隔了9年半，谷川流这个坑王沉迷打麻将无法自拔，这些年每次到这货的贴吧和论坛都能看到有人问“谷川流死了没？”，简直了<span class="github-emoji"><span>😒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>  <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #fff;color: #FF7242">谷川流=安倍晋三说  </button><span class="hide-content">03年《凉宫春日系列》开始连载，07年安倍辞职，凉宫春日最新话发布，直到2011年停止。在2012年安倍在任期间凉宫春日系列一直没有新作发布。 而安倍2020辞职以后，停梗多年的《凉宫春日》最新话将于11月发布，所以大家大胆猜测作者谷川流就特么是安倍！ <img src="abe.webp"></span></span></blockquote></li></ul><h2 id="京都动画改编的tv动画系列"><a href="#京都动画改编的tv动画系列" class="headerlink" title="京都动画改编的tv动画系列"></a>京都动画改编的tv动画系列</h2><p><a href="https://baike.baidu.com/item/%E4%BA%AC%E9%83%BD%E5%8A%A8%E7%94%BB/7920941">京都动画</a>根据轻小说《凉宫系列》改编的电视动画，主要分<a href="https://baike.baidu.com/item/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5%E7%9A%84%E5%BF%A7%E9%83%81/1285635">2006版</a>、<a href="https://baike.baidu.com/item/%E5%87%89%E5%AE%AB%E6%98%A5%E6%97%A5%E7%9A%84%E5%BF%A7%E9%83%81/1285675">2009版</a>和剧场版《凉宫春日的消失》，其中：</p><h3 id="1-06版"><a href="#1-06版" class="headerlink" title="1. 06版"></a>1. 06版</h3><p>多数人第一次接触该系列的方式。当年的京都动画还没有今天的地位，轻小说改编动画也不像现在一样是业界的主流。京都动画的制作人员接到了改编凉宫的任务后，经过一系列的”骚操作”，将原本只在小说界知名的凉宫系列打造成了彻底出圈的现象级作品，并对之后的业界产生了巨大影响，包括不限于动画内容乱序播放(一招险棋，目的是为了调整小说原文不适合荧幕播放的节奏问题)、大胆启用新人声优(京都后来的常规操作，捧红了无数新人声优)、举办声优见面会和演唱会、大型音乐会，以及风靡全球影响至今的”SOS团舞”:</p><p style="display: grid; place-items: center">    <iframe class="bili" width="70%" src="//player.bilibili.com/player.html?aid=83875945&amp;bvid=BV16J411E7R9&amp;cid=143483659&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></p><blockquote><p>团舞中的片段甚至出现在了<a href="https://www.zhihu.com/question/26609944/answer/112072650">2010年上海世博会</a>日本馆的<a href="https://v.youku.com/v_show/id_XMzcwNzUyNDQw.html">宣传视频</a>中，在长达3小时的排队队伍中看到荧幕上的一瞬十年后仍记忆犹新<span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><h3 id="2-09版"><a href="#2-09版" class="headerlink" title="2. 09版"></a>2. 09版</h3><p>名义上的动画第二季，实际上前14回是06版的顺序播放(喂！)，后14回中又有8回臭名昭著的“<a href="https://zh.moegirl.org.cn/%E6%BC%AB%E6%97%A0%E6%AD%A2%E5%A2%83%E7%9A%84%E5%85%AB%E6%9C%88">漫无止境的八月</a>”事件，总体来说毁誉参半，不及06版造成的正面影响。不过，如果看完本文对该系列萌生了些许兴趣，又没有阅读小说的精力的话，2009的tv版仍然是第一顺位的推荐作。</p><h3 id="3-剧场版《凉宫春日的消失》"><a href="#3-剧场版《凉宫春日的消失》" class="headerlink" title="3. 剧场版《凉宫春日的消失》"></a>3. 剧场版《凉宫春日的消失》</h3><p><img src="/2020/11/30/ko-no-light-novel-ga-su-goi-suzumiya-series/shoushitsu.webp" alt="shoushitsu"><br>作为公认目前《凉宫系列》中最为精彩的第四卷，京都动画选择了将其作为一部完整独立的剧场版动画进行制作，总时长达两个半小时，于2010年底上映。京都在这部片子上投入了巨大的精力，制作的精良程度令人啧舌，精彩的剧本配合优秀的演出使其统治了一整年日本深夜动画剧场版票房冠军。</p><h1 id="『凉宫春日系列』为何有趣"><a href="#『凉宫春日系列』为何有趣" class="headerlink" title="『凉宫春日系列』为何有趣"></a>『凉宫春日系列』为何有趣</h1><h2 id="1-世界观-架构"><a href="#1-世界观-架构" class="headerlink" title="1. 世界观/架构"></a>1. 世界观/架构</h2><p>如果是熟悉文学，尤其是流行文化和网络文学的读者，应该多少了解过或者隐约发现了，在大的分类(如常见的历史类、穿越类、修仙类、官场类、武侠类等)下，常见小说基本可以分为几种固定的模式。以网文中最为常见的玄幻冒险小说为例，常见的套路就有<a href="https://baike.baidu.com/item/%E6%97%A0%E9%99%90%E6%B5%81/5383795">无限流</a>、<a href="https://baike.baidu.com/item/%E6%9C%AB%E6%97%A5%E6%B5%81/994668">末日流</a>、<a href="https://zhuanlan.zhihu.com/p/35855063">网游流</a>、<a href="https://www.zhihu.com/question/268766053">系统流、重生流和穿越流</a>等等有限的几种模式(pattern)——因为构思故事的世界观和架构是一件相当困难的事情，多数人会选择一个成熟且受众面广、已经被市场和读者群体所广泛接受的模式进行创作，尤其是对于业已成名的作家和靠写作维持生计的写手们来说，这样的选择是一种相对稳妥的做法，结果而言，往好了说是领域逐渐成熟，实际上更多的往往是同质化越来越严重，难得一种新的流派诞生让人眼前一亮，很快就会涌现大批模仿者，蝗虫过境般把这种模式玩儿得稀烂，留下满目的审美疲劳<img src="http://twemoji.maxcdn.com/36x36/1f612.png" title="twemoji-1f612" alt="twemoji-1f612" class="emoji twemoji" /></p><p>《凉宫》的世界观却相当独特，不严谨地说，在某种程度上甚至是前无古人后无来者。</p><p>如果从内容分类，《凉宫》身上可以挂上非常多的标签：校园、科幻、冒险、日常、搞笑、吐槽……但最为核心和最创新的，莫过于其在软(伪)科幻的皮下构建的多元结构世界。比如多数小说都会确定一个世界的根基，比如架空类小说中的xx大陆，比如修真小说的某阶/某重/某期，比如魔幻小说中的xx界……《凉宫》中却没有这样一个固定的定义，故事中明面上就存在了“宇宙人”，“未来人”和“超能力者”三种视角，分别对凉宫春日其人，对其自身的合理性，对其他势力的存在和对世界的认知有着各自不同的解释，再加上“普通人类”的主角阿虚，各自对凉宫和世界的认识简单归类就有：</p><table><thead><tr><th>视角</th><th>对世界的看法</th><th>对其他非普通人类势力的认识</th><th>对凉宫春日个体的解读</th></tr></thead><tbody><tr><td>未来人</td><td>时间不是连续的流，世界是由一系列时间平面构成，可以通过在时间平面上进行三次元异动实现时间穿越</td><td>超能力或时间异动、宇宙生物体等本来就存在于世</td><td>凉宫春日并不是造物主，她并没有创造世界，但是她拥有造成时间异动的能力</td></tr><tr><td>宇宙人</td><td>世界是由“资讯”构成的，“资讯统合思念体”作为宇宙智能进化的高级形态看来，地球是一种相对低级的智能形式</td><td>一切都是资讯，超能力也是，时空也是，所以多数超自然现象来自于凉宫春日的“资讯操作”能力</td><td>凉宫春日拥有“产生信息”和凭潜意识“修改资讯”的能力，其能力或许隐藏着智能自律进化的关键</td></tr><tr><td>超能力者</td><td>世界“或许”是由神明创造的，世界“可能”诞生于三年前甚至于前一秒，神明拥有随时毁灭世界或者重建世界的能力</td><td>凉宫春日内心希望存在超自然现象，所以世界才有了包括未来人、宇宙人、超能力者在内的各种超自然现象</td><td>凉宫春日是神<span class="github-emoji"><span>🙇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f647.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td>普通人</td><td>信还是不信？信谁？？？</td><td>无可替代的，可以相互依赖的伙伴</td><td>春日就是春日，是个活力过剩的麻烦鬼，即使有着非同小可的“能力”，本质也是个普通的女孩子</td></tr></tbody></table><p>所以在这本书中可以看到时间悖论、唯心主义、信息通讯等很多不同科幻题材小分类中会出现的元素汇聚一堂，精彩有趣的同时也导致了想要概括地描述《凉宫》到底讲了啥/凉宫春日本人到底是什么变成了一件<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #fff;color: #FF7242">不可能的事  </button><span class="hide-content">不可能的事（以后再也不写这么复杂作品的安利文了艹<span class="github-emoji"><span>😤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f624.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</span></span>。</p><p>如果说以上的世界观保证了故事的多样性，那么下面的“神设定”则为故事注入了冲突和戏剧性的灵魂：</p><p><strong>『只有凉宫春日本人不知道自己所拥有的能力』</strong></p><p>这是本书区别于其他“妖艳贱货”的最大不同，也是个人看来所有设定中最为精妙的一点：如果放在其他幻想故事中，如果主人公拥有非凡的能力，要么就是各种扮猪吃老虎的爽文戏码，要么就是无法直面内心和人性的无病呻吟居多；而这里设定了，唯独凉宫春日本人不知道自己的能力，而且各方势力也一致认为如果凉宫春日认识到自己的力量会给世界带来恶劣后果，所以许多剧情情节就得以自然而然地“情况紧急，我们要在不让凉宫同学怀疑的情况下让她开心！”展开，从而带来了一个个生动有趣的故事，却无娇柔做作之感。</p><script>    window.setVideoOpts = function(videoEle, startTime) {      videoEle.addEventListener("loadedmetadata", function () {        this.currentTime = startTime;        this.pause();      });      var node = videoEle.parentElement;      var maxLoop = 10;      while (maxLoop > 0 && node.tagName !== 'P') {        node = node.parentNode;        maxLoop--;      }      node.style.display = 'grid';      node.style.placeItems = 'center';    }</script><h2 id="2-人物"><a href="#2-人物" class="headerlink" title="2. 人物"></a>2. 人物</h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/106063099">一个好故事要有一个或者一群令人印象深刻难以忘怀的人物。我们经常说文学就是人学，讲故事其实是讲人的故事。</a>接下来列举一些凉宫中的主要人物和个人很喜欢的角色，配合视频观看风味更佳 <span class="github-emoji"><span>😬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><h3 id="SOS团团员一号·打杂的·阿虚-囧·史密斯"><a href="#SOS团团员一号·打杂的·阿虚-囧·史密斯" class="headerlink" title="SOS团团员一号·打杂的·阿虚(囧·史密斯)"></a>SOS团团员一号·打杂的·阿虚(囧·史密斯)</h3><p><img src="/2020/11/30/ko-no-light-novel-ga-su-goi-suzumiya-series/kyon.webp" alt="kyon"></p><p>作为SOS团唯一的正常人类(?)，不吐槽会死星人，小说全文都是通过阿虚的视角和口吻推动着整个故事的进展。相貌普通、性格普通，一直以中规中矩既不出色也不出格的平凡学生定位的少年。担任着凉宫春日的限制装置的苦命人，在这个时空拥有最大的煽动春日的能力。平日里给人以衣着松松垮垮的无力吐槽男的形象，但从阿虚的吐槽中可以看出他是一个很博学的人。<br>作为无意间鼓动了凉宫春日创建了SOS团并引发了一系列骚乱的元凶，虽然在明面和暗面都不得不为了凉宫春日的各种奇思妙想东奔西走，嘴里吐槽、抱怨和不耐烦不断，实际上非常喜欢这样的生活，对凉宫春日抱有独特的感情，珍惜SOS团的伙伴们。</p><p><video width="90%" id="video1" alt="消失" src="https://www.debuggerx.com/raw_assets/video/消失.mp4" controls="controls"></video></p><script>    var v1 = document.querySelector('#video1');    setVideoOpts(v1, 0);</script><p>所以在《消失》事件发生时，对于凉宫春日不存在的世界，对于超自然现象不存在平凡世界，阿虚会备受打击，不顾一切地寻找春日和熟悉的伙伴，并在选项面前毫不犹豫地选择了《凉宫》的世界……</p><h3 id="SOS团团员二号·资讯统合思念体对有机生命体接触用人型界面·长门有希"><a href="#SOS团团员二号·资讯统合思念体对有机生命体接触用人型界面·长门有希" class="headerlink" title="SOS团团员二号·资讯统合思念体对有机生命体接触用人型界面·长门有希"></a>SOS团团员二号·资讯统合思念体对有机生命体接触用人型界面·长门有希</h3><p>SOS团中除春日之外的最强战力，宇宙人，自我介绍如下：</p><p><video width="90%" id="video3" alt="第三集" src="https://www.debuggerx.com/raw_assets/video/长门有希.mp4" controls="controls"></video></p><script>    var v3 = document.querySelector('#video3');    setVideoOpts(v3, 1.5);</script><p>由于没有被赋予社交功能，且无法抗拒既定的编程，外见给人以沉默寡言、面无表情的读书娘形象，在与SOS团的伙伴们相处后逐渐拥有感情，认为自身的情感是程序中的bug，《消失》事件的始作俑者。</p><p>凭借其来自于资讯统合思念体的资讯操作能力解决了许多危机，小说中甚至有通过咏唱SQL语句进行战斗的描写<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>：</p><blockquote><div style="display: table-cell;text-align: left; padding: 1em; vertical-align: middle;">SELECT <ruby><rb data-id="template-ruby"><span lang="ja">シリアルコード</span><span class="template-ruby-hidden"></span></rb><rt style="font-size:0.75em"><span lang="en">serial code</span></rt><span class="template-ruby-hidden"></span></ruby> FROM <ruby><rb data-id="template-ruby"><span lang="ja">データべース</span><span class="template-ruby-hidden"></span></rb><rt style="font-size:0.75em"><span lang="en">database</span></rt><span class="template-ruby-hidden"></span></ruby> WHERE <ruby><rb data-id="template-ruby"><span lang="ja">コードデータ</span><span class="template-ruby-hidden"></span></rb><rt style="font-size:0.75em"><span lang="en">code data</span></rt><span class="template-ruby-hidden"></span></ruby> ORDER BY <span lang="ja">攻性情報戦闘</span> HAVING <ruby><rb data-id="template-ruby"><span lang="ja">ターミネートモード</span><span class="template-ruby-hidden"></span></rb><rt style="font-size:0.75em"><span lang="en">terminate mode</span></rt><span class="template-ruby-hidden"></span></ruby></div></blockquote><p><del>——话说数据库表名取<code>database</code>的话应该需要加引号的吧，不然会因为和SQL关键字冲突和报错滴<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></del></p><h3 id="SOS团团员四号·超能力者·boss脸·古泉一树"><a href="#SOS团团员四号·超能力者·boss脸·古泉一树" class="headerlink" title="SOS团团员四号·超能力者·boss脸·古泉一树"></a>SOS团团员四号·超能力者·boss脸·古泉一树</h3><p>在故事中是类似智囊的角色，总是带有人畜无害的微笑的帅哥角色。真实身份是超能力机构“机关”的一员，在春日的精神压力造成的闭锁空间甚至信息生命体创造的异空间中才可以发挥超能力的超能力者。由于主张凉宫春日是世界的创造神，所以可以在故事中听到其很多神棍理论：</p><p><video width="90%" id="video2" alt="第五集" src="https://www.debuggerx.com/raw_assets/video/古泉一树.mp4" controls="controls"></video></p><script>    var v2 = document.querySelector('#video2');    setVideoOpts(v2, 3.5);</script><p>虽然三年来由于春日不安定的精神状态而一直疲于奔命，但却对春日没有丝毫的怨恨，反而多次向阿虚吐露“真羡慕你”“我认为凉宫同学非常有魅力”(本质可怜人，~~~少爷的身子跑堂的命~~~)</p><h3 id="SOS团团员三号·未来人·吉祥物·朝比奈实玖瑠"><a href="#SOS团团员三号·未来人·吉祥物·朝比奈实玖瑠" class="headerlink" title="SOS团团员三号·未来人·吉祥物·朝比奈实玖瑠"></a>SOS团团员三号·未来人·吉祥物·朝比奈实玖瑠</h3><p>北高二年级的学姐，因为长相可爱而被凉宫“抓”进SOS团，作为未来人推动了一些重要剧情，平时扮演被凉宫春日“宠爱”的角色，吉祥物/观众福利担当。</p><p>最早在看 TV 系列时对这个角色并不是很有好感，因为相比于其他角色的“个性”，这样软萌的花瓶角色实在不是很对味。但是后面读了原作，再不时重看 TV 系列，越来越觉得故事中包括学姐在内每一个角色都有其重要的意义，除去一些略显低俗和充满男性作家大叔式恶趣味的桥段，学姐实际是多次凉宫精神失控的导火索，而且在尤其是在《消失》这样涉及时间操作的故事中或多或少发挥了作用。</p><p>从下面的片段也可以看出，学姐也有自己的想法和作为“未来人”一方的立场，同时又有身份之外对于同伴的矛盾心理：</p><p><video width="90%" id="video6" alt="第二十四集" src="https://www.debuggerx.com/raw_assets/video/朝比奈实玖瑠.mp4" controls="controls"></video></p><script>    var v6 = document.querySelector('#video6');    setVideoOpts(v6, 0);</script><blockquote><p>另外，学姐的专属 BGM 实在好听而诙谐，虽然这 BGM 响起时学姐本人肯定是笑不出来就是了 <span class="github-emoji"><span>😝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>悲劇のヒロイン（悲剧的女主角）<br> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=32451615&amp;auto=0&amp;height=66"></iframe></p></blockquote><h3 id="SOS团团长·凉宫春日"><a href="#SOS团团长·凉宫春日" class="headerlink" title="SOS团团长·凉宫春日"></a>SOS团团长·凉宫春日</h3><p>春日的好胜心极强，有着唯我独尊、旁若无人的性格。非常自以为是，超级任性，认为这个世界是以她为中心转动，脑子里永远不知道在想什么，并且情绪变化极端，是学校出名的「怪人」。。对于一切不喜欢的话都听不进去 ，一想到什么事情就马上付诸实施。非常怕无聊，总是为了寻找有趣的事情而积极行动，堪称全日本最不能握有核弹发射钮的人。而对她旁若无人的行径，大家通常都选择置若罔闻，觉得对她置之不理是最好的方法。</p><p>在高中开学的自我介绍上劲爆发言：「<strong>我对普通的人类没有兴趣。你们之中要是有外星人、未来人、异世界来的人、超能力者，就尽管来找我吧！以上！</strong>」，之后尝试了校内所有的社团，但没有一个可以让她感觉到有趣，所以一直烦闷无聊，整天顶着张「忧郁」的臭脸……直到某天——</p><p><video width="90%" id="video5" alt="第一集" src="https://www.debuggerx.com/raw_assets/video/凉宫春日1.mp4" controls="controls"></video></p><script>    var v5 = document.querySelector('#video5');    setVideoOpts(v5, 0);</script><p>在此之后，春日以惊人的行动力和百无禁忌的冲劲儿，迅速以其自身为中心凝聚了故事的各个角色，引发了各种在普通人眼中难以理喻的事件，甚至包括“拍电影”剧情中，过分到老好人的男主阿虚都控制不住想要动手“<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #fff;color: #FF7242">家暴  </button><span class="hide-content">家暴——阿虚：不管是动物还是人 不听劝的家伙就应该揍一顿教育一下 不然这家伙就会变成一生都被人躲着的白痴！ </span></span>”的任性行为（第 <a href="http://www.le.com/ptv/vplay/1171520.html">23话</a> 约  12:30 附近）……这样的春日在一些人眼中可能就是个神经病吧，但是，如果了解到她内心的想法，和自我认知的心路历程，或许就能在一定程度上理解了吧：</p><p><video width="90%" id="video4" alt="第五集" src="https://www.debuggerx.com/raw_assets/video/凉宫春日2.mp4" controls="controls"></video></p><script>    var v4 = document.querySelector('#video4');    setVideoOpts(v4, 0);</script><p><del>初次看完这里，我也不由忧郁了起来 <span class="github-emoji"><span>😒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。</del></p><h3 id="野生雄性三色猫·-真·人不如猫-·三味线"><a href="#野生雄性三色猫·-真·人不如猫-·三味线" class="headerlink" title="野生雄性三色猫·(真·人不如猫)·三味线"></a>野生雄性三色猫·(真·人不如猫)·三味线</h3><p>“拍电影”剧情中春日捡来的野猫，取名叫“<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #fff;color: #FF7242">三味线  </button><span class="hide-content">三味线——这取名不知是春日还是谷川流的恶趣味，因为三味线这种日本传统乐器常用猫的皮制作，为一只猫咪取名三味线不瘆得慌嘛 <span class="github-emoji"><span>😑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </span></span>”，又因为春日想让猫说话，于是三味线有了思考和语言的能力，而且，说话内容经常涉及晦涩难懂的哲学话题，声线是深沉的中年男性：</p><p><video width="90%" id="video7" alt="第一集" src="https://www.debuggerx.com/raw_assets/video/三味线.mp4" controls="controls"></video></p><script>    var v7 = document.querySelector('#video7');    setVideoOpts(v7, 0);</script><blockquote><p>这种操着大叔口音说着哲学话题的猫咪设定莫名猛戳老夫萌点 <span class="github-emoji"><span>😜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，而且居然还有人为三味线专门剪辑了 <a href="https://www.bilibili.com/video/BV1es411x7xT">CUT</a>～话说，片段里三味线的理论听着好像是<a href="https://baike.baidu.com/item/%E6%97%A0%E9%99%90%E7%8C%B4%E5%AD%90%E5%AE%9A%E7%90%86/2221476">无限猴子定理</a>和<a href="https://baike.baidu.com/item/%E4%B8%AD%E6%96%87%E6%88%BF%E9%97%B4">中文房间</a>这两个思想实验的结合体吧？</p></blockquote><h2 id="3-作者本人"><a href="#3-作者本人" class="headerlink" title="3. 作者本人"></a>3. 作者本人</h2><p>谈及为什么能够写出《凉宫》时，谷川流特意提到自己经历过阪神大地震的事，他说：<br><strong>「在感到痛感时，人对其他人的痛是很迟钝的。我不想在小说中写悲伤的事，因为这太现实了。我更习惯幽默，但这很困难，让读者开心的话我就会很开心」</strong></p><p>在我看来，一部作品的质量取决于作者的深度，而人的深度与其经历强关联。高中时代也曾尝试过写作，在构思了足有半年之久，设计好了故事大纲、特色和结局之后，信心满满地开始所谓“创作”，结果不过码了数万字就发现写作远比想象中吃力，与往常篇幅不过千余字的作文相比，描绘一个长篇小说的世界非常困难。一番反省和思考之后，我无奈地得出结论，是自己的浅薄阅历还远不足以支撑起构建一个虚构世界的能力，充其量只能提供自娱自乐的脑内幻想。从《凉宫》中可以看出，谷川流写作的故事首先是“为了让他自己开心”，读者也能开心正是因为其经历以及他对现实和幻想的理解，这与追逐流行元素和讨好读者的写作模式不同，能够最大限度得展现作者的创作魅力。</p><p>除了真实经历，阅读量也是一个人宝贵的内功。谷川流看似平平无奇，实则阅读量巨大，这使得他在作品中表现出的文学性和思想性远超其他的轻小说作品。在《sneakers》2004年4月号上刊载了一份名为<a href="https://www.zhihu.com/question/33511252">《长门有希推荐的100本书》</a>的书单，据编辑所说，其实是谷川流推荐给读者的，管中窥豹可见谷川流本人对各种书籍的广泛涉猎。书单中包含了大量涉足推理和科幻的作品，以及少部分哲学以及情感类的书籍，于是，三分推理三分科幻，加之两分哲学和两分情感，就构成了十分的《凉宫春日系列》。</p><p>另外，还是高中时那次失败的创作经历使我认识到，长篇故事的创作中“人称”的选择其实非常重要。那时我就发现，在自己有限的阅读量中，留下深刻印象的作品中以第一人称视角描写的小说居多，比如《海底两万里》、《鲁宾逊漂流记》、《福尔摩斯系列》等，哪怕是教科书中收录的文章也是如此，比如鲁迅的《孔乙己》、《少年闰土》、《祝福》（祥林嫂），都是以“我”的第一人称视角进行的叙述（<a href="https://baijiahao.baidu.com/s?id=1628679955784458947">品读鲁迅小说：独特的叙事视角用于小说写作的另一种意义</a>）。于是一开始我也是以第一人称开始写作，大概在2w字左右的时候就感到非常吃力，视角局限在第一人称的情况下需要利用各种技巧才能够表达出第三人称视角下几行稀松平常的平埔直叙，于是不得不回过头来把写好的内容全部改成第三人称才又继续勉强写了一些（这篇文章感觉总结得很好：<a href="https://www.jianshu.com/p/a1c3a4b76724">011 | 为什么你很少看到优秀的第一人称小说？</a>）。而《凉宫》就是这样一本少见的优秀的第一人称长篇小说，全书没有哪怕一次使用视角的转换，也没有进行过上帝视角的描述，这一点上我尤其佩服作者的写作和叙述能力。</p><h2 id="4-音乐"><a href="#4-音乐" class="headerlink" title="4. 音乐"></a>4. 音乐</h2><p>除去优秀的故事，TV 系列精良的制作和话题性的尝试，凉宫能够成功成为经典与其出色的音乐也是分不开的，其中一些 BGM 时至今日也是经常出现在各种网络创作视频乃至一些综艺节目中，B站第一话中无数的弹幕表示「BGM 超神」、「BGM 居然是出自这里啊」、「到底有多少 BGM 出自这里啊」</p><p>对此我只能说——</p><p><strong>神前晓YYDS</strong> <img src="http://twemoji.maxcdn.com/36x36/1f647.png" title="twemoji-1f647" alt="twemoji-1f647" class="emoji twemoji" /></p><h3 id="いつもの風景（平日的风景）"><a href="#いつもの風景（平日的风景）" class="headerlink" title="いつもの風景（平日的风景）"></a>いつもの風景（平日的风景）</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=29849547&amp;auto=0&amp;height=66"></iframe><h3 id="何かがおかしい（有、奇怪的东西）"><a href="#何かがおかしい（有、奇怪的东西）" class="headerlink" title="何かがおかしい（有、奇怪的东西）"></a>何かがおかしい（有、奇怪的东西）</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=29849548&amp;auto=0&amp;height=66"></iframe><h3 id="おいおい（喂！喂！）"><a href="#おいおい（喂！喂！）" class="headerlink" title="おいおい（喂！喂！）"></a>おいおい（喂！喂！）</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=29849549&amp;auto=0&amp;height=66"></iframe><h3 id="好調好調（顺利～顺利～）"><a href="#好調好調（顺利～顺利～）" class="headerlink" title="好調好調（顺利～顺利～）"></a>好調好調（顺利～顺利～）</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=32451609&amp;auto=0&amp;height=66"></iframe><h3 id="ある雨の日（某个下雨的日子）"><a href="#ある雨の日（某个下雨的日子）" class="headerlink" title="ある雨の日（某个下雨的日子）"></a>ある雨の日（某个下雨的日子）</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=29836456&amp;auto=0&amp;height=66"></iframe><h3 id="ミステリータイム（Mystery-Time-神秘的时间）"><a href="#ミステリータイム（Mystery-Time-神秘的时间）" class="headerlink" title="ミステリータイム（Mystery Time - 神秘的时间）"></a>ミステリータイム（Mystery Time - 神秘的时间）</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=29836474&amp;auto=0&amp;height=66"></iframe><p>除了这些优秀的 BGM ，还有多首歌曲流传至今，比如这首“KTV里最爱点的动漫歌曲”排名第三，YouTube播放破亿次，由凉宫春日的声优平野绫演唱的《God knows..》</p><p style="display: grid; place-items: center"><iframe class="bili" src="//player.bilibili.com/player.html?aid=3108239&amp;bvid=BV1is41127yv&amp;cid=4886757&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="80%"> </iframe></p><p>还有长门有希的声优茅原实里演唱的角色曲《雪、無音、窓辺にて》</p><p style="display: grid; place-items: center"><iframe class="bili" src="//player.bilibili.com/player.html?aid=1851651&amp;bvid=BV1rx411w7db&amp;cid=2850888&amp;page=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="80%"> </iframe></p><blockquote><p><span>緩やかに降る</span> <span style="float: right;">缓缓飘落的</span><br><span>水じゃなくて</span> <span style="float: right;">不是水滴</span><br><span>もっと 寂しい粒</span> <span style="float: right;">而是更加寂寞的颗粒</span><br>（第一回听就被这段歌词惊艳到……）</p></blockquote><script>    var bilis = document.querySelectorAll('.bili');    bilis.forEach(function(bili) {        bili.height = (bili.clientWidth * 3 / 4) + 'px';    });</script><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>作为一部十多年前的作品，《凉宫》也还是有很多局限性和缺点的。尤其是坑王作者沉迷麻将无心写书，拖到现在硬是把《凉宫》拖成了“<a href="https://baike.baidu.com/item/%E6%97%B6%E4%BB%A3%E7%9A%84%E7%9C%BC%E6%B3%AA/18584052">时代的眼泪</a>”。</p><p>《凉宫》对我的影响却是确实的，仔细想来，主要有：<br>    1. 与其甘于平庸，不如折腾至死<br>    2. 没有绝对的真实，扩宽视野才能看到更完整的世界<br>    3. 人生可能因为一个偶然或一个人而完全不同，保持对未来的期待<br>    ……</p><blockquote><p>《直观》还留着没看，舍不得，打算留着万一哪天受到啥突如其来的打击什么的不想活了的时候再看，当速效救心丸使 <img src="http://twemoji.maxcdn.com/36x36/1f639.png" title="twemoji-1f639" alt="twemoji-1f639" class="emoji twemoji" /></p></blockquote><p>最后，摘抄几段谷川流自己在书中后记里所写的文字作为结尾吧～</p><blockquote><p>  有时不禁会想一个人一生所能写出来的文章量，是不是是打从呱呱坠地的那一刻就注定了。如果每个人一生只有一定的文字量可写，那么越写数量就会越少。只要一想到这个，我就会无法专心写作，而分心去计算字数。举例来说，或许我准备一天写三百张四百字的稿纸，却怎样也无法达成，就是最佳的答案。就算一天预计写十二万字的文章，平均每秒打一个字，合计也要三十三个小时才能完成，这我当然无法做到。或许有人能办到吧！但因为没有证据，所以我也不清楚。<br>   因为刚才的话题接不下去，就聊聊别的吧！说真的，猫真是一种不错的动物，因为它们不但可爱、慵懒，还会喵喵叫。虽然有时也会搞不懂它们到底想干嘛而大伤脑筋，我也不想替它们的行为说好话，只要大家能觉得猫是可爱的，我就很开心了。<br>   我小学六年级有位同班同学，那个人被誉为天才绝对不过分。他是班上的领导人物，头脑聪颖，家世又好，更擅长制造开朗气氛，给大家带来欢乐。头上顶着令人目眩的教主光环，这样的一位风云人物会与我交好，是因为当时他和我有相同的兴趣。我们都喜欢钓鱼和外国悬疑小说，至于是志趣相投还是臭味相投就不得而知了。 班上分组时，我也总是和他一组。组长当然是他。有一次，校方举行活动，要各班推派代表出来表演给全学年的师生观赏。我们这一组迟迟无法决定要表演什么，伤透脑筋时，他提议：「我们来演话剧吧。」然后就开始写剧本。我永远不会忘记，我读那个剧本读到笑出眼泪，还在地上打滚。想不到世界上有这么搞笑的东西！<br>  我们的演出，忠实地呈现了他的搞笑剧本。看了我们演出的话剧，全六年级的学生都笑了，老师们也笑了。我们这一组得到了金奖，还获颁木头雕刻的盾。当时我演的是什么样的角色，至今我都仍然记忆犹新。 之后，我们还是上同一所国中。后来他考上了远方的高中，接着又进了更远的大学。 我时常在想。我是否能做到像他那样，让每个人都捧腹大笑呢？——还有，他的剧本是否也间接改变了我的人生—— 那个想法在我心底扎了根，成了永难忘怀的记忆的一部分。<br>  ……字数似乎不太够，继续发布回忆第二弹。<br>  高中时代，我当过一阵子的文艺社社员。因为我主跑另一个社团，所以一周只能去文艺社一次，基本上文艺社也只有周一才开。因为社员只有一位高我一个年级的学姐。我第一次敲门时，戴着眼镜，表情很知性的她，是唯一的社员同时也是社长兼社团前辈。<br>  那位前辈当时和我说了些什么，我完全都不记得。搞不好当时她一句话也没有说。<br>  入社不久，我们就开始制作文艺社的期刊。我实在是不愿回想自己究竟写了些什么。总之不是小说。封面是我画的。这东西我也不太愿意去回想，只靠我们两个人根本吃不下整本期刊的页数，所以前辈就跟她的几位朋友邀稿。虽然都是我不认识的人，但其中一人的名字让我印象很深刻，至今都还记得。<br>  前辈将升高三之际，决定退出社团，专心念书去。同时期进来了五位新社员。为何会进来那么多人，我也不清楚。在另一个社团玩得不亦乐乎的我，没多久就没去文艺社了。 再见到前辈，是在她毕业那一天。我对当时的对话也没有印象。她大概说了不着边际的交际话后就淡淡离去，而我也只有目送她的背影而已吧。<br>  那位前辈叫什么名字，我想不起来。那位前辈一定也记不起我的名字。<br>  可是，我想她会记得当时社团里有我这么一个人。<br>  我也记得社团里有她这么一个人。</p></blockquote><script>    function isWeiXin(){        var ua = window.navigator.userAgent.toLowerCase();        if(ua.match(/MicroMessenger/i) == 'micromessenger'){            return true;        }else{            return false;        }    }    if (isWeiXin()) {        alert("检测到您在使用微信浏览器，如果出现音频/视频无法正常加载播放问题，请尝试点击右上角用系统浏览器浏览本页");    }</script>]]></content>
      
      
      <categories>
          
          <category> 技术之外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安利向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建议Linux用户尝试下kvm虚拟机</title>
      <link href="/2020/11/29/suggest-Linux-users-to-try-kvm-virtual-machine/"/>
      <url>/2020/11/29/suggest-Linux-users-to-try-kvm-virtual-machine/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作为 Linux 用户，不管是 IT 开发，还是普通的爱好者，出于种种原因总是离不开虚拟机软件。由于<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #fff;color: #FF7242">某些原因  </button><span class="hide-content">某些原因 (其实就是高中那会痴迷仙剑，先是因为想在网吧电脑上玩仙剑三外传，但是当时仙三外安装过程中必须重启电脑，网吧电脑重启就自动还原了，于是只能研究哪个虚拟机可以比较好的支持3D游戏；后来又逐渐接触到了编程，想要通过给我当时使用的电子词典编译一个 DoxBox 玩原版的仙剑1……这样回头看来，今天会走上 IT 这条路就是因为仙剑也说不定哎<span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)</span></span>我很早就接触过各种虚拟机软件，到目前为止或多或少几乎使用过所有常见的虚拟机软件或平台，包括大家最熟悉的 <a href="https://www.vmware.com/">VMWare</a>、<a href="https://www.virtualbox.org/">VBox</a>，windows 上曾经的 <a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=3702">Virtual PC</a> 和如今系统自带的 <a href="https://docs.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v">Hyper-V</a>，MacOS 上的 <a href="https://www.parallels.cn/">Parallels Desktop</a>，以及虚拟化平台 <a href="https://www.vmware.com/cn/products/vsphere-hypervisor.html">ESXi</a> 和 <a href="https://www.proxmox.com/">Proxmox VE</a> 等……这些软件在各自平台和特定使用场景下各有其优势，但是现在，我个人使用的 Linux 上唯一在用的虚拟机软件，就是今天的主角—— <a href="http://www.linux-kvm.org/page/Main_Page">KVM</a></p></blockquote><h1 id="KVM的优点"><a href="#KVM的优点" class="headerlink" title="KVM的优点"></a>KVM的优点</h1><ol><li>安装方便。<br> 从 KVM 的全称：Kernel-based Virtual Machine 就可以看出，KVM 实际是 linux 内核提供的虚拟化架构，可将内核直接充当 hypervisor 来使用，只要不是过于老旧的电脑，现在主流的 Linux 发行版都是可以几乎0配置地使用 KVM。相比之下，VMWare 和 VBox 并不是每一个发行版的软件仓库中都会包含的，这时候需要去对应官网下载安装包手动安装；即使是仓库中有可以直接通过包管理安装，它们想要正常使用还需要编译内核模块，每次系统内核升级后还需要重新编译，某些情况下还有可能编译失败无法使用，而 KVM 的安装只需要一步： <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debian系</span></span><br><span class="line">sudo apt install qemu-kvm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redhat系</span></span><br><span class="line">sudo yum install qemu-kvm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选，仅当不加 <span class="built_in">sudo</span> 执行 kvm 命令提示权限错误时使用</span></span><br><span class="line">sudo adduser $USER kvm</span><br></pre></td></tr></tbody></table></figure><blockquote><p>更新：在现在最新的 Debian 仓库中，qemu-kvm只是个虚包：<br>   <img src="/2020/11/29/suggest-Linux-users-to-try-kvm-virtual-machine/qemu_kvm.webp" alt="qemu_kvm.webp"><br> 所以直接装 qemu-system-x86 就好</p></blockquote></li><li>本身资源占用极低<br> 不管是哪种虚拟化方案，虚拟机软件本身也是要消耗一部分系统资源的。参看 <a href="https://zhuanlan.zhihu.com/p/48664113">QEMU和KVM的关系</a>，KVM 使用 qemu 作为操作管理前端，占用的资源极低，不运行虚拟系统时 qemu 只占用20多mb的内存，尤其在配置比较低的电脑上可以省出更多的资源让宿主机或者虚拟机使用。<blockquote><p>KVM 也有一些图形化管理工具，比如经典的 <a href="https://virt-manager.org/">virt-manager</a>，还有新一点的 <a href="https://wiki.gnome.org/Apps/Boxes">GNOME Boxes</a>，但我觉得其实并不是很有必要，因为常规使用 KVM 的命令行操作足够简单，就我而言图形化操作并没有更方便，反而浪费了资源。</p></blockquote></li><li>方便且强大的命令行操作<br> 这其实是 qemu 的优点，强大的命令行选项可以非常灵活地使用 KVM 虚拟机，而且可以方便地写成脚本，从而得到比图形化虚拟机高得多的效率。虽然 Vmware 和 VBox 也是可以通过命令行进行控制的，例如 Vmware 可以用 <code>vmware -X "[path_to_virtual_pc]/[virtual_pc].vmx"</code> 的方式启动一个创建好的虚拟机，VBox 更是可以通过 <code>VBoxManage</code> 命令实现更多的操作，但都还远远比不上 qemu。</li></ol><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>常用的命令其实只有两个：</p><ol><li><p>虚拟机磁盘镜像操作命令 <code>qemu-img</code><br> 使用虚拟机软件创建虚拟机安装操作系统，最重要的步骤就是对虚拟磁盘的操作，其他像 cpu 、内存、网络等设置都可以随时调整修改，而虚拟磁盘一旦创建，系统和几乎所有数据都存储在其中，虚拟机的迁移主要也就是磁盘镜像的迁移。通过 <a href="https://www.qemu.org/docs/master/tools/qemu-img.html">qemu-img</a> 可以实现创建、检查、转换、调整虚拟磁盘镜像文件，多数情况下只需要用到其创建( create )的功能，典型用法如下：</p> <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f raw disk 8G</span><br></pre></td></tr></tbody></table></figure><p> 上面命令将在当前目录下创建一个容量上限为8G名为 <code>disk</code> 的虚拟磁盘镜像文件。<code>-f</code> 参数的含义是 <code>format</code>，用于指定虚拟磁盘镜像的格式，常用的格式一般是 <code>qcow2</code> 和 <code>raw</code>，两者的区别主要在于空间占用和使用时的 io 效率(<a href="https://blog.csdn.net/weixin_37136725/article/details/78109708">RAW 与 QCOW2 的区别</a>)；记得命令的顺序是先指定创建镜像的名称(<code>disk</code>)，然后再指定其最大容量(<code>8G</code>)<br> <img src="/2020/11/29/suggest-Linux-users-to-try-kvm-virtual-machine/create_img.webp" alt="create image"></p></li><li><p>启动KVM<br> 下面仅列出使用 <code>kvm</code> 命令启动虚拟机时常用的参数：</p> <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kvm</span><br><span class="line"> -m 2G # 必选，含义：memory，用于指定虚拟机的占用的最大内存</span><br><span class="line"> -cpu host# 可选，指定虚拟机模拟的 cpu 型号，可选型号列表可以用'kvm -cpu help'命令查看；我习惯用host，代表使用物理机的cpu型号</span><br><span class="line"> -smp 3# 可选，设置虚拟cpu的核心数</span><br><span class="line"> -hda disk# 必选，用于指定虚拟机使用的虚拟磁盘镜像文件；当有多个磁盘需要使用时可继续指定 -hdb disk2 ……</span><br><span class="line"> -cdrom ～/Download/debian.iso# 指定虚拟机cd光驱使用的镜像，一般只在安装虚拟机系统时需要</span><br><span class="line"> -nic user,hostfwd=tcp::8022-:22# 可选，用于实现端口映射，这里的例子是把虚拟机的22端口映射到了宿主机的8022端口，下面有详细的应用</span><br><span class="line"> -nographic# 可选，关闭虚拟机的图形输出，在已经配置好远程访问或者远程桌面而不需要虚拟机本身的图形显示时很有用</span><br><span class="line"> -vga vmware# 可选，指定虚拟机内使用的虚拟显卡型号，选择 vmware 模式可以解决某些情况下虚拟机内系统无法调整分辨率的问题</span><br></pre></td></tr></tbody></table></figure><p>可以看到，实际使用 kvm 时需要关系的命令参数并不多，下面通过几个例子做详细说明</p></li></ol><h1 id="最简单的使用场景——试用-Linux-LiveCD"><a href="#最简单的使用场景——试用-Linux-LiveCD" class="headerlink" title="最简单的使用场景——试用 Linux LiveCD"></a>最简单的使用场景——试用 Linux LiveCD</h1><blockquote><p>作为 Linux 系统爱好者，经常会下载一些有趣的 Linux 发行版来体验，多数情况下都不会直接物理安装到机器上，而是通过虚拟机进行体验。多数 Linux 发行版的安装镜像都包含了 <a href="https://wiki.ubuntu.org.cn/LiveCD">LiveCD</a> 模式，如果是使用 kvm 进行体验，命令则非常简单：</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kvm -m 2G -cdrom ~/Downloads/MX-19.3_x64.iso</span><br></pre></td></tr></tbody></table></figure><p>因为试用 LiveCD 并不需要硬盘，所以只要指定虚拟机使用的内存大小和系统镜像 iso 文件即可，效果如下：<br><img src="/2020/11/29/suggest-Linux-users-to-try-kvm-virtual-machine/live_cd.webp" alt="live_cd"></p><h1 id="创建一个可以方便进行网络通讯的-Linux-虚拟机"><a href="#创建一个可以方便进行网络通讯的-Linux-虚拟机" class="headerlink" title="创建一个可以方便进行网络通讯的 Linux 虚拟机"></a>创建一个可以方便进行网络通讯的 Linux 虚拟机</h1><blockquote><p>有时候我们需要创建 Linux 虚拟机，默认情况下虚拟机软件一般都是使用 <a href="https://baike.baidu.com/item/nat/320024?fr=aladdin">NAT</a> 模式，这样一来虚拟机和宿主机实际上并不属于同一个局域网下，所以并不能简单地通过 ip 进行访问。解决方案一般有两种，一种是将网络模式从 NAT 改为 Bridge(桥接)，另一种则是通过端口映射将虚拟机的某些端口直接映射到宿主机上。如果是使用 VMWare 或者 VBox，不管是哪种方法相对来说都还是比较麻烦的，而使用 qemu-kvm 命令的参数，则可以很方便地完成端口映射。下面以 debian10 虚拟机为例：</p></blockquote><ol><li><p>首先创建虚拟机磁盘</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f raw disk 8G# 因为不准备安装图形桌面，所以8G的磁盘空间就够用了</span><br></pre></td></tr></tbody></table></figure></li><li><p>指定磁盘镜像和安装镜像，启动虚拟机并安装系统</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kvm -m 2G -hda disk -cdrom ~/Downloads/debian-10.6.0-amd64-netinst.iso</span><br></pre></td></tr></tbody></table></figure><blockquote><p>debian 的网络安装镜像在安装过程中会提示选择安装组件，可以勾选 ssh 组建；或者可以安装好系统后通过包管理安装 <code>openssh-server</code>，这样 Linux 就可以通过 ssh 进行远程登陆了</p></blockquote><p>安装好系统后，确认 ssh 服务打开，即可关闭虚拟机</p></li><li><p>设置端口映射参数启动虚拟机</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kvm -m 2G -hda disk -nic user,hostfwd=tcp::8022-:22</span><br></pre></td></tr></tbody></table></figure><p>通过 <code>hostfwd</code> 设置端口映射规则，注意前面一个是宿主机的端口，后一个是虚拟机内的端口；<br>现在在宿主机的终端内输入命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [user]@127.0.0.1 -p 8022</span><br></pre></td></tr></tbody></table></figure><p>即可通过访问本机内部的 8022 端口，实现对虚拟机 22 端口的 ssh 登陆：<br><img src="/2020/11/29/suggest-Linux-users-to-try-kvm-virtual-machine/debian.webp" alt="debian"></p></li><li><p>根据需要可以继续追加端口映射规则<br>继续上面的例子，我在 debian 虚拟机中安装了 docker，并部署了 <a href="https://www.portainer.io/">portainer.io</a> 这个基于 web 的 docker 图形化管理工具，运行在虚拟机的 9000 端口上。现在我想将其映射到宿主机的 8088 端口上：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kvm -m 2G -hda disk -nic user,hostfwd=tcp::8022-:22,hostfwd=tcp::8088-:9000</span><br></pre></td></tr></tbody></table></figure><p>这样，只需要通过在本机的浏览器中访问 <code>http://127.0.0.1:8088</code> 即可方便地对虚拟机内的 docker 进行图形化管理：<br><img src="/2020/11/29/suggest-Linux-users-to-try-kvm-virtual-machine/docker.webp" alt="docker"></p></li></ol><h1 id="配合-Windows-远程桌面使用-Linux-缺乏的软件"><a href="#配合-Windows-远程桌面使用-Linux-缺乏的软件" class="headerlink" title="配合 Windows 远程桌面使用 Linux 缺乏的软件"></a>配合 Windows 远程桌面使用 Linux 缺乏的软件</h1><blockquote><p>桌面软件生态匮乏，尤其是很多国产必备软件的缺失，是 Linux 用户永远的痛，这可能也是绝大多数 Linux 用户离不开 Windows 和不得不使用虚拟机的最大原因。虽然现在我们有 deepin\UOS 团队在为国产软件的适配不断努力着，但是毕竟其精力有限，目前还是有很多平时工作学习必须的软件无法良好地在 Linux 环境下运行。下面这个例子就是我长期以来解决 Windows 软件在 Linux 桌面下运行使用的方案</p></blockquote><ol><li><p>安装 Windows 系统<br>创建磁盘镜像和安装过程不再赘述，和上面的命令无甚区别，无非是 Windows 虚拟机所使用的磁盘镜像需要创建地大一些。</p><blockquote><p>推荐尝试 <a href="https://baike.baidu.com/item/WES7/1217006">WES7</a>，可以理解为 WIN7 的裁剪版，下载地址可以在<a href="https://www.xgboke.com/1317.html">这里</a>找到</p></blockquote></li><li><p>Windows系统的开启远程桌面访问<br><img src="/2020/11/29/suggest-Linux-users-to-try-kvm-virtual-machine/win7.webp" alt="win7"></p><p>如上图所示，进入 <code>控制面板 &gt; 系统和安全 &gt; 系统</code> 点击 <code>远程设置</code>，在弹出的对话框中切换到 <code>远程</code> 标签，将远程桌面的选项切换为 <code>允许运行任意版本远程桌面的计算机连接</code>，应用设置，然后关闭虚拟机。</p></li><li><p>配置虚拟机远程桌面的端口映射</p><blockquote><p>Windows 的远程桌面默认运行于 3389 端口，于是可以把 kvm 的启动命令改为：</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kvm -m 2G -hda disk -nic user,hostfwd=tcp::3389-:3389 -nographic</span><br></pre></td></tr></tbody></table></figure><p>由于设置了 <code>-nographic</code> 参数，所以命令执行后不会再出现虚拟机界面。</p></li><li><p>使用 rdesktop 进行远程桌面连接</p><blockquote><p><a href="https://www.oschina.net/p/rdesktop">rdesktop</a> 是一个在 Unix/Linux 下访问 Windows 远程桌面的客户端程序。之所以推荐使用远程桌面的方式使用 windows 虚拟机，是因为可以利用远程桌面协议方便地实现诸如远程目录挂载、剪切板共享、打印机共享等功能，这些在 VMWare 和 VBox 上要么需要安装额外组件，要么需要进行复杂配置，都不是很方便；而且 rdesktop 默认不会捕捉鼠标键盘，在需要频繁在 Linux 和 Windows 虚拟机间来回操作的时候，鼠标捕捉与释放操作还是很影响效率的</p></blockquote><p>先通过包管理安装 rdesktop:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install rdesktop</span><br></pre></td></tr></tbody></table></figure><p>然后用如下的命令启动远程桌面连接：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop 127.0.0.1 -u [windows 的用户名] -p [密码] -a 32 -x l -r clipboard:PRIMARYCLIPBOARD -r disk:UOS=/home/debuggerx -g 2560x1380</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在上面的命令中，先是指定了远程桌面的桌面色彩度为最高的32位(因为端口映射带宽很高，最高色彩可以提高显示效果)；后面的 <code>-x l</code> 是告诉 rdesktop 远程机器的连接速度是 lan(局域网) 级别，这样可以提高流畅度和显示效果；<code>-r clipboard:PRIMARYCLIPBOARD</code> 的目的是开启双向剪切板共享；<code>-r disk:UOS=/home/debuggerx</code> 的效果是将 Linux 本机的 <code>/home/debuggerx</code> 目录作为网络驱动器挂载到 Windows 虚拟机，并在 Windows 中以 <code>UOS</code> 的盘符显示；最后的 <code>-g 2560x1380</code> 指定了远程桌面的显示大小，由于我的显示器分辨率为 2560x1440，底部 dock 栏高度大约为 60，所以这样设置后远程桌面的窗口正好能够填满屏幕且露出dock 栏<br>效果如下：<br><img src="/2020/11/29/suggest-Linux-users-to-try-kvm-virtual-machine/rdesktop.webp" alt="rdesktop"></p></blockquote></li></ol><h2 id="进阶玩法"><a href="#进阶玩法" class="headerlink" title="进阶玩法"></a>进阶玩法</h2><h3 id="关机脚本"><a href="#关机脚本" class="headerlink" title="关机脚本"></a>关机脚本</h3><p>远程桌面登录 Windows 以后，原本的关机按钮会变成<code>注销</code>，这是一种保护机制。为了可以方便地进行关机，可以在桌面上创建一个 <code>关机.bat</code> 的批处理，内容为：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -s -t 1</span><br></pre></td></tr></tbody></table></figure><p>这样想要关闭虚拟机时只要双击这个脚本即可</p><h3 id="脚本自动打开虚拟机并远程连接"><a href="#脚本自动打开虚拟机并远程连接" class="headerlink" title="脚本自动打开虚拟机并远程连接"></a>脚本自动打开虚拟机并远程连接</h3><p>前面说到，因为 qemu-kvm 的命令行非常强大且简单，所以很适合写成自动化脚本简化操作，比如我日常使用的脚本 (run.sh) 如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kvm -cpu host -smp 1 -m 3G -hda [bath_to_disk_file]/disk -nographic -nic user,hostfwd=tcp::3389-:3389 &amp;</span><br><span class="line">sleep 5 &amp;&amp; rdesktop -T win 127.0.0.1:3389 -u [username] -p [password] -a 32 -x l -r clipboard:PRIMARYCLIPBOARD -r disk:UOS=/home/debuggerx -D -g 2560x1380</span><br></pre></td></tr></tbody></table></figure><p>之后只要在终端执行 <code>bash run.sh</code>，就可以自动完成后台执行 KVM 打开 Windows 虚拟机，并自动登录远程桌面的操作了。</p><h3 id="remoteapp"><a href="#remoteapp" class="headerlink" title="remoteapp"></a>remoteapp</h3><blockquote><p>windows 的远程桌面有一个 <a href="https://baike.baidu.com/item/remoteapp/558443">remoteapp</a> 功能，可以只远程启动一个软件而不是将整个桌面投射，最终可以实现如下<a href="https://bbs.deepin.org/post/149128?id=149128&amp;limit=20&amp;offset=0&amp;post_user_id=16934">效果</a>：<br>1.打开虚拟机，调用打开记事本，输入正常，记事本用的是win版搜狗，linux的gedit用的linux版搜狗：<br><img src="https://storage.deepin.org/forum/201711/29/130412t7j7kfd5zcfddeyz.gif" alt="remoteapp1"><br>2.同时打开记事本和文件管理器，deepin的dock栏可以正常切换窗口：<br><img src="https://storage.deepin.org/forum/201711/29/130413tiydg0uzzaid6izi.gif" alt="remoteapp2"><br>3.正常打开ps，直接打开修改home里的图片并保存：<br><img src="https://storage.deepin.org/forum/201711/29/130413ewykwccrtarbs9ka.gif" alt="remoteapp3"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kvm </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Python实现的局域网内跨设备文件上传下载及双向剪切板操作</title>
      <link href="/2020/11/16/enhanced-script-of-http-server-by-python/"/>
      <url>/2020/11/16/enhanced-script-of-http-server-by-python/</url>
      
        <content type="html"><![CDATA[<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><blockquote><p>短距离的多设备文件、信息分享，我们都有哪些选择？</p></blockquote><ul><li><p>物理流<br>U盘、移动硬盘：电脑间数据拷贝；<br>数据线：电脑和手机间数据拷贝</p></li><li><p>通讯软件流<br>例如 QQ、微信、钉钉，还有曾经在局域网流行的飞秋、飞鸽传书等等</p></li><li><p>分享服务流<br>开启各种远程分享服务，如 smb、ftp、webdav 等</p></li><li><p>web应用流<br>如 <a href="https://www.sharedrop.io/">sharedrop.io</a></p></li><li><p>黑科技流<br>如华为Share一碰传、小米互传、苹果 Airdrop 等</p></li></ul><p>这么多的流派，各自有什么优缺点呢：</p><style>    .table-wrap table th, .table-wrap table td {        width: 15%;    }</style><table><thead><tr><th align="center"></th><th align="left">物理流</th><th align="left">通讯软件流</th><th align="left">飞秋\飞鸽</th><th align="left">分享服务流</th><th align="left">web应用流</th><th align="left">黑科技流</th></tr></thead><tbody><tr><td align="center">优点</td><td align="left">速度快，稳定性好，数据量大时优势明显</td><td align="left">装机量大，使用方便，可以远程传文件，尤其是信息发送优势巨大</td><td align="left">专为局域网共享设计，速度快，无需帐号即可使用</td><td align="left">家庭或企业环境使用优势巨大，扩展性强</td><td align="left">使用便捷，跨平台效果好</td><td align="left">Cool！！全家桶用户使用体验优异</td></tr><tr><td align="center">缺点</td><td align="left">需要额外硬件，且不同设备需求不同，U盘、移动硬盘有文件格式问题，数据线有接口类型问题等</td><td align="left">需要登陆帐号使用，不适合个人多设备或者服务器上使用</td><td align="left">装机量小，支持平台有限，不适非 IT 人员的设备使用</td><td align="left">多数需要重服务端，配置相对复杂，使用场景受限</td><td align="left">需要较好外网环境，兼容性较差</td><td align="left">品牌隔离，使用场景非常有限</td></tr></tbody></table><p>所以回到最开始的问题，“<code>短距离</code>的<code>多设备</code>的<code>文件</code>、<code>信息</code>分享”，希望有一种通用性强、支持平台尽可能多、既可以传文件，最好还能发送简单信息的工具。</p><p>于是就有了下面要介绍的，利用Python实现的局域网分享脚本</p><h1 id="脚本介绍"><a href="#脚本介绍" class="headerlink" title="脚本介绍"></a>脚本介绍</h1><blockquote><p>该脚本实际上是对 <a href="https://gist.github.com/UniIsland/3346170">SimpleHTTPServerWithUpload.py</a> 的二次修改，加入了操作剪切板的功能，由此实现简单的信息传递。从原始脚本的 star 数和 fork 数可以看出其被相当多的朋友所喜欢接受，并不断有人在其基础上进行优化改造。</p></blockquote><blockquote><p>原始脚本是对 Python2 中自带库 SimpleHTTPServer 的封装，在其基础上增加了 POST 文件上传的功能。鉴于现在绝大部分场景下都是使用 Python3 更多，所以我修改依赖改为使用 Python3 的 http.server 模块。</p></blockquote><ul><li>该脚本理论上可以直接在主流 Linux 系统上直接运行，MacOS 及 Windows 则需要安装 Python3，这对于 IT 工作者来说应该没什么门槛吧<span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </li><li>Android 手机可以通过安装 <a href="https://termux.com/">Termux</a> 并安装 Python3 来运行脚本</li><li>为了实现剪切板操作，电脑系统需要安装 <code>pyperclip</code> 库，而 Android 则需要安装 <a href="https://wiki.termux.com/wiki/Termux:API">Termux:API</a> 模块</li></ul><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><ol><li><p>在支持的平台上，进入想要分享的文件路径，执行：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 [path_to_script_file]/share_server.py [port]</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果不指定服务端口，默认监听端口为 8000</p></blockquote><p><img src="/2020/11/16/enhanced-script-of-http-server-by-python/cover.webp" alt="server"></p></li><li><p>确定本机 ip 地址</p></li><li><p>在局域网内另一台设备上，打开浏览器，输入 [ip]:[port] 即可浏览共享出的文件夹内容：</p></li></ol><p><img src="/2020/11/16/enhanced-script-of-http-server-by-python/web.webp" alt="web"></p><p>这样，几乎内网中任何一台支持浏览器的设备，都可以通过网页下载运行脚本那台机器上的文件资源、同过浏览器选择文件上传至服务器的指定目录；而如果只是想传一些简单的文本，网页端可以将内容粘贴到文本框后点击<code>send</code>，然后服务器测在任意位置通过<code>粘贴</code>快捷键得到网页发送过来的消息；如果是网页侧想获得服务器侧的文本消息，只需要服务器侧选择文本后执行<code>复制</code>逻辑，网页侧点击<code>get</code>，获取到的内容就会出现在文本框中</p><h1 id="脚本下载"><a href="#脚本下载" class="headerlink" title="脚本下载"></a>脚本下载</h1><ul><li><a href="share_server.py">本站</a></li><li><a href="https://github.com/debuggerx01/raw_assets/blob/master/scripts/share_server.py">github</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> termux </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 backdrop-filter 实现背景模糊</title>
      <link href="/2020/11/15/use-backdrop-filter-to-blur-background/"/>
      <url>/2020/11/15/use-backdrop-filter-to-blur-background/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客使用的 Butterfly 主题好看是好看，但是果然太费图片了……特别是有时候文章使用的 cover 图清晰度不是很高，在大屏幕上看默认的效果就可能很糊，比如之前文章里用的这张图：</p></blockquote><p><img src="/2020/11/11/learn-about-digitwise-operation/cover.jpeg"></p><p>如果能加上模糊效果的话，就能在一定程度上掩盖图片分辨率不足的缺陷，显得更加美观。</p><p>一般实现背景模糊，直接在元素上加 <code>filter: blur(3px);</code> 的样式就可以了，比如：</p><style>    .demo_img {        width: 50%;        display: flex;        margin: auto;    }    .demo_img > span {        margin: 50px auto;    }</style><img class="demo_img" style="filter: blur(3px);" src="/images/bg.webp"><details><summary>查看源码</summary><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo_img</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"demo_img"</span> <span class="attr">src</span>=<span class="string">'/images/bg.webp'</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure></details><p>但是这种方式有一个很大的问题，就是如果给元素设置模糊，对其子元素也是生效的，比如：</p><div class="demo_img" style="background-image:url(&quot;/images/bg.webp&quot;); filter: blur(2px);">    <span>DebuggerX</span></div><details><summary>查看源码</summary><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo_img</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"/images/bg.webp"</span>);</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo_img</span> &gt; <span class="selector-tag">span</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo_img"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>DebuggerX<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></details><p>可以看到 div 里的文字也变得模糊了，如果想要只让 div 模糊，文字清晰，就需要结构，把文字从 div 中挪出来：</p><div class="demo_img" style="position: relative">    <div style="background-image:url(&quot;/images/bg.webp&quot;); filter: blur(2px); position: absolute; top: 0; bottom: 0; left: 0; right: 0;">    </div>    <span style="z-index: 1">DebuggerX</span></div><details><summary>查看源码</summary><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo_img</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo_img</span> &gt; <span class="selector-tag">div</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"/images/bg.webp"</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo_img</span> &gt; <span class="selector-tag">span</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo_img"</span> <span class="attr">style</span>=<span class="string">"position: relative"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>DebuggerX<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></details><p>这不仅需要额外的一个 div 作为定位容器，设置背景的 div 需要绝对定位，可能还需要调整内部文字或者其他元素的叠放次序。</p><p>而且针对现在博客的情况，页面元素和结构都是框架和主题自动生成的，如果要改，要么改源码，要么在页面生成后动态运行 js 脚本调整，都挺麻烦的……</p><p>那么没有不用改页面结构的方法么？</p><p>那就是 <code>backdrop-filter</code> 这个属性了：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/backdrop-filter">https://developer.mozilla.org/zh-CN/docs/Web/CSS/backdrop-filter</a></p><p>这个属性的用法和 <code>filter</code> 相同，不同点是 <code>backdrop-filter</code> 可以让你为一个元素<strong>后面</strong>区域添加图形效果，同样上面的例子用它来实现：</p><style>    .demo_img_backdrop {        background-image:url("/images/bg.webp");        width: 50%;        display: flex;        margin: auto;        position: relative;    }    .demo_img_backdrop:before {        position: absolute;        width: 100%;        height: 100%;        content: '';        backdrop-filter: blur(3px);    }    .demo_img_backdrop > span {        margin: 50px auto;        z-index: 1;    }</style><div class="demo_img_backdrop">    <span>DebuggerX</span></div><details><summary>查看源码</summary><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo_img_backdrop</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"/images/bg.webp"</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo_img_backdrop</span><span class="selector-pseudo">:before</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">''</span>;</span></span><br><span class="line"><span class="language-css">        backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo_img_backdrop</span> &gt; <span class="selector-tag">span</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    }</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo_img_backdrop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>DebuggerX<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></details><blockquote><p>测试下来兼容性还好，主流浏览器应该都能支持，但是感觉加上以后好像会影响部分设备浏览页面的流畅度，所以目前只应用在文章页面，主页的封面图还是保持原样吧<span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/bowtie.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 table 布局解决元素 border 空隙的 bug</title>
      <link href="/2020/11/14/use-table-layout-to-solve-a-display-issue/"/>
      <url>/2020/11/14/use-table-layout-to-solve-a-display-issue/</url>
      
        <content type="html"><![CDATA[<h1 id="BUG介绍"><a href="#BUG介绍" class="headerlink" title="BUG介绍"></a>BUG介绍</h1><p>有一个前端产品，需求是需要给一个文本块加上个角标，虽然产品没给具体样式上的要求，但是作为直男<span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/godmode.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>用仅存的一点点<img src="http://twemoji.maxcdn.com/36x36/1f3a8.png" title="twemoji-1f3a8" alt="twemoji-1f3a8" class="emoji twemoji" />细胞，还是花了点时间从网上找来一段用 css 实现的角标，感觉还行叭：</p><iframe width="430" scrolling="no" height="200" frameborder="0" src="corner.html" style="display: block; margin: auto"></iframe><details><summary>查看源码</summary><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#1b1b1b</span>;</span></span><br><span class="line"><span class="language-css">      }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#container</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: darkslateblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">      }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#corner</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: -.<span class="number">4rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: -<span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">      }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#corner</span> &gt; <span class="selector-tag">span</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: .<span class="number">8rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">4em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-style</span>: oblique;</span></span><br><span class="line"><span class="language-css">      }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#corner</span><span class="selector-pseudo">:before</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">3em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: -<span class="number">0.2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-right</span>: <span class="number">0.6rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1rem</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">""</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0.3rem</span> <span class="number">0.3rem</span> -<span class="number">0.3rem</span> black;</span></span><br><span class="line"><span class="language-css">      }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#corner</span><span class="selector-pseudo">:after</span> {</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">""</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">1.7rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">0.25rem</span> solid darkgreen;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-right-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">      }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>人类从历史中学到的唯一教训是<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>人类无法从历史中学到任何教训<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"corner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>黑格尔<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></details><p>看上去还<span class="github-emoji"><span>🆗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f197.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>～然鹅……<br>后来偶然发现，如果用户的浏览器设置了页面缩放，在某些缩放值下角标会产生奇怪的裂缝：<br><img src="/2020/11/14/use-table-layout-to-solve-a-display-issue/bug.png" alt="bug"></p><p>通过在各种设备上测试，发现除了 safari 以外，PC 上的 Chrome、IE，手机上的 FireFox、UC 等，或多或少都存在这个问题，其中尤以 PC 的 Chrome 最为严重，严重影响美观<span class="github-emoji"><span>😧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f627.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>角标主体部分是用伪元素实现的，具体样式为：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#corner</span><span class="selector-pseudo">:before</span> {</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">3em</span>;</span><br><span class="line"><span class="attribute">top</span>: -<span class="number">0.2rem</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0.5rem</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">padding-right</span>: <span class="number">0.6rem</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">color</span>: black;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1rem</span> solid green;</span><br><span class="line"><span class="attribute">border-left-color</span>: transparent;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0.3rem</span> <span class="number">0.3rem</span> -<span class="number">0.3rem</span> black;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以得知实现的原理是先将元素高度设为0，然后设置宽度为 1rem 的边框，这样就得到一个高度为 2rem 的矩形；接着单独设置左边框的颜色为透明，这样就实现了左边挖出了一个内角的效果。</p><p>所以产生的缝隙就是不知为何，设置的 <code>height: 0</code> 失效，上下边框之间露出了缝隙……</p><h1 id="解决方法-不完美"><a href="#解决方法-不完美" class="headerlink" title="解决方法(不完美)"></a>解决方法(不完美)</h1><p>经过各种尝试，包括设置内阴影、在元素下面再放个绿色元素等，效果都不是很理想……突然想起以前同事教我的神技：样式有奇怪问题，就切换几个不同的 display 模式试试看 <span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/shipit.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </p><p>然后：<br><img src="/2020/11/14/use-table-layout-to-solve-a-display-issue/fix.webp" alt="fix"></p><p>设置 <code>display: table</code> 后居然就显示正常了<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><blockquote><p>之所以说这样的解决不完美，是因为在 FireFox 和 IE 上，还是会存在一点难以察觉的缝隙。。但是考虑到主流浏览器的市场份额……就这样吧<span class="github-emoji"><span>😬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一段位运算代码的理解记录</title>
      <link href="/2020/11/11/learn-about-digitwise-operation/"/>
      <url>/2020/11/11/learn-about-digitwise-operation/</url>
      
        <content type="html"><![CDATA[<blockquote><p>平时位运算、二进制操作什么的用到的很少，最近工作中要为 Flutter 的 APP 对接一个 BLE 设备，其中涉及到了相关的内容，简单记录下对一段代码的理解 <img src="http://twemoji.maxcdn.com/36x36/270f.png" title="twemoji-270f" alt="twemoji-270f" class="emoji twemoji" /></p></blockquote><h1 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBytesIndex</span><span class="params">(<span class="type">int</span> bitPos)</span> {</span><br><span class="line"><span class="keyword">return</span> bitPos / <span class="number">8</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getOffset</span><span class="params">(<span class="type">int</span> bitPos)</span> {</span><br><span class="line"><span class="keyword">return</span> bitPos % <span class="number">8</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] parserHeartData(<span class="type">byte</span>[] data) {</span><br><span class="line"><span class="type">int</span> <span class="variable">pIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">byte</span>[] samp = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>; i &lt;= <span class="number">15</span>; ++i) {</span><br><span class="line"><span class="type">byte</span> <span class="variable">tem</span> <span class="operator">=</span> data[getBytesIndex(i)];</span><br><span class="line">samp[pIndex++] = tem &gt;&gt; <span class="number">7</span> - getOffset(i) &amp; <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] points = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">12</span>];</span><br><span class="line">pIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">16</span>; i &lt;= <span class="number">159</span>; i += <span class="number">8</span>) {</span><br><span class="line"><span class="type">byte</span> <span class="variable">tem</span> <span class="operator">=</span> data[getBytesIndex(i)];</span><br><span class="line">i += <span class="number">8</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">high4</span> <span class="operator">=</span> data[getBytesIndex(i)] &gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">low4</span> <span class="operator">=</span> data[getBytesIndex(i)] &amp; <span class="number">15</span>;</span><br><span class="line">points[pIndex] = samp[pIndex] &lt;&lt; <span class="number">12</span> | high4 &lt;&lt; <span class="number">8</span> | tem;</span><br><span class="line">++pIndex;</span><br><span class="line">i += <span class="number">8</span>;</span><br><span class="line">tem = data[getBytesIndex(i)];</span><br><span class="line">points[pIndex] = samp[pIndex] &lt;&lt; <span class="number">12</span> | low4 &lt;&lt; <span class="number">8</span> | tem;</span><br><span class="line">++pIndex;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> points;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>本段代码的意图：</p><ol><li>传入的 data 的长度为20，记为 d0 ～ d19；</li><li>最终将产生12个 point 数据，每个 point 共 13bit 有效数据，记为 p0 ～ p11；</li><li>d0 与 d1 视为第一组，其中：<ul><li>d0 的第 4～7 位为标识和序号；</li><li>第 0～3 位分别为 p3 ～p0 的最高位；</li><li>d1 的第 0～7 位分别为 p7 ～p11 的最高位；</li></ul></li><li>后续 data 每三个为一组循环，以 d2 ～ d4 为例，其中：<ul><li>d2 为 p0 的低8位</li><li>d4 为 p1 的低8位</li><li>d3 的高4位（第 4～7 位）为 p0 的第 8～11位</li><li>d3 的低4位（第 0～3 位）为 p1 的第 8～11位</li></ul></li></ol><p>所以去掉 d0 和 d1，剩下数据3个一组共有6组，每组产生两个 point，最终是12个 point，每个 point 的长度为 8 + 4 + 1 = 13。</p><h1 id="逐行分析"><a href="#逐行分析" class="headerlink" title="逐行分析"></a>逐行分析</h1><p>首先是两个定位函数</p><p>由于每个 data 的长度为 8bit，所以20个 data 共计 160bit，那么对于传入的 bitPos：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整除长度 8 得到该bit位于data中的第几个byte</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBytesIndex</span><span class="params">(<span class="type">int</span> bitPos)</span> {</span><br><span class="line"><span class="keyword">return</span> bitPos / <span class="number">8</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用长度 8 取余得到该bit在所处d中的偏移量</span></span><br><span class="line"><span class="comment">// 这个偏移量是以高位为起点的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getOffset</span><span class="params">(<span class="type">int</span> bitPos)</span> {</span><br><span class="line"><span class="keyword">return</span> bitPos % <span class="number">8</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对应如下：</p><table><thead><tr><th align="center">bitPos:</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th><th align="center">12</th><th align="center">13</th><th align="center">14</th><th align="center">15</th></tr></thead><tbody><tr><td align="center">bitVal:</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">bit:</td><td align="center">7bit</td><td align="center">6bit</td><td align="center">5bit</td><td align="center">4bit</td><td align="center">3bit</td><td align="center">2bit</td><td align="center">1bit</td><td align="center">0bit</td><td align="center">7bit</td><td align="center">6bit</td><td align="center">5bit</td><td align="center">4bit</td><td align="center">3bit</td><td align="center">2bit</td><td align="center">1bit</td><td align="center">0bit</td></tr><tr><td align="center">offset:</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td></tr><tr><td align="center">byte:</td><td align="center">&lt;=</td><td align="center">=</td><td align="center">=</td><td align="center">d</td><td align="center">0</td><td align="center">=</td><td align="center">=</td><td align="center">=&gt;</td><td align="center">&lt;=</td><td align="center">=</td><td align="center">=</td><td align="center">d</td><td align="center">1</td><td align="center">=</td><td align="center">=</td><td align="center">=&gt;</td></tr></tbody></table><p>然后分析主解析逻辑：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] parserHeartData(<span class="type">byte</span>[] data) {</span><br><span class="line"><span class="comment">// 从第一个point开始处理</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 该数组用于临时存储每个point的最高位，所以长度和point的长度一样为12</span></span><br><span class="line"><span class="type">byte</span>[] samp = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">12</span>];</span><br><span class="line"><span class="comment">// 从上面的说明和图示可知，从d0的3bit开始到d1的0bit共12个bit分别是12个point的最高位</span></span><br><span class="line"><span class="comment">// 对应的bitPos就是4～15，所以在此范围循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>; i &lt;= <span class="number">15</span>; ++i) {</span><br><span class="line"><span class="comment">// 根据bitPos找到所在data的下标，从data中取出该byte数据</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">tem</span> <span class="operator">=</span> data[getBytesIndex(i)];</span><br><span class="line"><span class="comment">// 根据bitPos找到其在对应byte中的偏移，用7-offset得到的是该bit右移几位后将位于byte的最低位</span></span><br><span class="line"><span class="comment">// 然后执行右移操作，再和1执行按位与操作，这样得到的就是想要当前bitPos对应的bit的值</span></span><br><span class="line">samp[pIndex++] = tem &gt;&gt; <span class="number">7</span> - getOffset(i) &amp; <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">……</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li><code>tem &gt;&gt; 7 - getOffset(i) &amp; 1</code>可以获得预期结果，是因为运算优先级 加减操作 高于 位移 高于 按位与；</li><li>由于(byte)1的二进制为 <code>0000 0001</code>，所以任何数据 &amp;1后，逐位与比较，高位全部因为和0与而变成0，最低位和1与可以保持该bit，所以可以实现提取数组的最低位；</li><li>之后代码中的 <code>&amp; 15</code>同理，因为(byte)15的二进制为 <code>0000 1111</code>，所以数据&amp;15 后得到的是该数据的低4位。</li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接下来的这两行，先是定义了长度为12的数组，用于存储最终的 points，然后将脚标重置为零</span></span><br><span class="line"><span class="type">int</span>[] points = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">12</span>];</span><br><span class="line">pIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于前两个byte已经处理，所以略过前16个bit，从bitPos = 16处开始循环到最后</span></span><br><span class="line"><span class="comment">// 每次循环结束后bitPos+8，包括循环体里的两次+8，总共是三个byte</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">16</span>; i &lt;= <span class="number">159</span>; i += <span class="number">8</span>) {</span><br><span class="line"><span class="comment">// 取出该组的第一个byte</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">tem</span> <span class="operator">=</span> data[getBytesIndex(i)];</span><br><span class="line"><span class="comment">// bitPos+8，所以下面操作的是该组的第二个byte</span></span><br><span class="line">i += <span class="number">8</span>;</span><br><span class="line"><span class="comment">// 用和上面一样的操作，先右移四位再取低4bit，得到的就是该byte的高4位</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">high4</span> <span class="operator">=</span> data[getBytesIndex(i)] &gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>;</span><br><span class="line"><span class="comment">// 不位移直接 &amp;15，得到该byte的低四位</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">low4</span> <span class="operator">=</span> data[getBytesIndex(i)] &amp; <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据规则，用之前保存的最高位、该组第二个byte的高四位和第1个byte组成该组生成的第1个point</span></span><br><span class="line">points[pIndex] = samp[pIndex] &lt;&lt; <span class="number">12</span> | high4 &lt;&lt; <span class="number">8</span> | tem;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理下一个point，bitPos 再一次 +8</span></span><br><span class="line">++pIndex;</span><br><span class="line">i += <span class="number">8</span>;</span><br><span class="line">tem = data[getBytesIndex(i)];</span><br><span class="line"><span class="comment">// 用之前保存的最高位、该组第二个byte的低四位和第3个byte组成该组生成的第2个point</span></span><br><span class="line">points[pIndex] = samp[pIndex] &lt;&lt; <span class="number">12</span> | low4 &lt;&lt; <span class="number">8</span> | tem;</span><br><span class="line">++pIndex;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>1.由于左移操作后，数据的低位都将置为0,例如 <code>1010 1101 &lt;&lt; 3</code> 的结果为 <code>0110 1000</code>，按位或操作遇到 0 可以保留与这个 0 或的 bit 值，所以 <code>samp[pIndex] &lt;&lt; 12(tem 和 high4 的长度 ) | high4 &lt;&lt; 8(tem 的长度) | tem</code> 就完成了bit的组装，得到了最终的数据<br>    2.根据 <a href="https://blog.csdn.net/u010130947/article/details/88789140">程序加法运算的二进制原理</a> 很容易可以看出，如果不是用 | 操作。而是用 + 操作将三个部分合起来，实际指令的数量应该是一样的；但是这里还是应该用 | 操作，还是因为运算优先级 加减操作 高于 位移 高于 按位或，如果用 + 则需要把上面的代码改为 <code>(samp[pIndex] &lt;&lt; 12) + (low4 &lt;&lt; 8) + tem</code></p></blockquote><h1 id="Android-中常见的用法"><a href="#Android-中常见的用法" class="headerlink" title="Android 中常见的用法"></a>Android 中常见的用法</h1><p>关于 <code>|</code> 操作符号，在 Android 开发中经常用得到，比如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></tbody></table></figure><p><code>addFlags(int flag)</code> 方法的参数只有一个而且类型为 int，而有时需要设置多个 flag，此时就会用到 <code>|</code> 操作服将两个 flag 合并，之所以能够这样操作，是因为 Android SDK 中判断设置的 flag 就是判断的 bit 位。以上面的代码为例，<code>Intent.FLAG_ACTIVITY_CLEAR_TASK</code> 的值为 <code>32768</code>， 二进制为 <code>1000 0000 0000 0000</code>；而<code>Intent.FLAG_ACTIVITY_NEW_TASK</code> 的值为 <code>268435456</code>， 二进制为 <code>0001 0000 0000 0000 0000 0000 0000 0000</code>；所以 <code>Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK</code> 的值为 <code>0001 0000 0000 0000 1000 0000 0000 0000</code></p><p>类似的操作在各种配置判断的情况下都很常见，qt中也有类似的用法 <span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/shipit.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为博客加入一个好用的在线MD编辑工具</title>
      <link href="/2020/11/08/an-awesome-markdown-editor-for-hexo/"/>
      <url>/2020/11/08/an-awesome-markdown-editor-for-hexo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这两天好好配置了下本博客，<a href="https://hexo.io/zh-cn/docs/">Hexo</a> 配合 <a href="https://butterfly.js.org/categories/Docs%E6%96%87%E6%AA%94/">Butterfly 主题</a> 开箱提供了很多好用的功能特性，几乎满足了我对一个博客和知识管理平台的所有功能和视觉上的需求，很满意 ^_^ —— 唯独有一个问题，Hexo 使用 markdown 文本来生成静态页面，所以一个方便好用的 MD 编辑器就变得非常有必要了。长久以来不喜欢写 markdown 文档的两大原因就是没找到好用的文档管理工具和编辑器，现在管理的问题解决了，是时候花功夫找一个好用的编辑器了。</p></blockquote><blockquote><p>本地编辑器用过各种 IDE 的插件和 <a href="https://typora.io/">Typora</a>，感觉都不是很好用，而且为了能加到 blog 上方便随时打开浏览器就能写作，于是决定找一个好用的在线编辑器。之前用 <a href="https://juejin.im/editor/drafts/new">掘金</a> 的编辑器感觉还是很顺手的，尤其喜欢左右实时预览，所见即所得的写作体验，它使用的是一个名为 <a href="https://github.com/bytedance/bytemd">ByteMD</a> 的项目，但是看了下感觉功能还不够丰富……</p></blockquote><h1 id="初识-Editor-md"><a href="#初识-Editor-md" class="headerlink" title="初识 Editor.md"></a>初识 Editor.md</h1><p>直到找到了这个 <a href="https://pandao.github.io/editor.md/">Editor.md</a>，眼前一亮，功能丰富样式也好看，star 数更是与 ByteMD 拉开了几个数量级，虽然已经很久没有更新了，但足够好用，很适合直接引入到网页里</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>直接从 github 仓库 clone 源码：<a href="https://github.com/pandao/editor.md">https://github.com/pandao/editor.md</a></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在 hexo 的 <code>source</code> 目录下创建目录 <code>md_editor</code>，并创建 <code>index.html</code> 页面，根据 <a href="https://github.com/pandao/editor.md#usages">README文档</a> 用最简单的方式引入：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">title</span>=<span class="string">"MD Editor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/editormd.min.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"editor"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Tips: Editor.md can auto append a `&lt;textarea&gt;` tag --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span>### Hello Editor.md !<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/editormd.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          $(<span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">md_editor</span> = <span class="title function_">editormd</span>(<span class="string">"editor"</span>, {</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// width: "100%",</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// height: "100%",</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// markdown: "xxxx",     // dynamic set Markdown text</span></span></span><br><span class="line"><span class="language-javascript">              path : <span class="string">"/lib/"</span>  <span class="comment">// Autoload modules mode, codemirror, marked... dependents libs path</span></span></span><br><span class="line"><span class="language-javascript">            });</span></span><br><span class="line"><span class="language-javascript">          });</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>根据加载的内容，在 <code>md_editor</code> 目录下创建 <code>css</code> 和 <code>js</code> 两个目录，并将下载的源码中的如下三个文件拷贝到对应位置：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">examples/css/editormd.min.css</span><br><span class="line">examples/js/jquery.min.js</span><br><span class="line">editormd.js</span><br></pre></td></tr></tbody></table></figure><p>再将源码中整个 <code>lib</code> 目录拷贝过来，这样基本的引入就完成了</p><h2 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h2><p>现在直接运行 <code>hexo server</code> 并访问编辑器页面是会报错的，因为 Hexo 会尝试渲染引入的目录，所以要在 <code>_config.yml</code> 中配置忽略 <code>md_editor</code> 目录：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">……</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"md_editor/**"</span></span><br><span class="line"><span class="string">……</span></span><br></pre></td></tr></tbody></table></figure><p>而为了可以方便地直接通过在首页上点击链接进入编辑器，可以把编辑器地址加入 Butterfly 的 menu 中：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">……</span></span><br><span class="line">  <span class="string">工具||fas</span> <span class="attr">fa-tools:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MDEditor</span> <span class="string">||</span> <span class="string">/md_editor/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-pen</span></span><br><span class="line">  <span class="string">……</span></span><br></pre></td></tr></tbody></table></figure><h2 id="补全缺少的文件"><a href="#补全缺少的文件" class="headerlink" title="补全缺少的文件"></a>补全缺少的文件</h2><p>现在运行 <code>hexo server</code>，通过首页的工具链接进入编辑器体验一下，主要功能可用了，但是部分功能按钮无效，还有一些图标无法加载，根据控制台报错，还需要把源码中如下三个目录拷贝到 <code>md_editor</code>下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins/</span><br><span class="line">fonts/</span><br><span class="line">images/</span><br></pre></td></tr></tbody></table></figure><p>重新运行后编辑器即可正常使用</p><h2 id="优化编辑器样式"><a href="#优化编辑器样式" class="headerlink" title="优化编辑器样式"></a>优化编辑器样式</h2><p>首先配置主题，我喜欢暗色，在 <code>index.html</code> 中 <code>editormd</code> 的初始化配置中加入：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line"><span class="keyword">var</span> editor = <span class="title function_">editormd</span>(<span class="string">"editor"</span>, {</span><br><span class="line"><span class="comment">// 整体编辑器的样式</span></span><br><span class="line"><span class="attr">theme</span>: <span class="string">'dark'</span>,</span><br><span class="line"><span class="comment">// 预览区域的样式</span></span><br><span class="line"><span class="attr">previewTheme</span>: <span class="string">'dark'</span>,</span><br><span class="line"><span class="comment">// 编辑区域的样式</span></span><br><span class="line"><span class="attr">editorTheme</span>: <span class="string">'pastel-on-dark'</span>,</span><br><span class="line">});</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>由于代码编辑使用的 <a href="https://github.com/codemirror/CodeMirror">CodeMirror</a>，所以 editorTheme 可以指定 CodeMirror 的 theme，如果有喜欢的主题可以从 <a href="https://github.com/codemirror/CodeMirror/tree/master/theme">https://github.com/codemirror/CodeMirror/tree/master/theme</a> 下载后放入 <code>/md_editor/lib/codemirror/theme</code> 后即可使用。预设的样式可以在这里预览：<br><a href="http://editor.md.ipandao.com/examples/themes.html">http://editor.md.ipandao.com/examples/themes.html</a></p><p>上面配置的效果：<br><img src="/2020/11/08/an-awesome-markdown-editor-for-hexo/theme.png" alt="theme"></p><p>然后在 <code>index.html</code> 的<code>&lt;head&gt;&lt;/head&gt;</code> 中加入全局样式以消除滚动条并适应所选主题的颜色：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> {</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: <span class="number">#2c2827</span>;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.editormd</span> {</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>并设置 <code>editormd</code> 的初始化配置指定宽高：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line"><span class="keyword">var</span> editor = <span class="title function_">editormd</span>(<span class="string">"editor"</span>, {</span><br><span class="line">……</span><br><span class="line"><span class="attr">width</span>: <span class="string">"100%"</span>,</span><br><span class="line"><span class="attr">height</span>: <span class="string">"98%"</span>,</span><br><span class="line">……</span><br><span class="line">});</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>到此为止，Editor.md 的引入及美化就完成了</p><h1 id="加入本地-md-文件读取功能"><a href="#加入本地-md-文件读取功能" class="headerlink" title="加入本地 md 文件读取功能"></a>加入本地 md 文件读取功能</h1><p>但是现在编辑器还是不够好用。作为一个基于 Web 的编辑器，如果每次想要修改某个 md 文档都需要先在本地打开，复制文档内容粘贴到编辑器里才能继续编辑修改也太麻烦了，所以需要加入读取本地 md 文档的功能</p><p>参考 <a href="http://editor.md.ipandao.com/examples/custom-toolbar.html">自定义工具栏 - Editor.md examples</a>，想要在工具栏中加入自定义工具，主要需要修改的是初始化配置中的 <code>toolbarIcons</code> 和 <code>toolbarCustomIcons</code>：<br>首先修改 <code>toolbarIcons</code> 来控制显示的图标：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line"><span class="keyword">var</span> editor = <span class="title function_">editormd</span>(<span class="string">"editor"</span>, {</span><br><span class="line">……</span><br><span class="line"><span class="attr">toolbarIcons</span>: <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line"><span class="comment">// 获取默认的所有工具名称</span></span><br><span class="line"><span class="keyword">var</span> icons = editormd.<span class="property">toolbarModes</span>.<span class="property">full</span>;</span><br><span class="line"><span class="comment">// 过滤掉不需要的工具</span></span><br><span class="line">icons = icons.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">i</span>) {<span class="keyword">return</span> ![<span class="string">'fullscreen'</span>, <span class="string">'preview'</span>, <span class="string">'emoji'</span>].<span class="title function_">includes</span>(i);});</span><br><span class="line"><span class="comment">// 加入自定义的工具名</span></span><br><span class="line">icons.<span class="title function_">push</span>(<span class="string">'|'</span>, <span class="string">'load_md'</span>);</span><br><span class="line"><span class="keyword">return</span> icons;</span><br><span class="line">},</span><br><span class="line">……</span><br><span class="line">});</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>然后在 <code>toolbarCustomIcons</code> 实现加入的 <code>load_md</code> 工具：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="attr">toolbarCustomIcons</span>: {</span><br><span class="line"><span class="attr">load_md</span>: <span class="string">'&lt;input type="file" id="my_file" accept=".md" onchange="md_file_changed()" style="display: none;"&gt;&lt;li&gt;&lt;a href="javascript:#" onclick="load_md_file()" title="load md" unselectable="on"&gt;&lt;i class="fa fa-upload" name="load_md" unselectable="on"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;'</span>,</span><br><span class="line">},</span><br><span class="line">……</span><br></pre></td></tr></tbody></table></figure><p>并实现按钮的点击方法和选择文档后的处理方法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">load_md_file</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line"><span class="comment">// 点击图标，触发隐藏的&lt;input/&gt;标签的点击事件用以选择本地 md 文档</span></span><br><span class="line">$(<span class="string">"#my_file"</span>).<span class="title function_">click</span>();</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">md_file_changed</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line"><span class="comment">// 获取选择到的本地文件对象，利用 HTML5 的 File API 加载其内容</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"my_file"</span>).<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">reader.<span class="title function_">readAsText</span>(file, <span class="string">"utf-8"</span>);</span><br><span class="line">reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line"><span class="comment">// 将文档内容载入编辑器</span></span><br><span class="line"><span class="keyword">var</span> fileText = e.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">md_editor</span>.<span class="property">cm</span>.<span class="title function_">replaceSelection</span>(fileText);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="处理文档中相对路径图片的加载问题"><a href="#处理文档中相对路径图片的加载问题" class="headerlink" title="处理文档中相对路径图片的加载问题"></a>处理文档中相对路径图片的加载问题</h1><blockquote><p>现在还有一个问题。参考网上的一些分享，如果使用图床来处理文档中的图片，虽然节省了流量，但是管理起来非常麻烦，而且一旦图床出现问题事情会变的更为棘手，所以在找到足够完全的解决方案前我准备将图片资源都放直接在博客内。而为了管理方便，参考 <a href="https://hexo.io/zh-cn/docs/asset-folders#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9">资源文件夹 | Hexo</a>，每篇文章内引用的相对路径图片都放在了文档同名的文件夹内，而编辑器是无法正确处理这样的相对路径的，而只会傻乎乎得尝试下载相对于当前编辑器页面路径的图片，然后预览页面一堆难看的裂图</p></blockquote><p>Editor.md 使用 <a href="https://github.com/markedjs/marked">marked</a> 这个开源项目对 md 内容进行解析，在查看了 <a href="https://marked.js.org/using_advanced#options">marked 文档</a> 发现其可以通过设置 <code>baseUrl</code> 参数来解决相对路径资源的问题，所以如果可以控制设置这个参数应该就可以解决问题。</p><p>查看 <code>js/editormd.js</code>，找到 editormd 生成预览时调用 marked 解析的方法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 解析和保存Markdown代码</span></span><br><span class="line"><span class="comment">         * Parse &amp; Saving Markdown source code</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@returns</span> {<span class="type">editormd</span>}     返回editormd的实例对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">save : <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">……</span><br><span class="line"><span class="keyword">var</span> markedOptions = <span class="variable language_">this</span>.<span class="property">markedOptions</span> = {</span><br><span class="line">renderer    : editormd.<span class="title function_">markedRenderer</span>(markdownToC, rendererOptions),</span><br><span class="line">gfm         : <span class="literal">true</span>,</span><br><span class="line">tables      : <span class="literal">true</span>,</span><br><span class="line">breaks      : <span class="literal">true</span>,</span><br><span class="line">pedantic    : <span class="literal">false</span>,</span><br><span class="line">sanitize    : (settings.<span class="property">htmlDecode</span>) ? <span class="literal">false</span> : <span class="literal">true</span>,  <span class="comment">// 关闭忽略HTML标签，即开启识别HTML标签，默认为false</span></span><br><span class="line">smartLists  : <span class="literal">true</span>,</span><br><span class="line">smartypants : <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 尝试在options中加入baseUrl，这个md_base_url挂载在window上</span></span><br><span class="line">baseUrl     :<span class="variable language_">window</span>.<span class="property">md_base_url</span></span><br><span class="line">};</span><br><span class="line">marked.<span class="title function_">setOptions</span>(markedOptions);</span><br><span class="line"><span class="comment">// 这里调用marked解析md内容生成html文档</span></span><br><span class="line"><span class="keyword">var</span> newMarkdownDoc = editormd.$marked(cmValue, markedOptions);</span><br><span class="line">……</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">markdownTextarea</span>.<span class="title function_">text</span>(cmValue);</span><br><span class="line">cm.<span class="title function_">save</span>();</span><br><span class="line">……</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>发现没有用……跟踪调试 marked 输出的内容没有变化。<br>追源码半天最后发现 baseUrl 这个参数是在 marked 的 v0.3.9 版本才加入的，而 Editor.md 源码中包含的 marked 是 v0.3.3 版本……所以下载新版本的 <a href="https://github.com/markedjs/marked/blob/master/marked.min.js">marked.min.js</a> 替换 <code>/md_editor/lib/marked.min.js</code>，再试就可以了。。。</p><p>然后再在工具栏加入一个输入框，可以直接用来修改 <code>window.md_base_url</code> 的值，这样在其中输入正在编辑的文章在服务器上的路径，即可实现预览区中相对路径图片的正确显示。</p><h1 id="给编辑器加入自动保存功能"><a href="#给编辑器加入自动保存功能" class="headerlink" title="给编辑器加入自动保存功能"></a>给编辑器加入自动保存功能</h1><p>因为是基于 Web 的工具，如果不小心关掉了页面，正在编辑中的内容就丢失了……好在可以通过 LocalStorage 定时对内容进行储存，实现起来也很方便（顺便把 BaseUrl 输入框的值也做了本地存储处理）：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line"><span class="comment">// 页面打开时尝试从LocalStorage中读取已经保存的内容</span></span><br><span class="line"><span class="keyword">var</span> content = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">"KEY_MD_EDITOR_CONTENT"</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">md_base_url</span> = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">"KEY_MD_EDITOR_BASE_URL"</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">md_editor</span> = <span class="title function_">editormd</span>(<span class="string">"editor"</span>, {</span><br><span class="line">……</span><br><span class="line">},</span><br><span class="line">});</span><br><span class="line">……</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">md_base_url_changed</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">md_base_url</span> = $(<span class="string">"#md_base_url"</span>).<span class="title function_">val</span>();</span><br><span class="line"><span class="comment">// 同样利用LocalStorage保存BaseUrl输入框的值</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">"KEY_MD_EDITOR_BASE_URL"</span>, <span class="variable language_">window</span>.<span class="property">md_base_url</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 开启定时器，每隔10秒将编辑器中的内容保存到LocalStorage中</span></span><br><span class="line"><span class="comment">// 获取和设置编辑器内容的方法分别是editor.cm.getValue()和editor.cm.setValue()</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">"KEY_MD_EDITOR_CONTENT"</span>, <span class="variable language_">window</span>.<span class="property">md_editor</span>.<span class="property">cm</span>.<span class="title function_">getValue</span>());</span><br><span class="line">}, <span class="number">1000</span> * <span class="number">10</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>目前需要的功能基本就都实现了，后面有需求可能还会继续折腾这个工具……</p><h1 id="编辑器代码大小优化"><a href="#编辑器代码大小优化" class="headerlink" title="编辑器代码大小优化"></a>编辑器代码大小优化</h1><blockquote><p>虽然编辑器已经改得足够好用了，但是却有一个实际的问题，就是编辑器本身的大小有点大，足有 3.8MB，光是 内置的 CodeMirror 就有 2.4MB ，这样部署以后一来可能影响加载速度，而来浪费流量配额，所以考虑对其进行优化。</p></blockquote><p>参考一些教程后决定引入 gulp 进行代码压缩，首先安装依赖：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gulp gulp-minify-css gulp-uglify --save</span><br></pre></td></tr></tbody></table></figure><p>然后在根目录创建编辑 <code>gulpfile.js</code>：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">'minify-css'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">'./public/md_editor/**/*.css'</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">'./public/md_editor'</span>));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">'minify-js'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">'./public/md_editor/**/*.js'</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">'./public/md_editor'</span>));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">'default'</span>, gulp.<span class="title function_">series</span>(<span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>));</span><br></pre></td></tr></tbody></table></figure><p>目前只用处理 <code>./public/md_editor/</code> 下的 js 和 css，后续如果有需要再继续配置吧<br>最后修改 <code>package.json</code> ：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">……</span><br><span class="line"><span class="attr">"scripts"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line"><span class="attr">"build"</span><span class="punctuation">:</span> <span class="string">"hexo generate &amp;&amp; gulp"</span><span class="punctuation">,</span></span><br><span class="line">……</span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line">……</span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>这样以后执行 <code>yarn run build</code> 生成静态网站时就会自动对指定代码进行压缩，目前编辑器的大小从之前的 3.8MB 缩小到了 2.8MB，还可以。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>目前为止的编辑器源码地址：<br><a href="https://github.com/debuggerx01/md_editor_for_hexo">https://github.com/debuggerx01/md_editor_for_hexo</a></p><p>如果觉得不错可以引入到自己的博客或者单纯当作 md 编辑器。<br>Feel Free ～ (&gt;‿◠)</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> hexo </tag>
            
            <tag> 开源 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为nginx日志增加请求体及响应内容记录</title>
      <link href="/2020/11/07/add-request-and-response-log-for-nginx/"/>
      <url>/2020/11/07/add-request-and-response-log-for-nginx/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为nginx日志增加请求体及响应内容记录，一方面可以记录网站或者nginx代理的某服务详细的请求/响应内容，以便发现bug时可以回溯追查，另一方面可以配合gotty实现实时的请求数据显示，从而在开发过程中省去了打日志或者抓包的麻烦。</p></blockquote><h1 id="安装Lua-Nginx-Module"><a href="#安装Lua-Nginx-Module" class="headerlink" title="安装Lua-Nginx-Module"></a>安装Lua-Nginx-Module</h1><p>debian系很简单，直接通过包管理就可以安装：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libnginx-mod-http-lua</span><br></pre></td></tr></tbody></table></figure><p>Redhat系就比较烦，没找到提供该模块的repo，但是通过源码编译是不可能编译的，这辈子都不可能用源码编译的←_←，参考文档 <a href="https://github.com/openresty/lua-nginx-module#installation">https://github.com/openresty/lua-nginx-module#installation</a> ，可以安装 <a href="https://openresty.org/cn/">OpenResty</a> 获得开箱即用的 Nginx 和 ngx_lua 模块，根据 <a href="https://openresty.org/cn/linux-packages.html">安装文档</a> ，CentOS的安装方法：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add the yum repo:</span></span><br><span class="line">wget https://openresty.org/package/centos/openresty.repo</span><br><span class="line">sudo mv openresty.repo /etc/yum.repos.d/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">update the yum index:</span></span><br><span class="line">sudo yum check-update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install openresty</span></span><br><span class="line">sudo yum install -y openresty</span><br></pre></td></tr></tbody></table></figure><p>这样安装好以后，OpenResty 将会被安装到 <code>/usr/local/openresty/</code> 这个路径下，而它提供的 Nginx 则是其中的 <code>/usr/local/openresty/nginx/sbin/nginx</code>， 官方推荐的使用方式是将这个路径加入环境变量 PATH 中，这显然不是个好习惯，尤其是在已经安装过 Nginx 的情况下，所以还是做个软链接吧：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果已经安装了Nginx，先把它重命名</span></span><br><span class="line">sudo mv /usr/sbin/nginx /usr/sbin/nginx_bak</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">sudo ln -s /usr/local/openresty/nginx/sbin/nginx /usr/sbin/nginx</span><br></pre></td></tr></tbody></table></figure><p>这样就不用做任何修改，还可以复用之前包管理安装 Nginx 的服务(<code>/usr/lib/systemd/system/nginx.service</code>)，继续使用 systemctl  来管理 Nginx 服务的运行</p><h1 id="修改-Nginx-配置"><a href="#修改-Nginx-配置" class="headerlink" title="修改 Nginx 配置"></a>修改 Nginx 配置</h1><p>首先定义日志格式：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_format postdata escape=json '{"realip":"$remote_addr","timestamp":"$time_iso8601","request":"$request","req_body":"$request_body","status":"$status","resp_body":"$resp_body"}';</span><br></pre></td></tr></tbody></table></figure><p>其中 <code>postdata</code> 为自定义日志格式的名称；<code>escape=json</code> 用来对日志内容进行转义，否则日志中会出现类似 <code>\x22</code>这样的内容影响阅读；<code>timestamp</code> 有 <code>$time_iso8601</code> 和 <code>$time_local</code> 两种格式， <code>$time_iso8601</code> 相对来说可读性高一些；<code>$request_body</code> 和 <code>$resp_body</code> 即是用来输出请求和响应的内容，这两个变量都需要在下面的服务配置中做相应设置才能使用</p><p>在</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">……</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>中加入：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">……</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入这一行使 `<span class="variable">$request_body</span>` 变量生效</span></span><br><span class="line">lua_need_request_body on;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">声明 `<span class="variable">$resp_body</span>` 变量，并利用 lua 模块执行脚本处理响应体，并赋值给该变量</span></span><br><span class="line">set $resp_body "";</span><br><span class="line">body_filter_by_lua '</span><br><span class="line">-- 根据情况修改这里截取的长度，截取过短会导致日志中数据不完整</span><br><span class="line">-- 截取过长会导致日志增长过快， 对于api服务来说响应过长一般都是无意义的错误</span><br><span class="line">local resp_body = string.sub(ngx.arg[1], 1, 5000)</span><br><span class="line">ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body</span><br><span class="line">if ngx.arg[2] then</span><br><span class="line">ngx.var.resp_body = ngx.ctx.buffered</span><br><span class="line">end</span><br><span class="line">';</span><br><span class="line">……</span><br></pre></td></tr></tbody></table></figure><p>最后在需要的 <code>location</code> 中加入日志配置：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log  /var/log/nginx/postdata.log  postdata;</span><br></pre></td></tr></tbody></table></figure><p>完整配置如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">log_format postdata escape=json '{"realip":"$remote_addr","timestamp":"$time_iso8601","request":"$request","req_body":"$request_body","status":"$status","resp_body":"$resp_body"}';</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name xxx.com;</span><br><span class="line"></span><br><span class="line">    lua_need_request_body on;</span><br><span class="line"></span><br><span class="line">    set $resp_body "";</span><br><span class="line">    body_filter_by_lua '</span><br><span class="line">        local resp_body = string.sub(ngx.arg[1], 1, 5000)</span><br><span class="line">        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body</span><br><span class="line">        if ngx.arg[2] then</span><br><span class="line">            ngx.var.resp_body = ngx.ctx.buffered</span><br><span class="line">        end</span><br><span class="line">    ';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log;</span><br><span class="line">    error_log /var/log/nginx/error.log;</span><br><span class="line">    root   /var/www/public;</span><br><span class="line">    index  index.php index.html index.htm;</span><br><span class="line">    location / {</span><br><span class="line">        try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ {</span><br><span class="line">        # 配置在这里就只会对该 php 服务的请求生效</span><br><span class="line">        access_log  /var/log/nginx/postdata.log  postdata;</span><br><span class="line">        ……</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="利用-Gotty-实现实时请求数据显示"><a href="#利用-Gotty-实现实时请求数据显示" class="headerlink" title="利用 Gotty 实现实时请求数据显示"></a>利用 Gotty 实现实时请求数据显示</h1><blockquote><p><a href="https://github.com/yudai/gotty">GoTTY</a> 是一个简单的基于 Go 语言的命令行工具,它可以将你的终端(TTY)作为 web 程序共享。它会将命令行工具转换为 web 程序。</p></blockquote><p>首先利用 tail 命令，可以实时跟踪日志文件的追加内容并输入：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f 参数表示循环读取， -n 3 表示执行时先读取最后三行</span></span><br><span class="line">tail -f -n 3 /var/log/nginx/postdata.log</span><br></pre></td></tr></tbody></table></figure><p>然后将其输出给 <code>jq</code> 命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f -n 3 /var/log/nginx/postdata.log | jq</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果不想安装 <code>jq</code> 也可以用 <code>python -m json.tool</code> 代替，但是 <code>json.tool</code> 在遇到不合法的 json 时会输出错误，而使用 <code>jq</code> 则没有这个问题</p></blockquote><p>这样就可以在服务器的 Terminal 上实时查看请求和响应的数据了:</p><p><img src="/2020/11/07/add-request-and-response-log-for-nginx/json_log.png" alt="json_log"></p><p>然后利用 Gotty 把它变成 web 服务：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/gotty -p 8888 -c [user]:[passwd] sh -c 'tail -f -n 3 /var/log/nginx/postdata.log | jq' &gt;&gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>用 root 帐号执行以避免权限问题，使用 <code>-c [user]:[passwd]</code> 设置使用网页访问时需要提供的帐户名和密码以提高安全性，使用 <code>sh -c</code> 以开启一个 shell 来执行我们的命令</p></blockquote><blockquote><blockquote><p>还可以利用 crontab 将其设置为开机执行：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@reboot /root/gotty -p 8888 -c shixin:gogo2020 sh -c 'tail -f -n 3 /var/log/nginx/postdata.log | jq' &gt;&gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 运维 </tag>
            
            <tag> 全栈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
